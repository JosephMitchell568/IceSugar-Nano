
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `crc.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: crc.v
Parsing Verilog input from `crc.v' to AST representation.
Generating RTLIL representation for module `\crc'.
crc.v:39: Warning: Range [47:40] select out of bounds on signal `\data': Setting 2 MSB bits to undef.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json crc.json -blif crc.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: crc                 
Automatically selected crc as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \crc

2.2.3. Analyzing design hierarchy..
Top module:  \crc
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$crc.v:34$1 in module crc.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\crc.$proc$crc.v:24$18'.
  Set init value: \crc_state = 4'0000
  Set init value: \crc_buffer = 8'00000000
  Set init value: \led = 1'0
  Set init value: \data_ptr = 7'0101111

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\crc.$proc$crc.v:24$18'.
     1/5: $1\crc_buffer[7:0]
     2/5: $1\crc_state[3:0]
     3/5: $1\data_ptr[6:0]
     4/5: $0\data[45:0]
     5/5: $1\led[0:0]
Creating decoders for process `\crc.$proc$crc.v:34$1'.
     1/5: $0\crc_buffer[7:0] [7:1]
     2/5: $0\crc_buffer[7:0] [0]
     3/5: $0\led[0:0]
     4/5: $0\data_ptr[6:0]
     5/5: $0\crc_state[3:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\crc.\data' from process `\crc.$proc$crc.v:24$18'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\crc.\crc_state' using process `\crc.$proc$crc.v:34$1'.
  created $dff cell `$procdff$59' with positive edge clock.
Creating register for signal `\crc.\crc_buffer' using process `\crc.$proc$crc.v:34$1'.
  created $dff cell `$procdff$60' with positive edge clock.
Creating register for signal `\crc.\led' using process `\crc.$proc$crc.v:34$1'.
  created $dff cell `$procdff$61' with positive edge clock.
Creating register for signal `\crc.\data_ptr' using process `\crc.$proc$crc.v:34$1'.
  created $dff cell `$procdff$62' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `crc.$proc$crc.v:24$18'.
Found and cleaned up 5 empty switches in `\crc.$proc$crc.v:34$1'.
Removing empty process `crc.$proc$crc.v:34$1'.
Cleaned up 5 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.
<suppressed ~9 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 1 unused cells and 18 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module crc..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$24: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc.
    New ctrl vector for $pmux cell $procmux$29: { $procmux$26_CMP $auto$opt_reduce.cc:132:opt_mux$64 $procmux$30_CMP }
    New ctrl vector for $pmux cell $procmux$47: { $procmux$26_CMP $procmux$22_CMP $auto$opt_reduce.cc:132:opt_mux$66 $procmux$40_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$63: { $procmux$22_CMP $procmux$27_CMP }
  Optimizing cells in module \crc.
Performed a total of 3 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 7) from port B of cell crc.$sub$crc.v:40$2 ($sub).
Removed top 6 bits (of 7) from port B of cell crc.$ne$crc.v:61$12 ($ne).
Removed top 6 bits (of 7) from port B of cell crc.$sub$crc.v:84$16 ($sub).
Removed top 2 bits (of 4) from port B of cell crc.$procmux$22_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell crc.$procmux$26_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell crc.$procmux$30_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell crc.$procmux$40_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell crc.$procmux$52 ($mux).
Removed top 1 bits (of 4) from mux cell crc.$procmux$55 ($mux).
Removed top 1 bits (of 4) from wire crc.$procmux$52_Y.
Removed top 1 bits (of 4) from wire crc.$procmux$55_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~112 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module crc:
  creating $macc model for $sub$crc.v:40$2 ($sub).
  creating $macc model for $sub$crc.v:84$16 ($sub).
  creating $alu model for $macc $sub$crc.v:84$16.
  creating $alu model for $macc $sub$crc.v:40$2.
  creating $alu cell for $sub$crc.v:40$2: $auto$alumacc.cc:474:replace_alu$77
  creating $alu cell for $sub$crc.v:84$16: $auto$alumacc.cc:474:replace_alu$80
  created 2 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking crc.crc_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc.
    Consolidated identical input bits for $mux cell $procmux$52:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$67 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$67 [2:1]
      New connections: $auto$wreduce.cc:455:run$67 [0] = 1'0
  Optimizing cells in module \crc.
    Consolidated identical input bits for $mux cell $procmux$55:
      Old ports: A=3'010, B=$auto$wreduce.cc:455:run$67 [2:0], Y=$auto$wreduce.cc:455:run$68 [2:0]
      New ports: A=2'01, B=$auto$wreduce.cc:455:run$67 [2:1], Y=$auto$wreduce.cc:455:run$68 [2:1]
      New connections: $auto$wreduce.cc:455:run$68 [0] = 1'0
  Optimizing cells in module \crc.
Performed a total of 2 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=4\Y_WIDTH=7 for cells of type $alu.
Using template $paramod$constmap:ec75000fd993c82e610a59499f2d339cead325de$paramod$cd3702accb37e237fc51bf2d834856f95b1ac93c\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~339 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.
<suppressed ~447 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 8 unused cells and 158 unused wires.
<suppressed ~9 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell crc.$auto$alumacc.cc:474:replace_alu$77.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell crc.$auto$alumacc.cc:474:replace_alu$80.slice[0].carry: CO=\data_ptr [0]
Mapping SB_LUT4 cell crc.$auto$alumacc.cc:474:replace_alu$77.slice[1].adder back to logic.
Mapping SB_LUT4 cell crc.$auto$alumacc.cc:474:replace_alu$80.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.
<suppressed ~25 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell crc.$auto$alumacc.cc:474:replace_alu$77.slice[1].carry: CO=1'1
Mapping SB_LUT4 cell crc.$auto$alumacc.cc:474:replace_alu$77.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.
<suppressed ~13 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell crc.$auto$alumacc.cc:474:replace_alu$77.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell crc.$auto$alumacc.cc:474:replace_alu$77.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.
<suppressed ~13 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell crc.$auto$alumacc.cc:474:replace_alu$77.slice[3].carry: CO=\data_ptr [3]
Mapping SB_LUT4 cell crc.$auto$alumacc.cc:474:replace_alu$77.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.
<suppressed ~12 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.31.36. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module crc:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$419 to $_DFFE_PP_ for $0\crc_state[3:0] [0] -> \crc_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$420 to $_DFFE_PP_ for $0\crc_state[3:0] [1] -> \crc_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$421 to $_DFFE_PP_ for $0\crc_state[3:0] [2] -> \crc_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$422 to $_DFFE_PP_ for $0\crc_state[3:0] [3] -> \crc_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$423 to $_DFFE_PP_ for $0\crc_buffer[7:0] [0] -> \crc_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$424 to $_DFFE_PP_ for $0\crc_buffer[7:0] [1] -> \crc_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$425 to $_DFFE_PP_ for $0\crc_buffer[7:0] [2] -> \crc_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$426 to $_DFFE_PP_ for $0\crc_buffer[7:0] [3] -> \crc_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$427 to $_DFFE_PP_ for $0\crc_buffer[7:0] [4] -> \crc_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$428 to $_DFFE_PP_ for $0\crc_buffer[7:0] [5] -> \crc_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$429 to $_DFFE_PP_ for $0\crc_buffer[7:0] [6] -> \crc_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$430 to $_DFFE_PP_ for $0\crc_buffer[7:0] [7] -> \crc_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$431 to $_DFFE_PP_ for $0\led[0:0] -> \led.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$432 to $_DFFE_PP_ for $0\data_ptr[6:0] [0] -> \data_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$433 to $_DFFE_PP_ for $0\data_ptr[6:0] [1] -> \data_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$434 to $_DFFE_PP_ for $0\data_ptr[6:0] [2] -> \data_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$435 to $_DFFE_PP_ for $0\data_ptr[6:0] [3] -> \data_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$436 to $_DFFE_PP_ for $0\data_ptr[6:0] [4] -> \data_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$437 to $_DFFE_PP_ for $0\data_ptr[6:0] [5] -> \data_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$438 to $_DFFE_PP_ for $0\data_ptr[6:0] [6] -> \data_ptr [6].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~20 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.
<suppressed ~42 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in crc.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$438 (SB_DFFE): \data_ptr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$423 (SB_DFFE): \crc_buffer [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$432 (SB_DFFE): \data_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$420 (SB_DFFE): \crc_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$421 (SB_DFFE): \crc_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$422 (SB_DFFE): \crc_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$424 (SB_DFFE): \crc_buffer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$425 (SB_DFFE): \crc_buffer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$426 (SB_DFFE): \crc_buffer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$427 (SB_DFFE): \crc_buffer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$428 (SB_DFFE): \crc_buffer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$429 (SB_DFFE): \crc_buffer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$419 (SB_DFFE): \crc_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$431 (SB_DFFE): \led = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$430 (SB_DFFE): \crc_buffer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$433 (SB_DFFE): \data_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$434 (SB_DFFE): \data_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$435 (SB_DFFE): \data_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$436 (SB_DFFE): \data_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$437 (SB_DFFE): \data_ptr [5] = 1

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in crc.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.
<suppressed ~18 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..
Removed 0 unused cells and 138 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\crc' to `<abc-temp-dir>/input.blif'..
Extracted 140 gates and 170 wires to a netlist network with 28 inputs and 28 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      45.
ABC: Participating nodes from both networks       =     101.
ABC: Participating nodes from the first network   =      44. (  91.67 % of nodes)
ABC: Participating nodes from the second network  =      57. ( 118.75 % of nodes)
ABC: Node pairs (any polarity)                    =      44. (  91.67 % of names can be moved)
ABC: Node pairs (same polarity)                   =      43. (  89.58 % of names can be moved)
ABC: Total runtime =     0.04 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       94
ABC RESULTS:        internal signals:      114
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       28
Removing temp directory.
Removed 0 unused cells and 106 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101000101 for cells of type $lut.
No more expansions possible.
<suppressed ~300 debug messages>
Removed 0 unused cells and 94 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \crc

2.43.2. Analyzing design hierarchy..
Top module:  \crc
Removed 0 unused modules.

2.44. Printing statistics.

=== crc ===

   Number of wires:                 55
   Number of wire bits:            144
   Number of public wires:           7
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 83
     SB_CARRY                        7
     SB_DFFE                        20
     SB_LUT4                        56

2.45. Executing CHECK pass (checking for obvious problems).
checking module crc..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: b85e95eb03
CPU: user 0.89s system 0.09s, MEM: 31.30 MB total, 25.74 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 25% 10x read_verilog (0 sec), 12% 22x opt_expr (0 sec), ...
