
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `microsd.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: microsd.v
Parsing Verilog input from `microsd.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:378)
Generating RTLIL representation for module `\microsd'.
microsd.v:188: Warning: Identifier `\data' is implicitly declared.
microsd.v:188: Warning: Range select [47:40] out of bounds on signal `\data': Setting all 8 result bits to undef.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json microsd.json -blif microsd.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: microsd             
Automatically selected microsd as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \microsd

2.2.3. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$microsd.v:161$9 in module microsd.
Marked 1 switch rules as full_case in process $proc$microsd.v:133$1 in module microsd.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\microsd.$proc$microsd.v:107$48'.
  Set init value: \init_delay = 14'00000001010000
  Set init value: \resp_delay = 6'110101
  Set init value: \sd_clk = 1'0
  Set init value: \cmd = 1'1
  Set init value: \led = 1'0
  Set init value: \cmd_read = 1'0
  Set init value: \sd_mem_cmd = 48'010000000000000000000000000000000000000000000001
  Set init value: \sd_mem_cmd_ptr = 6'101111
  Set init value: \sd_mem_state = 4'0000
  Set init value: \crc_state = 4'0000
  Set init value: \data_ptr = 7'0101111
  Set init value: \crc_buffer = 8'00000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\microsd.$proc$microsd.v:107$48'.
     1/15: $1\crc_buffer[7:0]
     2/15: $1\crc_state[3:0]
     3/15: $1\data_ptr[6:0]
     4/15: $1\init_delay[13:0]
     5/15: $0\dat_read[0:0]
     6/15: $1\cmd_read[0:0]
     7/15: $0\sd_cmd_resp[47:0]
     8/15: $1\resp_delay[5:0]
     9/15: $1\sd_mem_state[3:0]
    10/15: $1\sd_mem_cmd_ptr[5:0]
    11/15: $1\sd_mem_cmd[47:0]
    12/15: $0\dat[3:0]
    13/15: $1\cmd[0:0]
    14/15: $1\sd_clk[0:0]
    15/15: $1\led[0:0]
Creating decoders for process `\microsd.$proc$microsd.v:161$9'.
     1/14: $0\sd_mem_cmd[47:0] [47:8]
     2/14: $0\sd_mem_cmd[47:0] [0]
     3/14: $0\sd_mem_cmd[47:0] [7:1]
     4/14: $0\crc_buffer[7:0] [0]
     5/14: $0\data_ptr[6:0]
     6/14: $0\crc_state[3:0]
     7/14: $0\sd_mem_state[3:0]
     8/14: $0\sd_mem_cmd_ptr[5:0]
     9/14: $0\crc_buffer[7:0] [7:1]
    10/14: $0\cmd_read[0:0]
    11/14: $0\led[0:0]
    12/14: $0\cmd[0:0]
    13/14: $0\sd_clk[0:0]
    14/14: $0\resp_delay[5:0]
Creating decoders for process `\microsd.$proc$microsd.v:149$6'.
     1/1: $0\init_delay[13:0]
Creating decoders for process `\microsd.$proc$microsd.v:133$1'.
     1/2: $0\one_hundredkhz[0:0]
     2/2: $0\clkdiv[6:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\microsd.\dat' from process `\microsd.$proc$microsd.v:107$48'.
No latch inferred for signal `\microsd.\sd_cmd_resp' from process `\microsd.$proc$microsd.v:107$48'.
No latch inferred for signal `\microsd.\dat_read' from process `\microsd.$proc$microsd.v:107$48'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\microsd.\resp_delay' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$277' with positive edge clock.
Creating register for signal `\microsd.\sd_clk' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$278' with positive edge clock.
Creating register for signal `\microsd.\cmd' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `\microsd.\led' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$280' with positive edge clock.
Creating register for signal `\microsd.\cmd_read' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$281' with positive edge clock.
Creating register for signal `\microsd.\sd_mem_cmd' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$282' with positive edge clock.
Creating register for signal `\microsd.\sd_mem_cmd_ptr' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$283' with positive edge clock.
Creating register for signal `\microsd.\sd_mem_state' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$284' with positive edge clock.
Creating register for signal `\microsd.\crc_state' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$285' with positive edge clock.
Creating register for signal `\microsd.\data_ptr' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$286' with positive edge clock.
Creating register for signal `\microsd.\crc_buffer' using process `\microsd.$proc$microsd.v:161$9'.
  created $dff cell `$procdff$287' with positive edge clock.
Creating register for signal `\microsd.\init_delay' using process `\microsd.$proc$microsd.v:149$6'.
  created $dff cell `$procdff$288' with positive edge clock.
Creating register for signal `\microsd.\clkdiv' using process `\microsd.$proc$microsd.v:133$1'.
  created $dff cell `$procdff$289' with positive edge clock.
Creating register for signal `\microsd.\one_hundredkhz' using process `\microsd.$proc$microsd.v:133$1'.
  created $dff cell `$procdff$290' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `microsd.$proc$microsd.v:107$48'.
Found and cleaned up 19 empty switches in `\microsd.$proc$microsd.v:161$9'.
Removing empty process `microsd.$proc$microsd.v:161$9'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:149$6'.
Removing empty process `microsd.$proc$microsd.v:149$6'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:133$1'.
Removing empty process `microsd.$proc$microsd.v:133$1'.
Cleaned up 21 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~33 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 2 unused cells and 86 unused wires.
<suppressed ~9 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module microsd..
Warning: Wire microsd.\data is used but has no driver.
found and reported 1 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~147 debug messages>
Removed a total of 49 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$207: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$248: { $procmux$172_CMP $auto$opt_reduce.cc:132:opt_mux$294 }
    New ctrl vector for $pmux cell $procmux$254: $auto$opt_reduce.cc:132:opt_mux$296
    New ctrl vector for $pmux cell $procmux$93: $auto$opt_reduce.cc:132:opt_mux$298
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$293: { $procmux$157_CMP $procmux$166_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$295: { $procmux$156_CMP $procmux$157_CMP $procmux$166_CMP $procmux$172_CMP $procmux$179_CMP }
  Optimizing cells in module \microsd.
Performed a total of 5 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 49 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell microsd.$add$microsd.v:142$3 ($add).
Removed top 25 bits (of 32) from port Y of cell microsd.$add$microsd.v:142$3 ($add).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:154$8 ($sub).
Removed top 3 bits (of 7) from port B of cell microsd.$sub$microsd.v:189$12 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:237$27 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$eq$microsd.v:238$29 ($eq).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:305$37 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:338$42 ($sub).
Removed top 1 bits (of 48) from port B of cell microsd.$eq$microsd.v:345$43 ($eq).
Removed top 1 bits (of 48) from port B of cell microsd.$eq$microsd.v:366$46 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$100_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$107_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$108_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$112_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$134_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$137 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$139 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$144 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$147 ($mux).
Removed top 3 bits (of 4) from mux cell microsd.$procmux$160 ($mux).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$157_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$166_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell microsd.$procmux$177 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$168 ($mux).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$172_CMP0 ($eq).
Removed top 25 bits (of 32) from wire microsd.$add$microsd.v:142$3_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$137_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$139_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$144_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$147_Y.
Removed top 3 bits (of 4) from wire microsd.$procmux$160_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$168_Y.
Removed top 3 bits (of 4) from wire microsd.$procmux$177_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~216 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 27 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module microsd:
  creating $macc model for $add$microsd.v:142$3 ($add).
  creating $macc model for $sub$microsd.v:154$8 ($sub).
  creating $macc model for $sub$microsd.v:189$12 ($sub).
  creating $macc model for $sub$microsd.v:237$27 ($sub).
  creating $macc model for $sub$microsd.v:305$37 ($sub).
  creating $macc model for $sub$microsd.v:338$42 ($sub).
  creating $alu model for $macc $sub$microsd.v:338$42.
  creating $alu model for $macc $sub$microsd.v:305$37.
  creating $alu model for $macc $sub$microsd.v:237$27.
  creating $alu model for $macc $sub$microsd.v:189$12.
  creating $alu model for $macc $sub$microsd.v:154$8.
  creating $alu model for $macc $add$microsd.v:142$3.
  creating $alu cell for $add$microsd.v:142$3: $auto$alumacc.cc:474:replace_alu$321
  creating $alu cell for $sub$microsd.v:154$8: $auto$alumacc.cc:474:replace_alu$324
  creating $alu cell for $sub$microsd.v:189$12: $auto$alumacc.cc:474:replace_alu$327
  creating $alu cell for $sub$microsd.v:237$27: $auto$alumacc.cc:474:replace_alu$330
  creating $alu cell for $sub$microsd.v:305$37: $auto$alumacc.cc:474:replace_alu$333
  creating $alu cell for $sub$microsd.v:338$42: $auto$alumacc.cc:474:replace_alu$336
  created 6 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking microsd.crc_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking microsd.sd_mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~5 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$144:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$302 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$302 [2:1]
      New connections: $auto$wreduce.cc:455:run$302 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$147:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$303 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$303 [2:1]
      New connections: $auto$wreduce.cc:455:run$303 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$149:
      Old ports: A={ 1'0 $auto$wreduce.cc:455:run$303 [2:0] }, B={ 1'0 $auto$wreduce.cc:455:run$302 [2:0] }, Y=$procmux$149_Y
      New ports: A=$auto$wreduce.cc:455:run$303 [2:0], B=$auto$wreduce.cc:455:run$302 [2:0], Y=$procmux$149_Y [2:0]
      New connections: $procmux$149_Y [3] = 1'0
    Consolidated identical input bits for $mux cell $procmux$168:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$305 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$305 [2:1]
      New connections: $auto$wreduce.cc:455:run$305 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$207:
      Old ports: A={ 1'0 \crc_buffer [6:1] }, B={ $xor$microsd.v:205$22_Y \crc_buffer [6:4] $xor$microsd.v:209$18_Y \crc_buffer [2:1] }, Y=$procmux$207_Y
      New ports: A={ 1'0 \crc_buffer [3] }, B={ $xor$microsd.v:205$22_Y $xor$microsd.v:209$18_Y }, Y={ $procmux$207_Y [6] $procmux$207_Y [2] }
      New connections: { $procmux$207_Y [5:3] $procmux$207_Y [1:0] } = { \crc_buffer [6:4] \crc_buffer [2:1] }
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$149:
      Old ports: A=$auto$wreduce.cc:455:run$303 [2:0], B=$auto$wreduce.cc:455:run$302 [2:0], Y=$procmux$149_Y [2:0]
      New ports: A=$auto$wreduce.cc:455:run$303 [2:1], B=$auto$wreduce.cc:455:run$302 [2:1], Y=$procmux$149_Y [2:1]
      New connections: $procmux$149_Y [0] = 1'0
  Optimizing cells in module \microsd.
Performed a total of 6 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:0b5db95f3da0fa26c49815107c3701584a28d77d$paramod$f330a14fbe75cde366530adb56d7751f70a2c538\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:217d1fdd1fbbb1dd0a6b22ff249120c08f7b7b0c$paramod$d4e9353aa25f4197c2d56307ac757f55eeb00dfb\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $tribuf.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=4\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~606 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~617 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~234 debug messages>
Removed a total of 78 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 222 unused cells and 388 unused wires.
<suppressed ~223 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$321.slice[0].carry: CO=\clkdiv [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$324.slice[0].carry: CO=\init_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$327.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$330.slice[0].carry: CO=\data_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$333.slice[0].carry: CO=\sd_mem_cmd_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$336.slice[0].carry: CO=\resp_delay [0]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$321.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$324.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$327.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$330.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$333.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$336.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~76 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$327.slice[1].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$327.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~13 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$327.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$327.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~13 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$327.slice[3].carry: CO=\data_ptr [3]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$327.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~12 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.31.36. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module microsd:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1485 to $_DFFE_PP_ for $0\resp_delay[5:0] [0] -> \resp_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1486 to $_DFFE_PP_ for $0\resp_delay[5:0] [1] -> \resp_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1487 to $_DFFE_PP_ for $0\resp_delay[5:0] [2] -> \resp_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1488 to $_DFFE_PP_ for $0\resp_delay[5:0] [3] -> \resp_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1489 to $_DFFE_PP_ for $0\resp_delay[5:0] [4] -> \resp_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1490 to $_DFFE_PP_ for $0\resp_delay[5:0] [5] -> \resp_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1512 to $_DFFE_PP_ for $0\sd_clk[0:0] -> \sd_clk.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1513 to $_DFFE_PP_ for $0\cmd[0:0] -> \cmd.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1514 to $_DFFE_PP_ for $0\led[0:0] -> \led.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1515 to $_DFFE_PP_ for $0\cmd_read[0:0] -> \cmd_read.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1516 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [0] -> \sd_mem_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1517 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [1] -> \sd_mem_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1518 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [2] -> \sd_mem_cmd [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1519 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [3] -> \sd_mem_cmd [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1520 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [4] -> \sd_mem_cmd [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1521 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [5] -> \sd_mem_cmd [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1522 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [6] -> \sd_mem_cmd [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1523 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [7] -> \sd_mem_cmd [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1524 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [8] -> \sd_mem_cmd [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1525 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [9] -> \sd_mem_cmd [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1526 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [10] -> \sd_mem_cmd [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1527 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [11] -> \sd_mem_cmd [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1528 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [12] -> \sd_mem_cmd [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1529 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [13] -> \sd_mem_cmd [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1530 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [14] -> \sd_mem_cmd [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1531 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [15] -> \sd_mem_cmd [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1532 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [16] -> \sd_mem_cmd [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1533 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [17] -> \sd_mem_cmd [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1534 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [18] -> \sd_mem_cmd [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1535 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [19] -> \sd_mem_cmd [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1536 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [20] -> \sd_mem_cmd [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1537 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [21] -> \sd_mem_cmd [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1538 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [22] -> \sd_mem_cmd [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1539 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [23] -> \sd_mem_cmd [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1540 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [24] -> \sd_mem_cmd [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1541 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [25] -> \sd_mem_cmd [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1542 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [26] -> \sd_mem_cmd [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1543 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [27] -> \sd_mem_cmd [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1544 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [28] -> \sd_mem_cmd [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1545 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [29] -> \sd_mem_cmd [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1546 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [30] -> \sd_mem_cmd [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1547 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [31] -> \sd_mem_cmd [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1548 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [32] -> \sd_mem_cmd [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1549 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [33] -> \sd_mem_cmd [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1550 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [34] -> \sd_mem_cmd [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1551 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [35] -> \sd_mem_cmd [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1552 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [36] -> \sd_mem_cmd [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1553 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [37] -> \sd_mem_cmd [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1554 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [38] -> \sd_mem_cmd [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1555 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [39] -> \sd_mem_cmd [39].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1556 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [40] -> \sd_mem_cmd [40].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1557 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [41] -> \sd_mem_cmd [41].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1558 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [42] -> \sd_mem_cmd [42].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1559 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [43] -> \sd_mem_cmd [43].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1560 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [44] -> \sd_mem_cmd [44].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1561 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [45] -> \sd_mem_cmd [45].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1562 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [46] -> \sd_mem_cmd [46].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1563 to $_DFFE_PP_ for $0\sd_mem_cmd[47:0] [47] -> \sd_mem_cmd [47].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1564 to $_DFFE_PP_ for $0\sd_mem_cmd_ptr[5:0] [0] -> \sd_mem_cmd_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1565 to $_DFFE_PP_ for $0\sd_mem_cmd_ptr[5:0] [1] -> \sd_mem_cmd_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1566 to $_DFFE_PP_ for $0\sd_mem_cmd_ptr[5:0] [2] -> \sd_mem_cmd_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1567 to $_DFFE_PP_ for $0\sd_mem_cmd_ptr[5:0] [3] -> \sd_mem_cmd_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1568 to $_DFFE_PP_ for $0\sd_mem_cmd_ptr[5:0] [4] -> \sd_mem_cmd_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1569 to $_DFFE_PP_ for $0\sd_mem_cmd_ptr[5:0] [5] -> \sd_mem_cmd_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1570 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [0] -> \sd_mem_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1571 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [1] -> \sd_mem_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1572 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [2] -> \sd_mem_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1573 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [3] -> \sd_mem_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1574 to $_DFFE_PP_ for $0\crc_state[3:0] [0] -> \crc_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1575 to $_DFFE_PP_ for $0\crc_state[3:0] [1] -> \crc_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1576 to $_DFFE_PP_ for $0\crc_state[3:0] [2] -> \crc_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1577 to $_DFFE_PP_ for $0\crc_state[3:0] [3] -> \crc_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1578 to $_DFFE_PP_ for $0\data_ptr[6:0] [0] -> \data_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1579 to $_DFFE_PP_ for $0\data_ptr[6:0] [1] -> \data_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1580 to $_DFFE_PP_ for $0\data_ptr[6:0] [2] -> \data_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1581 to $_DFFE_PP_ for $0\data_ptr[6:0] [3] -> \data_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1582 to $_DFFE_PP_ for $0\data_ptr[6:0] [4] -> \data_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1583 to $_DFFE_PP_ for $0\data_ptr[6:0] [5] -> \data_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1584 to $_DFFE_PP_ for $0\data_ptr[6:0] [6] -> \data_ptr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1585 to $_DFFE_PP_ for $0\crc_buffer[7:0] [0] -> \crc_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1586 to $_DFFE_PP_ for $0\crc_buffer[7:0] [1] -> \crc_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1587 to $_DFFE_PP_ for $0\crc_buffer[7:0] [2] -> \crc_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1588 to $_DFFE_PP_ for $0\crc_buffer[7:0] [3] -> \crc_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1589 to $_DFFE_PP_ for $0\crc_buffer[7:0] [4] -> \crc_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1590 to $_DFFE_PP_ for $0\crc_buffer[7:0] [5] -> \crc_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1591 to $_DFFE_PP_ for $0\crc_buffer[7:0] [6] -> \crc_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1592 to $_DFFE_PP_ for $0\crc_buffer[7:0] [7] -> \crc_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1593 to $_DFFE_PP_ for $0\init_delay[13:0] [0] -> \init_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1594 to $_DFFE_PP_ for $0\init_delay[13:0] [1] -> \init_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1595 to $_DFFE_PP_ for $0\init_delay[13:0] [2] -> \init_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1596 to $_DFFE_PP_ for $0\init_delay[13:0] [3] -> \init_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1597 to $_DFFE_PP_ for $0\init_delay[13:0] [4] -> \init_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1598 to $_DFFE_PP_ for $0\init_delay[13:0] [5] -> \init_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1599 to $_DFFE_PP_ for $0\init_delay[13:0] [6] -> \init_delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1600 to $_DFFE_PP_ for $0\init_delay[13:0] [7] -> \init_delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1601 to $_DFFE_PP_ for $0\init_delay[13:0] [8] -> \init_delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1602 to $_DFFE_PP_ for $0\init_delay[13:0] [9] -> \init_delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1603 to $_DFFE_PP_ for $0\init_delay[13:0] [10] -> \init_delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1604 to $_DFFE_PP_ for $0\init_delay[13:0] [11] -> \init_delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1605 to $_DFFE_PP_ for $0\init_delay[13:0] [12] -> \init_delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1606 to $_DFFE_PP_ for $0\init_delay[13:0] [13] -> \init_delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1608 to $_DFFE_PP_ for $0\clkdiv[6:0] [1] -> \clkdiv [1].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~109 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~668 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in microsd.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1601 (SB_DFFE): \init_delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1485 (SB_DFFE): \resp_delay [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1486 (SB_DFFE): \resp_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1487 (SB_DFFE): \resp_delay [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1488 (SB_DFFE): \resp_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1489 (SB_DFFE): \resp_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1513 (SB_DFFE): \cmd = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1521 (SB_DFFE): \sd_mem_cmd [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1514 (SB_DFFE): \led = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1515 (SB_DFFE): \cmd_read = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1490 (SB_DFFE): \resp_delay [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1517 (SB_DFFE): \sd_mem_cmd [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1518 (SB_DFFE): \sd_mem_cmd [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1519 (SB_DFFE): \sd_mem_cmd [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1512 (SB_DFFE): \sd_clk = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1520 (SB_DFFE): \sd_mem_cmd [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1522 (SB_DFFE): \sd_mem_cmd [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1523 (SB_DFFE): \sd_mem_cmd [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1524 (SB_DFFE): \sd_mem_cmd [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1525 (SB_DFFE): \sd_mem_cmd [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1526 (SB_DFFE): \sd_mem_cmd [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1527 (SB_DFFE): \sd_mem_cmd [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1528 (SB_DFFE): \sd_mem_cmd [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1529 (SB_DFFE): \sd_mem_cmd [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1530 (SB_DFFE): \sd_mem_cmd [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1531 (SB_DFFE): \sd_mem_cmd [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1532 (SB_DFFE): \sd_mem_cmd [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1533 (SB_DFFE): \sd_mem_cmd [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1534 (SB_DFFE): \sd_mem_cmd [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1535 (SB_DFFE): \sd_mem_cmd [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1536 (SB_DFFE): \sd_mem_cmd [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1537 (SB_DFFE): \sd_mem_cmd [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1538 (SB_DFFE): \sd_mem_cmd [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1539 (SB_DFFE): \sd_mem_cmd [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1540 (SB_DFFE): \sd_mem_cmd [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1541 (SB_DFFE): \sd_mem_cmd [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1542 (SB_DFFE): \sd_mem_cmd [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1543 (SB_DFFE): \sd_mem_cmd [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1544 (SB_DFFE): \sd_mem_cmd [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1545 (SB_DFFE): \sd_mem_cmd [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1546 (SB_DFFE): \sd_mem_cmd [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1547 (SB_DFFE): \sd_mem_cmd [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1548 (SB_DFFE): \sd_mem_cmd [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1549 (SB_DFFE): \sd_mem_cmd [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1550 (SB_DFFE): \sd_mem_cmd [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1551 (SB_DFFE): \sd_mem_cmd [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1552 (SB_DFFE): \sd_mem_cmd [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1553 (SB_DFFE): \sd_mem_cmd [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1554 (SB_DFFE): \sd_mem_cmd [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1555 (SB_DFFE): \sd_mem_cmd [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1556 (SB_DFFE): \sd_mem_cmd [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1557 (SB_DFFE): \sd_mem_cmd [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1558 (SB_DFFE): \sd_mem_cmd [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1559 (SB_DFFE): \sd_mem_cmd [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1560 (SB_DFFE): \sd_mem_cmd [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1561 (SB_DFFE): \sd_mem_cmd [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1562 (SB_DFFE): \sd_mem_cmd [46] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1563 (SB_DFFE): \sd_mem_cmd [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1564 (SB_DFFE): \sd_mem_cmd_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1565 (SB_DFFE): \sd_mem_cmd_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1566 (SB_DFFE): \sd_mem_cmd_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1567 (SB_DFFE): \sd_mem_cmd_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1568 (SB_DFFE): \sd_mem_cmd_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1572 (SB_DFFE): \sd_mem_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1569 (SB_DFFE): \sd_mem_cmd_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1516 (SB_DFFE): \sd_mem_cmd [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1571 (SB_DFFE): \sd_mem_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1573 (SB_DFFE): \sd_mem_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1574 (SB_DFFE): \crc_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1575 (SB_DFFE): \crc_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1576 (SB_DFFE): \crc_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1582 (SB_DFFE): \data_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1577 (SB_DFFE): \crc_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1579 (SB_DFFE): \data_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1580 (SB_DFFE): \data_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1570 (SB_DFFE): \sd_mem_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1581 (SB_DFFE): \data_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1583 (SB_DFFE): \data_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1584 (SB_DFFE): \data_ptr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1585 (SB_DFFE): \crc_buffer [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1586 (SB_DFFE): \crc_buffer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1587 (SB_DFFE): \crc_buffer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1588 (SB_DFFE): \crc_buffer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1589 (SB_DFFE): \crc_buffer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1590 (SB_DFFE): \crc_buffer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1591 (SB_DFFE): \crc_buffer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1592 (SB_DFFE): \crc_buffer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1594 (SB_DFFE): \init_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1595 (SB_DFFE): \init_delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1596 (SB_DFFE): \init_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1597 (SB_DFFE): \init_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1598 (SB_DFFE): \init_delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1599 (SB_DFFE): \init_delay [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1593 (SB_DFFE): \init_delay [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1600 (SB_DFFE): \init_delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1602 (SB_DFFE): \init_delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1603 (SB_DFFE): \init_delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1604 (SB_DFFE): \init_delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1605 (SB_DFFE): \init_delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1606 (SB_DFFE): \init_delay [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1578 (SB_DFFE): \data_ptr [0] = 1

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in microsd.
  Merging $auto$simplemap.cc:277:simplemap_mux$1511 (A=1'0, B=$add$microsd.v:142$3_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$398) into $auto$simplemap.cc:420:simplemap_dff$1613 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1462 (A=$procmux$264_Y [1], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$620) into $auto$simplemap.cc:420:simplemap_dff$1486 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1464 (A=$procmux$264_Y [3], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$620) into $auto$simplemap.cc:420:simplemap_dff$1488 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1505 (A=1'0, B=$add$microsd.v:142$3_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$398) into $auto$simplemap.cc:420:simplemap_dff$1607 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1506 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$2373 [1], S=$auto$simplemap.cc:256:simplemap_eqne$398) into $auto$simplemap.cc:420:simplemap_dff$1608 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1507 (A=1'0, B=$add$microsd.v:142$3_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$398) into $auto$simplemap.cc:420:simplemap_dff$1609 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1508 (A=1'0, B=$add$microsd.v:142$3_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$398) into $auto$simplemap.cc:420:simplemap_dff$1610 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1509 (A=1'0, B=$add$microsd.v:142$3_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$398) into $auto$simplemap.cc:420:simplemap_dff$1611 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1510 (A=1'0, B=$add$microsd.v:142$3_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$398) into $auto$simplemap.cc:420:simplemap_dff$1612 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~77 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~2904 debug messages>
Removed a total of 968 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 9 unused cells and 1607 unused wires.
<suppressed ~10 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\microsd' to `<abc-temp-dir>/input.blif'..
Extracted 583 gates and 715 wires to a netlist network with 130 inputs and 86 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     133.
ABC: Participating nodes from both networks       =     308.
ABC: Participating nodes from the first network   =     132. (  62.56 % of nodes)
ABC: Participating nodes from the second network  =     176. (  83.41 % of nodes)
ABC: Node pairs (any polarity)                    =     132. (  62.56 % of names can be moved)
ABC: Node pairs (same polarity)                   =     112. (  53.08 % of names can be moved)
ABC: Total runtime =     0.15 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      420
ABC RESULTS:        internal signals:      499
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:       86
Removing temp directory.
Removed 0 unused cells and 384 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001101010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
No more expansions possible.
<suppressed ~957 debug messages>
Removed 0 unused cells and 418 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \microsd

2.43.2. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.44. Printing statistics.

=== microsd ===

   Number of wires:                241
   Number of wire bits:            520
   Number of public wires:          23
   Number of public wire bits:     171
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                389
     $_TBUF_                         1
     SB_CARRY                       32
     SB_DFF                          1
     SB_DFFE                        99
     SB_DFFESR                       3
     SB_DFFSR                        6
     SB_LUT4                       247

2.45. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: f2a62548b8
CPU: user 2.70s system 0.15s, MEM: 31.96 MB total, 26.40 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 23% 23x opt_expr (0 sec), 17% 18x opt_merge (0 sec), ...
