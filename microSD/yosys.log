
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `microsd.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: microsd.v
Parsing Verilog input from `microsd.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:608)
Generating RTLIL representation for module `\microsd'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json microsd.json -blif microsd.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: microsd             
Automatically selected microsd as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \microsd

2.2.3. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 15 switch rules as full_case in process $proc$microsd.v:137$9 in module microsd.
Marked 1 switch rules as full_case in process $proc$microsd.v:109$1 in module microsd.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\microsd.$proc$microsd.v:77$55'.
  Set init value: \init_delay = 14'00000001010000
  Set init value: \resp_delay = 6'110101
  Set init value: \sd_clk = 1'0
  Set init value: \cmd = 1'1
  Set init value: \sd_cmd_resp_r2 = 136'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_resp_ptr_r2 = 8'10000111
  Set init value: \sd_cmd_resp = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_resp_ptr = 6'101111
  Set init value: \cmd_read = 1'0
  Set init value: \sd_cmd = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_ptr = 6'101111
  Set init value: \sd_mem_state = 4'0000
  Set init value: \data_ptr = 7'0101111
  Set init value: \crc_state = 4'0000
  Set init value: \crc_buffer = 8'00000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\microsd.$proc$microsd.v:77$55'.
     1/19: $0\crc_counter[7:0]
     2/19: $1\crc_buffer[7:0]
     3/19: $1\crc_state[3:0]
     4/19: $1\data_ptr[6:0]
     5/19: $1\init_delay[13:0]
     6/19: $0\dat_read[0:0]
     7/19: $1\cmd_read[0:0]
     8/19: $1\sd_cmd_resp_ptr_r2[7:0]
     9/19: $1\sd_cmd_resp_r2[135:0]
    10/19: $1\sd_cmd_resp_ptr[5:0]
    11/19: $1\sd_cmd_resp[47:0]
    12/19: $1\resp_delay[5:0]
    13/19: $1\sd_mem_state[3:0]
    14/19: $1\sd_cmd_ptr[5:0]
    15/19: $1\sd_cmd[47:0]
    16/19: $0\dat[3:0]
    17/19: $1\cmd[0:0]
    18/19: $1\sd_clk[0:0]
    19/19: $0\led[0:0]
Creating decoders for process `\microsd.$proc$microsd.v:137$9'.
     1/200: $0\sd_cmd_resp[47:0] [47]
     2/200: $0\sd_cmd_resp[47:0] [46]
     3/200: $0\sd_cmd_resp[47:0] [45]
     4/200: $0\sd_cmd_resp[47:0] [44]
     5/200: $0\sd_cmd_resp[47:0] [43]
     6/200: $0\sd_cmd_resp[47:0] [42]
     7/200: $0\sd_cmd_resp[47:0] [41]
     8/200: $0\sd_cmd_resp[47:0] [40]
     9/200: $0\sd_cmd_resp[47:0] [39]
    10/200: $0\sd_cmd_resp[47:0] [38]
    11/200: $0\sd_cmd_resp[47:0] [37]
    12/200: $0\sd_cmd_resp[47:0] [36]
    13/200: $0\sd_cmd_resp[47:0] [35]
    14/200: $0\sd_cmd_resp[47:0] [34]
    15/200: $0\sd_cmd_resp[47:0] [33]
    16/200: $0\sd_cmd_resp[47:0] [32]
    17/200: $0\sd_cmd_resp[47:0] [31]
    18/200: $0\sd_cmd_resp[47:0] [30]
    19/200: $0\sd_cmd_resp[47:0] [29]
    20/200: $0\sd_cmd_resp[47:0] [28]
    21/200: $0\sd_cmd_resp[47:0] [27]
    22/200: $0\sd_cmd_resp[47:0] [26]
    23/200: $0\sd_cmd_resp[47:0] [25]
    24/200: $0\sd_cmd_resp[47:0] [24]
    25/200: $0\sd_cmd_resp[47:0] [23]
    26/200: $0\sd_cmd_resp[47:0] [22]
    27/200: $0\sd_cmd_resp[47:0] [21]
    28/200: $0\sd_cmd_resp[47:0] [20]
    29/200: $0\sd_cmd_resp[47:0] [19]
    30/200: $0\sd_cmd_resp[47:0] [18]
    31/200: $0\sd_cmd_resp[47:0] [17]
    32/200: $0\sd_cmd_resp[47:0] [16]
    33/200: $0\sd_cmd_resp[47:0] [15]
    34/200: $0\sd_cmd_resp[47:0] [14]
    35/200: $0\sd_cmd_resp[47:0] [13]
    36/200: $0\sd_cmd_resp[47:0] [12]
    37/200: $0\sd_cmd_resp[47:0] [11]
    38/200: $0\sd_cmd_resp[47:0] [10]
    39/200: $0\sd_cmd_resp[47:0] [9]
    40/200: $0\sd_cmd_resp[47:0] [8]
    41/200: $0\sd_cmd_resp[47:0] [7]
    42/200: $0\sd_cmd_resp[47:0] [6]
    43/200: $0\sd_cmd_resp[47:0] [5]
    44/200: $0\sd_cmd_resp[47:0] [4]
    45/200: $0\sd_cmd_resp[47:0] [3]
    46/200: $0\sd_cmd_resp[47:0] [2]
    47/200: $0\sd_cmd_resp[47:0] [1]
    48/200: $0\sd_cmd_resp[47:0] [0]
    49/200: $0\sd_cmd_resp_r2[135:0] [134]
    50/200: $0\sd_cmd_resp_r2[135:0] [133]
    51/200: $0\sd_cmd_resp_r2[135:0] [132]
    52/200: $0\sd_cmd_resp_r2[135:0] [131]
    53/200: $0\sd_cmd_resp_r2[135:0] [130]
    54/200: $0\sd_cmd_resp_r2[135:0] [129]
    55/200: $0\sd_cmd_resp_r2[135:0] [128]
    56/200: $0\sd_cmd_resp_r2[135:0] [127]
    57/200: $0\sd_cmd_resp_r2[135:0] [126]
    58/200: $0\sd_cmd_resp_r2[135:0] [125]
    59/200: $0\sd_cmd_resp_r2[135:0] [124]
    60/200: $0\sd_cmd_resp_r2[135:0] [123]
    61/200: $0\sd_cmd_resp_r2[135:0] [122]
    62/200: $0\sd_cmd_resp_r2[135:0] [121]
    63/200: $0\sd_cmd_resp_r2[135:0] [120]
    64/200: $0\sd_cmd_resp_r2[135:0] [119]
    65/200: $0\sd_cmd_resp_r2[135:0] [118]
    66/200: $0\sd_cmd_resp_r2[135:0] [117]
    67/200: $0\sd_cmd_resp_r2[135:0] [116]
    68/200: $0\sd_cmd_resp_r2[135:0] [115]
    69/200: $0\sd_cmd_resp_r2[135:0] [114]
    70/200: $0\sd_cmd_resp_r2[135:0] [113]
    71/200: $0\sd_cmd_resp_r2[135:0] [112]
    72/200: $0\sd_cmd_resp_r2[135:0] [111]
    73/200: $0\sd_cmd_resp_r2[135:0] [110]
    74/200: $0\sd_cmd_resp_r2[135:0] [109]
    75/200: $0\sd_cmd_resp_r2[135:0] [108]
    76/200: $0\sd_cmd_resp_r2[135:0] [107]
    77/200: $0\sd_cmd_resp_r2[135:0] [106]
    78/200: $0\sd_cmd_resp_r2[135:0] [105]
    79/200: $0\sd_cmd_resp_r2[135:0] [104]
    80/200: $0\sd_cmd_resp_r2[135:0] [103]
    81/200: $0\sd_cmd_resp_r2[135:0] [102]
    82/200: $0\sd_cmd_resp_r2[135:0] [101]
    83/200: $0\sd_cmd_resp_r2[135:0] [100]
    84/200: $0\sd_cmd_resp_r2[135:0] [99]
    85/200: $0\sd_cmd_resp_r2[135:0] [98]
    86/200: $0\sd_cmd_resp_r2[135:0] [97]
    87/200: $0\sd_cmd_resp_r2[135:0] [96]
    88/200: $0\sd_cmd_resp_r2[135:0] [95]
    89/200: $0\sd_cmd_resp_r2[135:0] [94]
    90/200: $0\sd_cmd_resp_r2[135:0] [93]
    91/200: $0\sd_cmd_resp_r2[135:0] [92]
    92/200: $0\sd_cmd_resp_r2[135:0] [91]
    93/200: $0\sd_cmd_resp_r2[135:0] [90]
    94/200: $0\sd_cmd_resp_r2[135:0] [89]
    95/200: $0\sd_cmd_resp_r2[135:0] [88]
    96/200: $0\sd_cmd_resp_r2[135:0] [87]
    97/200: $0\sd_cmd_resp_r2[135:0] [86]
    98/200: $0\sd_cmd_resp_r2[135:0] [85]
    99/200: $0\sd_cmd_resp_r2[135:0] [84]
   100/200: $0\sd_cmd_resp_r2[135:0] [83]
   101/200: $0\sd_cmd_resp_r2[135:0] [82]
   102/200: $0\sd_cmd_resp_r2[135:0] [81]
   103/200: $0\sd_cmd_resp_r2[135:0] [80]
   104/200: $0\sd_cmd_resp_r2[135:0] [79]
   105/200: $0\sd_cmd_resp_r2[135:0] [78]
   106/200: $0\sd_cmd_resp_r2[135:0] [77]
   107/200: $0\sd_cmd_resp_r2[135:0] [76]
   108/200: $0\sd_cmd_resp_r2[135:0] [75]
   109/200: $0\sd_cmd_resp_r2[135:0] [74]
   110/200: $0\sd_cmd_resp_r2[135:0] [73]
   111/200: $0\sd_cmd_resp_r2[135:0] [72]
   112/200: $0\sd_cmd_resp_r2[135:0] [71]
   113/200: $0\sd_cmd_resp_r2[135:0] [70]
   114/200: $0\sd_cmd_resp_r2[135:0] [69]
   115/200: $0\sd_cmd_resp_r2[135:0] [68]
   116/200: $0\sd_cmd_resp_r2[135:0] [67]
   117/200: $0\sd_cmd_resp_r2[135:0] [66]
   118/200: $0\sd_cmd_resp_r2[135:0] [65]
   119/200: $0\sd_cmd_resp_r2[135:0] [64]
   120/200: $0\sd_cmd_resp_r2[135:0] [63]
   121/200: $0\sd_cmd_resp_r2[135:0] [62]
   122/200: $0\sd_cmd_resp_r2[135:0] [61]
   123/200: $0\sd_cmd_resp_r2[135:0] [60]
   124/200: $0\sd_cmd_resp_r2[135:0] [59]
   125/200: $0\sd_cmd_resp_r2[135:0] [58]
   126/200: $0\sd_cmd_resp_r2[135:0] [57]
   127/200: $0\sd_cmd_resp_r2[135:0] [56]
   128/200: $0\sd_cmd_resp_r2[135:0] [55]
   129/200: $0\sd_cmd_resp_r2[135:0] [54]
   130/200: $0\sd_cmd_resp_r2[135:0] [53]
   131/200: $0\sd_cmd_resp_r2[135:0] [52]
   132/200: $0\sd_cmd_resp_r2[135:0] [51]
   133/200: $0\sd_cmd_resp_r2[135:0] [50]
   134/200: $0\sd_cmd_resp_r2[135:0] [49]
   135/200: $0\sd_cmd_resp_r2[135:0] [48]
   136/200: $0\sd_cmd_resp_r2[135:0] [47]
   137/200: $0\sd_cmd_resp_r2[135:0] [46]
   138/200: $0\sd_cmd_resp_r2[135:0] [45]
   139/200: $0\sd_cmd_resp_r2[135:0] [44]
   140/200: $0\sd_cmd_resp_r2[135:0] [43]
   141/200: $0\sd_cmd_resp_r2[135:0] [42]
   142/200: $0\sd_cmd_resp_r2[135:0] [41]
   143/200: $0\sd_cmd_resp_r2[135:0] [40]
   144/200: $0\sd_cmd_resp_r2[135:0] [39]
   145/200: $0\sd_cmd_resp_r2[135:0] [38]
   146/200: $0\sd_cmd_resp_r2[135:0] [37]
   147/200: $0\sd_cmd_resp_r2[135:0] [36]
   148/200: $0\sd_cmd_resp_r2[135:0] [35]
   149/200: $0\sd_cmd_resp_r2[135:0] [34]
   150/200: $0\sd_cmd_resp_r2[135:0] [33]
   151/200: $0\sd_cmd_resp_r2[135:0] [32]
   152/200: $0\sd_cmd_resp_r2[135:0] [31]
   153/200: $0\sd_cmd_resp_r2[135:0] [30]
   154/200: $0\sd_cmd_resp_r2[135:0] [29]
   155/200: $0\sd_cmd_resp_r2[135:0] [28]
   156/200: $0\sd_cmd_resp_r2[135:0] [27]
   157/200: $0\sd_cmd_resp_r2[135:0] [26]
   158/200: $0\sd_cmd_resp_r2[135:0] [25]
   159/200: $0\sd_cmd_resp_r2[135:0] [24]
   160/200: $0\sd_cmd_resp_r2[135:0] [23]
   161/200: $0\sd_cmd_resp_r2[135:0] [22]
   162/200: $0\sd_cmd_resp_r2[135:0] [21]
   163/200: $0\sd_cmd_resp_r2[135:0] [20]
   164/200: $0\sd_cmd_resp_r2[135:0] [19]
   165/200: $0\sd_cmd_resp_r2[135:0] [18]
   166/200: $0\sd_cmd_resp_r2[135:0] [17]
   167/200: $0\sd_cmd_resp_r2[135:0] [16]
   168/200: $0\sd_cmd_resp_r2[135:0] [15]
   169/200: $0\sd_cmd_resp_r2[135:0] [14]
   170/200: $0\sd_cmd_resp_r2[135:0] [13]
   171/200: $0\sd_cmd_resp_r2[135:0] [12]
   172/200: $0\sd_cmd_resp_r2[135:0] [11]
   173/200: $0\sd_cmd_resp_r2[135:0] [10]
   174/200: $0\sd_cmd_resp_r2[135:0] [9]
   175/200: $0\sd_cmd_resp_r2[135:0] [8]
   176/200: $0\sd_cmd_resp_r2[135:0] [7]
   177/200: $0\sd_cmd_resp_r2[135:0] [6]
   178/200: $0\sd_cmd_resp_r2[135:0] [5]
   179/200: $0\sd_cmd_resp_r2[135:0] [4]
   180/200: $0\sd_cmd_resp_r2[135:0] [3]
   181/200: $0\sd_cmd_resp_r2[135:0] [2]
   182/200: $0\sd_cmd_resp_r2[135:0] [1]
   183/200: $0\sd_cmd_resp_r2[135:0] [0]
   184/200: $0\sd_cmd[47:0] [7:1]
   185/200: $0\sd_cmd[47:0] [0]
   186/200: $0\crc_buffer[7:0] [0]
   187/200: $0\crc_state[3:0]
   188/200: $0\data_ptr[6:0]
   189/200: $0\sd_mem_state[3:0]
   190/200: $0\sd_rca[15:0]
   191/200: $0\sd_cmd_ptr[5:0]
   192/200: $0\crc_buffer[7:0] [7:1]
   193/200: $0\cmd_read[0:0]
   194/200: $0\sd_cmd_resp_ptr[5:0]
   195/200: $0\sd_cmd_resp_r2[135:0] [135]
   196/200: $0\sd_cmd_resp_ptr_r2[7:0]
   197/200: $0\sd_cmd[47:0] [47:8]
   198/200: $0\cmd[0:0]
   199/200: $0\sd_clk[0:0]
   200/200: $0\resp_delay[5:0]
Creating decoders for process `\microsd.$proc$microsd.v:125$6'.
     1/1: $0\init_delay[13:0]
Creating decoders for process `\microsd.$proc$microsd.v:109$1'.
     1/2: $0\one_hundredkhz[0:0]
     2/2: $0\clkdiv[6:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\microsd.\dat' from process `\microsd.$proc$microsd.v:77$55'.
No latch inferred for signal `\microsd.\led' from process `\microsd.$proc$microsd.v:77$55'.
No latch inferred for signal `\microsd.\dat_read' from process `\microsd.$proc$microsd.v:77$55'.
No latch inferred for signal `\microsd.\crc_counter' from process `\microsd.$proc$microsd.v:77$55'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\microsd.\resp_delay' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24664' with positive edge clock.
Creating register for signal `\microsd.\sd_clk' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24665' with positive edge clock.
Creating register for signal `\microsd.\cmd' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24666' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_r2' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24667' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_ptr_r2' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24668' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24669' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_ptr' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24670' with positive edge clock.
Creating register for signal `\microsd.\cmd_read' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24671' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24672' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_ptr' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24673' with positive edge clock.
Creating register for signal `\microsd.\sd_rca' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24674' with positive edge clock.
Creating register for signal `\microsd.\sd_mem_state' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24675' with positive edge clock.
Creating register for signal `\microsd.\data_ptr' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24676' with positive edge clock.
Creating register for signal `\microsd.\crc_state' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24677' with positive edge clock.
Creating register for signal `\microsd.\crc_buffer' using process `\microsd.$proc$microsd.v:137$9'.
  created $dff cell `$procdff$24678' with positive edge clock.
Creating register for signal `\microsd.\init_delay' using process `\microsd.$proc$microsd.v:125$6'.
  created $dff cell `$procdff$24679' with positive edge clock.
Creating register for signal `\microsd.\clkdiv' using process `\microsd.$proc$microsd.v:109$1'.
  created $dff cell `$procdff$24680' with positive edge clock.
Creating register for signal `\microsd.\one_hundredkhz' using process `\microsd.$proc$microsd.v:109$1'.
  created $dff cell `$procdff$24681' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `microsd.$proc$microsd.v:77$55'.
Found and cleaned up 25 empty switches in `\microsd.$proc$microsd.v:137$9'.
Removing empty process `microsd.$proc$microsd.v:137$9'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:125$6'.
Removing empty process `microsd.$proc$microsd.v:125$6'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:109$1'.
Removing empty process `microsd.$proc$microsd.v:109$1'.
Cleaned up 27 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~42 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 1504 unused cells and 2381 unused wires.
<suppressed ~1511 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~666 debug messages>
Removed a total of 222 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$24538: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$24343: $auto$opt_reduce.cc:132:opt_mux$24685
    New ctrl vector for $pmux cell $procmux$24362: $auto$opt_reduce.cc:132:opt_mux$24687
    New ctrl vector for $pmux cell $procmux$24480: $auto$opt_reduce.cc:132:opt_mux$24689
    New ctrl vector for $pmux cell $procmux$24631: { $procmux$24474_CMP $auto$opt_reduce.cc:132:opt_mux$24691 $procmux$24446_CMP }
    New ctrl vector for $pmux cell $procmux$24638: $auto$opt_reduce.cc:132:opt_mux$24693
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24684: { $procmux$24349_CMP $procmux$24344_CMP $procmux$24345_CMP $procmux$24348_CMP $procmux$24350_CMP $procmux$24351_CMP $procmux$24352_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24686: { $procmux$24349_CMP $procmux$24344_CMP $procmux$24345_CMP $procmux$24348_CMP $procmux$24350_CMP $procmux$24351_CMP $procmux$24352_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24688: { $procmux$24349_CMP $procmux$24344_CMP $procmux$24345_CMP $procmux$24348_CMP $procmux$24350_CMP $procmux$24351_CMP $procmux$24352_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24690: { $procmux$1021_CMP $procmux$24468_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24692: { $procmux$1021_CMP $procmux$1055_CMP $procmux$24445_CMP $procmux$24446_CMP $procmux$24468_CMP $procmux$24474_CMP $procmux$24492_CMP }
  Optimizing cells in module \microsd.
Performed a total of 10 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~294 debug messages>
Removed a total of 98 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \sd_cmd_resp_r2 = 136'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 to constant driver in module microsd.
Promoted 1 init specs to constant drivers.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 320 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~114 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell microsd.$add$microsd.v:118$3 ($add).
Removed top 25 bits (of 32) from port Y of cell microsd.$add$microsd.v:118$3 ($add).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:130$8 ($sub).
Removed top 3 bits (of 7) from port B of cell microsd.$sub$microsd.v:200$13 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:258$29 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:341$35 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:388$41 ($sub).
Removed top 4 bits (of 6) from port B of cell microsd.$eq$microsd.v:395$42 ($eq).
Removed top 7 bits (of 8) from port B of cell microsd.$sub$microsd.v:398$43 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:403$44 ($sub).
Removed top 1 bits (of 7) from port Y of cell microsd.$sub$microsd.v:403$44 ($sub).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$635_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$688_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$743_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$800_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$859_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$920_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1014_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1021_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1048_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1055_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1115_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1184_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1255_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1328_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1403_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1480_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1559_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1640_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1723_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1808_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1895_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1984_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2075_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2168_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2263_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2360_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2459_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2560_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2663_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2768_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$2875_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$2984_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell microsd.$procmux$3095_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$24339_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24341_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24344_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24345_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24348_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24349_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24350_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24351_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$24353_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24385_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24389_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$24393_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24407 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24409 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24413 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24417 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24421 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24423 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24448 ($mux).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$24446_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24452 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24454 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24461 ($mux).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24474_CMP0 ($eq).
Removed top 1 bits (of 25) from port B of cell microsd.$procmux$24479_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell microsd.$procmux$24490 ($mux).
Removed top 2 bits (of 40) from mux cell microsd.$procmux$24621 ($mux).
Removed top 25 bits (of 32) from wire microsd.$add$microsd.v:118$3_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24407_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24409_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24413_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24417_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24421_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24423_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24448_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24452_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24454_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24461_Y.
Removed top 3 bits (of 4) from wire microsd.$procmux$24490_Y.
Removed top 2 bits (of 40) from wire microsd.$procmux$24621_Y.
Removed top 1 bits (of 7) from wire microsd.$sub$microsd.v:403$44_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$8c0aa91d4db8741c9947d7a0de6c875d8dfddc39\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$ed69233d74549f287b72a59633b9a76ab6bcc119\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$efc71e781fe178e08e0b73b60d007d65bb528021\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~1068 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 36 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module microsd:
  creating $macc model for $add$microsd.v:118$3 ($add).
  creating $macc model for $sub$microsd.v:130$8 ($sub).
  creating $macc model for $sub$microsd.v:200$13 ($sub).
  creating $macc model for $sub$microsd.v:258$29 ($sub).
  creating $macc model for $sub$microsd.v:341$35 ($sub).
  creating $macc model for $sub$microsd.v:388$41 ($sub).
  creating $macc model for $sub$microsd.v:398$43 ($sub).
  creating $macc model for $sub$microsd.v:403$44 ($sub).
  creating $alu model for $macc $sub$microsd.v:403$44.
  creating $alu model for $macc $sub$microsd.v:398$43.
  creating $alu model for $macc $sub$microsd.v:388$41.
  creating $alu model for $macc $sub$microsd.v:341$35.
  creating $alu model for $macc $sub$microsd.v:258$29.
  creating $alu model for $macc $sub$microsd.v:200$13.
  creating $alu model for $macc $sub$microsd.v:130$8.
  creating $alu model for $macc $add$microsd.v:118$3.
  creating $alu cell for $add$microsd.v:118$3: $auto$alumacc.cc:474:replace_alu$24728
  creating $alu cell for $sub$microsd.v:130$8: $auto$alumacc.cc:474:replace_alu$24731
  creating $alu cell for $sub$microsd.v:200$13: $auto$alumacc.cc:474:replace_alu$24734
  creating $alu cell for $sub$microsd.v:258$29: $auto$alumacc.cc:474:replace_alu$24737
  creating $alu cell for $sub$microsd.v:341$35: $auto$alumacc.cc:474:replace_alu$24740
  creating $alu cell for $sub$microsd.v:388$41: $auto$alumacc.cc:474:replace_alu$24743
  creating $alu cell for $sub$microsd.v:398$43: $auto$alumacc.cc:474:replace_alu$24746
  creating $alu cell for $sub$microsd.v:403$44: $auto$alumacc.cc:474:replace_alu$24749
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~114 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking microsd.crc_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking microsd.sd_mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~2 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~113 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$24413:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$24697 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$24697 [2] $auto$wreduce.cc:455:run$24697 [0] }
      New connections: $auto$wreduce.cc:455:run$24697 [1] = $auto$wreduce.cc:455:run$24697 [0]
    Consolidated identical input bits for $mux cell $procmux$24417:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$24698 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$24698 [2:1]
      New connections: $auto$wreduce.cc:455:run$24698 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24421:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$24699 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$24699 [2:1]
      New connections: $auto$wreduce.cc:455:run$24699 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24461:
      Old ports: A=3'100, B=3'001, Y=$auto$wreduce.cc:455:run$24704 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$24704 [2] $auto$wreduce.cc:455:run$24704 [0] }
      New connections: $auto$wreduce.cc:455:run$24704 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24470:
      Old ports: A=4'0011, B=4'1000, Y=$procmux$24470_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$24470_Y [3] $procmux$24470_Y [0] }
      New connections: $procmux$24470_Y [2:1] = { 1'0 $procmux$24470_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$24478:
      Old ports: A=4'0010, B=4'1001, Y=$procmux$24478_Y
      New ports: A=2'10, B=2'01, Y=$procmux$24478_Y [1:0]
      New connections: $procmux$24478_Y [3:2] = { $procmux$24478_Y [0] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$24538:
      Old ports: A={ 1'0 \crc_buffer [6:1] }, B={ $xor$microsd.v:219$23_Y \crc_buffer [6:4] $xor$microsd.v:223$19_Y \crc_buffer [2:1] }, Y=$procmux$24538_Y
      New ports: A={ 1'0 \crc_buffer [3] }, B={ $xor$microsd.v:219$23_Y $xor$microsd.v:223$19_Y }, Y={ $procmux$24538_Y [6] $procmux$24538_Y [2] }
      New connections: { $procmux$24538_Y [5:3] $procmux$24538_Y [1:0] } = { \crc_buffer [6:4] \crc_buffer [2:1] }
    Consolidated identical input bits for $mux cell $procmux$24621:
      Old ports: A=38'11011100000000000000000000000000000000, B=38'00001000000000000000000000000000000000, Y=$auto$wreduce.cc:455:run$24706 [37:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$24706 [32]
      New connections: { $auto$wreduce.cc:455:run$24706 [37:33] $auto$wreduce.cc:455:run$24706 [31:0] } = { $auto$wreduce.cc:455:run$24706 [32] $auto$wreduce.cc:455:run$24706 [32] 1'0 $auto$wreduce.cc:455:run$24706 [32] 33'100000000000000000000000000000000 }
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$24423:
      Old ports: A=$auto$wreduce.cc:455:run$24699 [2:0], B=$auto$wreduce.cc:455:run$24698 [2:0], Y=$auto$wreduce.cc:455:run$24700 [2:0]
      New ports: A=$auto$wreduce.cc:455:run$24699 [2:1], B=$auto$wreduce.cc:455:run$24698 [2:1], Y=$auto$wreduce.cc:455:run$24700 [2:1]
      New connections: $auto$wreduce.cc:455:run$24700 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24480:
      Old ports: A=$procmux$24478_Y, B=4'0010, Y=$procmux$24480_Y
      New ports: A=$procmux$24478_Y [1:0], B=2'10, Y=$procmux$24480_Y [1:0]
      New connections: $procmux$24480_Y [3:2] = { $procmux$24480_Y [0] 1'0 }
  Optimizing cells in module \microsd.
Performed a total of 10 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~114 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:06bd827f6f487f52c037240a22f4735319b081ed$paramod$c17c2757a86408ad504dd786806ba33acfdaa50b\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:217d1fdd1fbbb1dd0a6b22ff249120c08f7b7b0c$paramod$d4e9353aa25f4197c2d56307ac757f55eeb00dfb\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $tribuf.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=4\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=40\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1338 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~1671 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~1872 debug messages>
Removed a total of 624 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 787 unused cells and 1705 unused wires.
<suppressed ~788 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24728.slice[0].carry: CO=\clkdiv [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24731.slice[0].carry: CO=\init_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24737.slice[0].carry: CO=\data_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24740.slice[0].carry: CO=\sd_cmd_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24743.slice[0].carry: CO=\resp_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24746.slice[0].carry: CO=\sd_cmd_resp_ptr_r2 [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24749.slice[0].carry: CO=\sd_cmd_resp_ptr [0]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24728.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24731.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24737.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24740.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24743.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24746.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24749.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~130 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[1].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~13 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~13 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[3].carry: CO=\data_ptr [3]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~12 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.31.36. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module microsd:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27562 to $_DFFE_PP_ for $0\resp_delay[5:0] [0] -> \resp_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27563 to $_DFFE_PP_ for $0\resp_delay[5:0] [1] -> \resp_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27564 to $_DFFE_PP_ for $0\resp_delay[5:0] [2] -> \resp_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27565 to $_DFFE_PP_ for $0\resp_delay[5:0] [3] -> \resp_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27566 to $_DFFE_PP_ for $0\resp_delay[5:0] [4] -> \resp_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27567 to $_DFFE_PP_ for $0\resp_delay[5:0] [5] -> \resp_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27589 to $_DFFE_PP_ for $0\sd_clk[0:0] -> \sd_clk.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27590 to $_DFFE_PP_ for $0\cmd[0:0] -> \cmd.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27591 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [0] -> \sd_cmd_resp_ptr_r2 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27592 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [1] -> \sd_cmd_resp_ptr_r2 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27593 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [2] -> \sd_cmd_resp_ptr_r2 [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27594 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [3] -> \sd_cmd_resp_ptr_r2 [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27595 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [4] -> \sd_cmd_resp_ptr_r2 [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27596 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [5] -> \sd_cmd_resp_ptr_r2 [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27597 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [6] -> \sd_cmd_resp_ptr_r2 [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27598 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [7] -> \sd_cmd_resp_ptr_r2 [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27623 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [24] -> \sd_cmd_resp [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27624 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [25] -> \sd_cmd_resp [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27625 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [26] -> \sd_cmd_resp [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27626 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [27] -> \sd_cmd_resp [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27627 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [28] -> \sd_cmd_resp [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27628 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [29] -> \sd_cmd_resp [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27629 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [30] -> \sd_cmd_resp [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27630 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [31] -> \sd_cmd_resp [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27631 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [32] -> \sd_cmd_resp [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27632 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [33] -> \sd_cmd_resp [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27633 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [34] -> \sd_cmd_resp [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27634 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [35] -> \sd_cmd_resp [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27635 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [36] -> \sd_cmd_resp [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27636 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [37] -> \sd_cmd_resp [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27637 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [38] -> \sd_cmd_resp [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27647 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [0] -> \sd_cmd_resp_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27648 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [1] -> \sd_cmd_resp_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27649 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [2] -> \sd_cmd_resp_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27650 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [3] -> \sd_cmd_resp_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27651 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [4] -> \sd_cmd_resp_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27652 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [5] -> \sd_cmd_resp_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27653 to $_DFFE_PP_ for $0\cmd_read[0:0] -> \cmd_read.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27654 to $_DFFE_PP_ for $0\sd_cmd[47:0] [0] -> \sd_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27655 to $_DFFE_PP_ for $0\sd_cmd[47:0] [1] -> \sd_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27656 to $_DFFE_PP_ for $0\sd_cmd[47:0] [2] -> \sd_cmd [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27657 to $_DFFE_PP_ for $0\sd_cmd[47:0] [3] -> \sd_cmd [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27658 to $_DFFE_PP_ for $0\sd_cmd[47:0] [4] -> \sd_cmd [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27659 to $_DFFE_PP_ for $0\sd_cmd[47:0] [5] -> \sd_cmd [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27660 to $_DFFE_PP_ for $0\sd_cmd[47:0] [6] -> \sd_cmd [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27661 to $_DFFE_PP_ for $0\sd_cmd[47:0] [7] -> \sd_cmd [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27662 to $_DFFE_PP_ for $0\sd_cmd[47:0] [8] -> \sd_cmd [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27663 to $_DFFE_PP_ for $0\sd_cmd[47:0] [9] -> \sd_cmd [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27664 to $_DFFE_PP_ for $0\sd_cmd[47:0] [10] -> \sd_cmd [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27665 to $_DFFE_PP_ for $0\sd_cmd[47:0] [11] -> \sd_cmd [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27666 to $_DFFE_PP_ for $0\sd_cmd[47:0] [12] -> \sd_cmd [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27667 to $_DFFE_PP_ for $0\sd_cmd[47:0] [13] -> \sd_cmd [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27668 to $_DFFE_PP_ for $0\sd_cmd[47:0] [14] -> \sd_cmd [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27669 to $_DFFE_PP_ for $0\sd_cmd[47:0] [15] -> \sd_cmd [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27670 to $_DFFE_PP_ for $0\sd_cmd[47:0] [16] -> \sd_cmd [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27671 to $_DFFE_PP_ for $0\sd_cmd[47:0] [17] -> \sd_cmd [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27672 to $_DFFE_PP_ for $0\sd_cmd[47:0] [18] -> \sd_cmd [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27673 to $_DFFE_PP_ for $0\sd_cmd[47:0] [19] -> \sd_cmd [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27674 to $_DFFE_PP_ for $0\sd_cmd[47:0] [20] -> \sd_cmd [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27675 to $_DFFE_PP_ for $0\sd_cmd[47:0] [21] -> \sd_cmd [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27676 to $_DFFE_PP_ for $0\sd_cmd[47:0] [22] -> \sd_cmd [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27677 to $_DFFE_PP_ for $0\sd_cmd[47:0] [23] -> \sd_cmd [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27678 to $_DFFE_PP_ for $0\sd_cmd[47:0] [24] -> \sd_cmd [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27679 to $_DFFE_PP_ for $0\sd_cmd[47:0] [25] -> \sd_cmd [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27680 to $_DFFE_PP_ for $0\sd_cmd[47:0] [26] -> \sd_cmd [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27681 to $_DFFE_PP_ for $0\sd_cmd[47:0] [27] -> \sd_cmd [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27682 to $_DFFE_PP_ for $0\sd_cmd[47:0] [28] -> \sd_cmd [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27683 to $_DFFE_PP_ for $0\sd_cmd[47:0] [29] -> \sd_cmd [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27684 to $_DFFE_PP_ for $0\sd_cmd[47:0] [30] -> \sd_cmd [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27685 to $_DFFE_PP_ for $0\sd_cmd[47:0] [31] -> \sd_cmd [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27686 to $_DFFE_PP_ for $0\sd_cmd[47:0] [32] -> \sd_cmd [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27687 to $_DFFE_PP_ for $0\sd_cmd[47:0] [33] -> \sd_cmd [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27688 to $_DFFE_PP_ for $0\sd_cmd[47:0] [34] -> \sd_cmd [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27689 to $_DFFE_PP_ for $0\sd_cmd[47:0] [35] -> \sd_cmd [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27690 to $_DFFE_PP_ for $0\sd_cmd[47:0] [36] -> \sd_cmd [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27691 to $_DFFE_PP_ for $0\sd_cmd[47:0] [37] -> \sd_cmd [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27692 to $_DFFE_PP_ for $0\sd_cmd[47:0] [38] -> \sd_cmd [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27693 to $_DFFE_PP_ for $0\sd_cmd[47:0] [39] -> \sd_cmd [39].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27694 to $_DFFE_PP_ for $0\sd_cmd[47:0] [40] -> \sd_cmd [40].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27695 to $_DFFE_PP_ for $0\sd_cmd[47:0] [41] -> \sd_cmd [41].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27696 to $_DFFE_PP_ for $0\sd_cmd[47:0] [42] -> \sd_cmd [42].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27697 to $_DFFE_PP_ for $0\sd_cmd[47:0] [43] -> \sd_cmd [43].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27698 to $_DFFE_PP_ for $0\sd_cmd[47:0] [44] -> \sd_cmd [44].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27699 to $_DFFE_PP_ for $0\sd_cmd[47:0] [45] -> \sd_cmd [45].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27700 to $_DFFE_PP_ for $0\sd_cmd[47:0] [46] -> \sd_cmd [46].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27701 to $_DFFE_PP_ for $0\sd_cmd[47:0] [47] -> \sd_cmd [47].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27702 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [0] -> \sd_cmd_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27703 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [1] -> \sd_cmd_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27704 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [2] -> \sd_cmd_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27705 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [3] -> \sd_cmd_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27706 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [4] -> \sd_cmd_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27707 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [5] -> \sd_cmd_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27708 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [0] -> \sd_mem_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27709 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [1] -> \sd_mem_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27710 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [2] -> \sd_mem_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27711 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [3] -> \sd_mem_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27712 to $_DFFE_PP_ for $0\data_ptr[6:0] [0] -> \data_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27713 to $_DFFE_PP_ for $0\data_ptr[6:0] [1] -> \data_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27714 to $_DFFE_PP_ for $0\data_ptr[6:0] [2] -> \data_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27715 to $_DFFE_PP_ for $0\data_ptr[6:0] [3] -> \data_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27716 to $_DFFE_PP_ for $0\data_ptr[6:0] [4] -> \data_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27717 to $_DFFE_PP_ for $0\data_ptr[6:0] [5] -> \data_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27718 to $_DFFE_PP_ for $0\data_ptr[6:0] [6] -> \data_ptr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27719 to $_DFFE_PP_ for $0\crc_state[3:0] [0] -> \crc_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27720 to $_DFFE_PP_ for $0\crc_state[3:0] [1] -> \crc_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27721 to $_DFFE_PP_ for $0\crc_state[3:0] [2] -> \crc_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27722 to $_DFFE_PP_ for $0\crc_state[3:0] [3] -> \crc_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27723 to $_DFFE_PP_ for $0\crc_buffer[7:0] [0] -> \crc_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27724 to $_DFFE_PP_ for $0\crc_buffer[7:0] [1] -> \crc_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27725 to $_DFFE_PP_ for $0\crc_buffer[7:0] [2] -> \crc_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27726 to $_DFFE_PP_ for $0\crc_buffer[7:0] [3] -> \crc_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27727 to $_DFFE_PP_ for $0\crc_buffer[7:0] [4] -> \crc_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27728 to $_DFFE_PP_ for $0\crc_buffer[7:0] [5] -> \crc_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27729 to $_DFFE_PP_ for $0\crc_buffer[7:0] [6] -> \crc_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27730 to $_DFFE_PP_ for $0\crc_buffer[7:0] [7] -> \crc_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27731 to $_DFFE_PP_ for $0\init_delay[13:0] [0] -> \init_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27732 to $_DFFE_PP_ for $0\init_delay[13:0] [1] -> \init_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27733 to $_DFFE_PP_ for $0\init_delay[13:0] [2] -> \init_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27734 to $_DFFE_PP_ for $0\init_delay[13:0] [3] -> \init_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27735 to $_DFFE_PP_ for $0\init_delay[13:0] [4] -> \init_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27736 to $_DFFE_PP_ for $0\init_delay[13:0] [5] -> \init_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27737 to $_DFFE_PP_ for $0\init_delay[13:0] [6] -> \init_delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27738 to $_DFFE_PP_ for $0\init_delay[13:0] [7] -> \init_delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27739 to $_DFFE_PP_ for $0\init_delay[13:0] [8] -> \init_delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27740 to $_DFFE_PP_ for $0\init_delay[13:0] [9] -> \init_delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27741 to $_DFFE_PP_ for $0\init_delay[13:0] [10] -> \init_delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27742 to $_DFFE_PP_ for $0\init_delay[13:0] [11] -> \init_delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27743 to $_DFFE_PP_ for $0\init_delay[13:0] [12] -> \init_delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27744 to $_DFFE_PP_ for $0\init_delay[13:0] [13] -> \init_delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27746 to $_DFFE_PP_ for $0\clkdiv[6:0] [1] -> \clkdiv [1].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~137 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~396 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in microsd.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27739 (SB_DFFE): \init_delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27563 (SB_DFFE): \resp_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27564 (SB_DFFE): \resp_delay [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27565 (SB_DFFE): \resp_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27566 (SB_DFFE): \resp_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27567 (SB_DFFE): \resp_delay [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27592 (SB_DFFE): \sd_cmd_resp_ptr_r2 [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27590 (SB_DFFE): \cmd = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27562 (SB_DFFE): \resp_delay [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27598 (SB_DFFE): \sd_cmd_resp_ptr_r2 [7] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27593 (SB_DFFE): \sd_cmd_resp_ptr_r2 [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27594 (SB_DFFE): \sd_cmd_resp_ptr_r2 [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27595 (SB_DFFE): \sd_cmd_resp_ptr_r2 [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27596 (SB_DFFE): \sd_cmd_resp_ptr_r2 [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27597 (SB_DFFE): \sd_cmd_resp_ptr_r2 [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27623 (SB_DFFE): \sd_cmd_resp [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27589 (SB_DFFE): \sd_clk = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27624 (SB_DFFE): \sd_cmd_resp [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27625 (SB_DFFE): \sd_cmd_resp [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27626 (SB_DFFE): \sd_cmd_resp [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27627 (SB_DFFE): \sd_cmd_resp [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27628 (SB_DFFE): \sd_cmd_resp [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27629 (SB_DFFE): \sd_cmd_resp [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27630 (SB_DFFE): \sd_cmd_resp [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27631 (SB_DFFE): \sd_cmd_resp [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27632 (SB_DFFE): \sd_cmd_resp [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27633 (SB_DFFE): \sd_cmd_resp [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27634 (SB_DFFE): \sd_cmd_resp [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27635 (SB_DFFE): \sd_cmd_resp [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27636 (SB_DFFE): \sd_cmd_resp [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27637 (SB_DFFE): \sd_cmd_resp [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27647 (SB_DFFE): \sd_cmd_resp_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27648 (SB_DFFE): \sd_cmd_resp_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27649 (SB_DFFE): \sd_cmd_resp_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27650 (SB_DFFE): \sd_cmd_resp_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27651 (SB_DFFE): \sd_cmd_resp_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27652 (SB_DFFE): \sd_cmd_resp_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27656 (SB_DFFE): \sd_cmd [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27655 (SB_DFFE): \sd_cmd [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27653 (SB_DFFE): \cmd_read = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27591 (SB_DFFE): \sd_cmd_resp_ptr_r2 [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27657 (SB_DFFE): \sd_cmd [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27658 (SB_DFFE): \sd_cmd [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27659 (SB_DFFE): \sd_cmd [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27660 (SB_DFFE): \sd_cmd [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27661 (SB_DFFE): \sd_cmd [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27662 (SB_DFFE): \sd_cmd [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27663 (SB_DFFE): \sd_cmd [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27664 (SB_DFFE): \sd_cmd [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27665 (SB_DFFE): \sd_cmd [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27666 (SB_DFFE): \sd_cmd [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27667 (SB_DFFE): \sd_cmd [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27668 (SB_DFFE): \sd_cmd [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27669 (SB_DFFE): \sd_cmd [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27670 (SB_DFFE): \sd_cmd [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27671 (SB_DFFE): \sd_cmd [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27672 (SB_DFFE): \sd_cmd [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27673 (SB_DFFE): \sd_cmd [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27674 (SB_DFFE): \sd_cmd [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27675 (SB_DFFE): \sd_cmd [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27676 (SB_DFFE): \sd_cmd [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27677 (SB_DFFE): \sd_cmd [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27678 (SB_DFFE): \sd_cmd [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27679 (SB_DFFE): \sd_cmd [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27680 (SB_DFFE): \sd_cmd [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27681 (SB_DFFE): \sd_cmd [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27682 (SB_DFFE): \sd_cmd [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27683 (SB_DFFE): \sd_cmd [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27684 (SB_DFFE): \sd_cmd [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27685 (SB_DFFE): \sd_cmd [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27686 (SB_DFFE): \sd_cmd [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27687 (SB_DFFE): \sd_cmd [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27688 (SB_DFFE): \sd_cmd [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27689 (SB_DFFE): \sd_cmd [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27690 (SB_DFFE): \sd_cmd [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27691 (SB_DFFE): \sd_cmd [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27692 (SB_DFFE): \sd_cmd [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27693 (SB_DFFE): \sd_cmd [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27694 (SB_DFFE): \sd_cmd [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27695 (SB_DFFE): \sd_cmd [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27696 (SB_DFFE): \sd_cmd [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27697 (SB_DFFE): \sd_cmd [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27698 (SB_DFFE): \sd_cmd [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27699 (SB_DFFE): \sd_cmd [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27700 (SB_DFFE): \sd_cmd [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27701 (SB_DFFE): \sd_cmd [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27702 (SB_DFFE): \sd_cmd_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27703 (SB_DFFE): \sd_cmd_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27704 (SB_DFFE): \sd_cmd_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27705 (SB_DFFE): \sd_cmd_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27706 (SB_DFFE): \sd_cmd_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27707 (SB_DFFE): \sd_cmd_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27709 (SB_DFFE): \sd_mem_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27710 (SB_DFFE): \sd_mem_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27711 (SB_DFFE): \sd_mem_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27654 (SB_DFFE): \sd_cmd [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27712 (SB_DFFE): \data_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27713 (SB_DFFE): \data_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27714 (SB_DFFE): \data_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27715 (SB_DFFE): \data_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27716 (SB_DFFE): \data_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27717 (SB_DFFE): \data_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27718 (SB_DFFE): \data_ptr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27721 (SB_DFFE): \crc_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27720 (SB_DFFE): \crc_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27708 (SB_DFFE): \sd_mem_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27722 (SB_DFFE): \crc_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27723 (SB_DFFE): \crc_buffer [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27724 (SB_DFFE): \crc_buffer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27725 (SB_DFFE): \crc_buffer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27726 (SB_DFFE): \crc_buffer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27727 (SB_DFFE): \crc_buffer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27728 (SB_DFFE): \crc_buffer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27729 (SB_DFFE): \crc_buffer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27730 (SB_DFFE): \crc_buffer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27732 (SB_DFFE): \init_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27719 (SB_DFFE): \crc_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27733 (SB_DFFE): \init_delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27734 (SB_DFFE): \init_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27735 (SB_DFFE): \init_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27736 (SB_DFFE): \init_delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27737 (SB_DFFE): \init_delay [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27738 (SB_DFFE): \init_delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27740 (SB_DFFE): \init_delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27731 (SB_DFFE): \init_delay [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27741 (SB_DFFE): \init_delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27742 (SB_DFFE): \init_delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27743 (SB_DFFE): \init_delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27744 (SB_DFFE): \init_delay [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in microsd.
  Merging $auto$simplemap.cc:277:simplemap_mux$27539 (A=$procmux$24651_Y [1], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$25036) into $auto$simplemap.cc:420:simplemap_dff$27563 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27541 (A=$procmux$24651_Y [3], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$25036) into $auto$simplemap.cc:420:simplemap_dff$27565 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27583 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$30106 [1], S=$auto$simplemap.cc:256:simplemap_eqne$24820) into $auto$simplemap.cc:420:simplemap_dff$27746 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27584 (A=1'0, B=$add$microsd.v:118$3_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$24820) into $auto$simplemap.cc:420:simplemap_dff$27747 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27585 (A=1'0, B=$add$microsd.v:118$3_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$24820) into $auto$simplemap.cc:420:simplemap_dff$27748 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27586 (A=1'0, B=$add$microsd.v:118$3_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$24820) into $auto$simplemap.cc:420:simplemap_dff$27749 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27587 (A=1'0, B=$add$microsd.v:118$3_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$24820) into $auto$simplemap.cc:420:simplemap_dff$27750 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27588 (A=1'0, B=$add$microsd.v:118$3_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$24820) into $auto$simplemap.cc:420:simplemap_dff$27751 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27582 (A=1'0, B=$add$microsd.v:118$3_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$24820) into $auto$simplemap.cc:420:simplemap_dff$27745 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~112 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~594 debug messages>
Removed a total of 198 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 9 unused cells and 1194 unused wires.
<suppressed ~10 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\microsd' to `<abc-temp-dir>/input.blif'..
Extracted 1017 gates and 1189 wires to a netlist network with 170 inputs and 148 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     244.
ABC: Participating nodes from both networks       =     557.
ABC: Participating nodes from the first network   =     244. (  55.71 % of nodes)
ABC: Participating nodes from the second network  =     313. (  71.46 % of nodes)
ABC: Node pairs (any polarity)                    =     244. (  55.71 % of names can be moved)
ABC: Node pairs (same polarity)                   =     200. (  45.66 % of names can be moved)
ABC: Total runtime =     0.11 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      874
ABC RESULTS:        internal signals:      871
ABC RESULTS:           input signals:      170
ABC RESULTS:          output signals:      148
Removing temp directory.
Removed 0 unused cells and 681 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110001011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001110101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101111111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001101101101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
No more expansions possible.
<suppressed ~1437 debug messages>
Removed 0 unused cells and 872 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \microsd

2.43.2. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.44. Printing statistics.

=== microsd ===

   Number of wires:                443
   Number of wire bits:            947
   Number of public wires:          26
   Number of public wire bits:     328
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                666
     $_TBUF_                         1
     SB_CARRY                       42
     SB_DFF                          1
     SB_DFFE                       127
     SB_DFFESR                       3
     SB_DFFSR                        6
     SB_LUT4                       486

2.45. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 33f3ab8b68
CPU: user 4.79s system 0.23s, MEM: 48.30 MB total, 42.73 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 23x opt_expr (1 sec), 16% 22x opt_clean (0 sec), ...
