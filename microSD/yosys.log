
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `microsd.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: microsd.v
Parsing Verilog input from `microsd.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:600)
Generating RTLIL representation for module `\microsd'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json microsd.json -blif microsd.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: microsd             
Automatically selected microsd as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \microsd

2.2.3. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 17 switch rules as full_case in process $proc$microsd.v:135$9 in module microsd.
Marked 1 switch rules as full_case in process $proc$microsd.v:107$1 in module microsd.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\microsd.$proc$microsd.v:75$57'.
  Set init value: \init_delay = 14'00000001010000
  Set init value: \resp_delay = 6'110101
  Set init value: \sd_clk = 1'0
  Set init value: \cmd = 1'1
  Set init value: \sd_cmd_resp_r2 = 136'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_resp_ptr_r2 = 8'10000111
  Set init value: \sd_cmd_resp = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_resp_ptr = 6'101111
  Set init value: \cmd_read = 1'0
  Set init value: \sd_cmd = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_ptr = 6'101111
  Set init value: \sd_mem_state = 4'0000
  Set init value: \data_ptr = 7'0101111
  Set init value: \crc_state = 4'0000
  Set init value: \crc_buffer = 8'00000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\microsd.$proc$microsd.v:75$57'.
     1/19: $0\crc_counter[7:0]
     2/19: $1\crc_buffer[7:0]
     3/19: $1\crc_state[3:0]
     4/19: $1\data_ptr[6:0]
     5/19: $1\init_delay[13:0]
     6/19: $0\dat_read[0:0]
     7/19: $1\cmd_read[0:0]
     8/19: $1\sd_cmd_resp_ptr_r2[7:0]
     9/19: $1\sd_cmd_resp_r2[135:0]
    10/19: $1\sd_cmd_resp_ptr[5:0]
    11/19: $1\sd_cmd_resp[47:0]
    12/19: $1\resp_delay[5:0]
    13/19: $1\sd_mem_state[3:0]
    14/19: $1\sd_cmd_ptr[5:0]
    15/19: $1\sd_cmd[47:0]
    16/19: $0\dat[3:0]
    17/19: $1\cmd[0:0]
    18/19: $1\sd_clk[0:0]
    19/19: $0\led[0:0]
Creating decoders for process `\microsd.$proc$microsd.v:135$9'.
     1/199: $0\sd_cmd_resp[47:0] [47]
     2/199: $0\sd_cmd_resp[47:0] [46]
     3/199: $0\sd_cmd_resp[47:0] [45]
     4/199: $0\sd_cmd_resp[47:0] [44]
     5/199: $0\sd_cmd_resp[47:0] [43]
     6/199: $0\sd_cmd_resp[47:0] [42]
     7/199: $0\sd_cmd_resp[47:0] [41]
     8/199: $0\sd_cmd_resp[47:0] [40]
     9/199: $0\sd_cmd_resp[47:0] [39]
    10/199: $0\sd_cmd_resp[47:0] [38]
    11/199: $0\sd_cmd_resp[47:0] [37]
    12/199: $0\sd_cmd_resp[47:0] [36]
    13/199: $0\sd_cmd_resp[47:0] [35]
    14/199: $0\sd_cmd_resp[47:0] [34]
    15/199: $0\sd_cmd_resp[47:0] [33]
    16/199: $0\sd_cmd_resp[47:0] [32]
    17/199: $0\sd_cmd_resp[47:0] [31]
    18/199: $0\sd_cmd_resp[47:0] [30]
    19/199: $0\sd_cmd_resp[47:0] [29]
    20/199: $0\sd_cmd_resp[47:0] [28]
    21/199: $0\sd_cmd_resp[47:0] [27]
    22/199: $0\sd_cmd_resp[47:0] [26]
    23/199: $0\sd_cmd_resp[47:0] [25]
    24/199: $0\sd_cmd_resp[47:0] [24]
    25/199: $0\sd_cmd_resp[47:0] [23]
    26/199: $0\sd_cmd_resp[47:0] [22]
    27/199: $0\sd_cmd_resp[47:0] [21]
    28/199: $0\sd_cmd_resp[47:0] [20]
    29/199: $0\sd_cmd_resp[47:0] [19]
    30/199: $0\sd_cmd_resp[47:0] [18]
    31/199: $0\sd_cmd_resp[47:0] [17]
    32/199: $0\sd_cmd_resp[47:0] [16]
    33/199: $0\sd_cmd_resp[47:0] [15]
    34/199: $0\sd_cmd_resp[47:0] [14]
    35/199: $0\sd_cmd_resp[47:0] [13]
    36/199: $0\sd_cmd_resp[47:0] [12]
    37/199: $0\sd_cmd_resp[47:0] [11]
    38/199: $0\sd_cmd_resp[47:0] [10]
    39/199: $0\sd_cmd_resp[47:0] [9]
    40/199: $0\sd_cmd_resp[47:0] [8]
    41/199: $0\sd_cmd_resp[47:0] [7]
    42/199: $0\sd_cmd_resp[47:0] [6]
    43/199: $0\sd_cmd_resp[47:0] [5]
    44/199: $0\sd_cmd_resp[47:0] [4]
    45/199: $0\sd_cmd_resp[47:0] [3]
    46/199: $0\sd_cmd_resp[47:0] [2]
    47/199: $0\sd_cmd_resp[47:0] [1]
    48/199: $0\sd_cmd_resp[47:0] [0]
    49/199: $0\sd_cmd_resp_r2[135:0] [134]
    50/199: $0\sd_cmd_resp_r2[135:0] [133]
    51/199: $0\sd_cmd_resp_r2[135:0] [132]
    52/199: $0\sd_cmd_resp_r2[135:0] [131]
    53/199: $0\sd_cmd_resp_r2[135:0] [130]
    54/199: $0\sd_cmd_resp_r2[135:0] [129]
    55/199: $0\sd_cmd_resp_r2[135:0] [128]
    56/199: $0\sd_cmd_resp_r2[135:0] [127]
    57/199: $0\sd_cmd_resp_r2[135:0] [126]
    58/199: $0\sd_cmd_resp_r2[135:0] [125]
    59/199: $0\sd_cmd_resp_r2[135:0] [124]
    60/199: $0\sd_cmd_resp_r2[135:0] [123]
    61/199: $0\sd_cmd_resp_r2[135:0] [122]
    62/199: $0\sd_cmd_resp_r2[135:0] [121]
    63/199: $0\sd_cmd_resp_r2[135:0] [120]
    64/199: $0\sd_cmd_resp_r2[135:0] [119]
    65/199: $0\sd_cmd_resp_r2[135:0] [118]
    66/199: $0\sd_cmd_resp_r2[135:0] [117]
    67/199: $0\sd_cmd_resp_r2[135:0] [116]
    68/199: $0\sd_cmd_resp_r2[135:0] [115]
    69/199: $0\sd_cmd_resp_r2[135:0] [114]
    70/199: $0\sd_cmd_resp_r2[135:0] [113]
    71/199: $0\sd_cmd_resp_r2[135:0] [112]
    72/199: $0\sd_cmd_resp_r2[135:0] [111]
    73/199: $0\sd_cmd_resp_r2[135:0] [110]
    74/199: $0\sd_cmd_resp_r2[135:0] [109]
    75/199: $0\sd_cmd_resp_r2[135:0] [108]
    76/199: $0\sd_cmd_resp_r2[135:0] [107]
    77/199: $0\sd_cmd_resp_r2[135:0] [106]
    78/199: $0\sd_cmd_resp_r2[135:0] [105]
    79/199: $0\sd_cmd_resp_r2[135:0] [104]
    80/199: $0\sd_cmd_resp_r2[135:0] [103]
    81/199: $0\sd_cmd_resp_r2[135:0] [102]
    82/199: $0\sd_cmd_resp_r2[135:0] [101]
    83/199: $0\sd_cmd_resp_r2[135:0] [100]
    84/199: $0\sd_cmd_resp_r2[135:0] [99]
    85/199: $0\sd_cmd_resp_r2[135:0] [98]
    86/199: $0\sd_cmd_resp_r2[135:0] [97]
    87/199: $0\sd_cmd_resp_r2[135:0] [96]
    88/199: $0\sd_cmd_resp_r2[135:0] [95]
    89/199: $0\sd_cmd_resp_r2[135:0] [94]
    90/199: $0\sd_cmd_resp_r2[135:0] [93]
    91/199: $0\sd_cmd_resp_r2[135:0] [92]
    92/199: $0\sd_cmd_resp_r2[135:0] [91]
    93/199: $0\sd_cmd_resp_r2[135:0] [90]
    94/199: $0\sd_cmd_resp_r2[135:0] [89]
    95/199: $0\sd_cmd_resp_r2[135:0] [88]
    96/199: $0\sd_cmd_resp_r2[135:0] [87]
    97/199: $0\sd_cmd_resp_r2[135:0] [86]
    98/199: $0\sd_cmd_resp_r2[135:0] [85]
    99/199: $0\sd_cmd_resp_r2[135:0] [84]
   100/199: $0\sd_cmd_resp_r2[135:0] [83]
   101/199: $0\sd_cmd_resp_r2[135:0] [82]
   102/199: $0\sd_cmd_resp_r2[135:0] [81]
   103/199: $0\sd_cmd_resp_r2[135:0] [80]
   104/199: $0\sd_cmd_resp_r2[135:0] [79]
   105/199: $0\sd_cmd_resp_r2[135:0] [78]
   106/199: $0\sd_cmd_resp_r2[135:0] [77]
   107/199: $0\sd_cmd_resp_r2[135:0] [76]
   108/199: $0\sd_cmd_resp_r2[135:0] [75]
   109/199: $0\sd_cmd_resp_r2[135:0] [74]
   110/199: $0\sd_cmd_resp_r2[135:0] [73]
   111/199: $0\sd_cmd_resp_r2[135:0] [72]
   112/199: $0\sd_cmd_resp_r2[135:0] [71]
   113/199: $0\sd_cmd_resp_r2[135:0] [70]
   114/199: $0\sd_cmd_resp_r2[135:0] [69]
   115/199: $0\sd_cmd_resp_r2[135:0] [68]
   116/199: $0\sd_cmd_resp_r2[135:0] [67]
   117/199: $0\sd_cmd_resp_r2[135:0] [66]
   118/199: $0\sd_cmd_resp_r2[135:0] [65]
   119/199: $0\sd_cmd_resp_r2[135:0] [64]
   120/199: $0\sd_cmd_resp_r2[135:0] [63]
   121/199: $0\sd_cmd_resp_r2[135:0] [62]
   122/199: $0\sd_cmd_resp_r2[135:0] [61]
   123/199: $0\sd_cmd_resp_r2[135:0] [60]
   124/199: $0\sd_cmd_resp_r2[135:0] [59]
   125/199: $0\sd_cmd_resp_r2[135:0] [58]
   126/199: $0\sd_cmd_resp_r2[135:0] [57]
   127/199: $0\sd_cmd_resp_r2[135:0] [56]
   128/199: $0\sd_cmd_resp_r2[135:0] [55]
   129/199: $0\sd_cmd_resp_r2[135:0] [54]
   130/199: $0\sd_cmd_resp_r2[135:0] [53]
   131/199: $0\sd_cmd_resp_r2[135:0] [52]
   132/199: $0\sd_cmd_resp_r2[135:0] [51]
   133/199: $0\sd_cmd_resp_r2[135:0] [50]
   134/199: $0\sd_cmd_resp_r2[135:0] [49]
   135/199: $0\sd_cmd_resp_r2[135:0] [48]
   136/199: $0\sd_cmd_resp_r2[135:0] [47]
   137/199: $0\sd_cmd_resp_r2[135:0] [46]
   138/199: $0\sd_cmd_resp_r2[135:0] [45]
   139/199: $0\sd_cmd_resp_r2[135:0] [44]
   140/199: $0\sd_cmd_resp_r2[135:0] [43]
   141/199: $0\sd_cmd_resp_r2[135:0] [42]
   142/199: $0\sd_cmd_resp_r2[135:0] [41]
   143/199: $0\sd_cmd_resp_r2[135:0] [40]
   144/199: $0\sd_cmd_resp_r2[135:0] [39]
   145/199: $0\sd_cmd_resp_r2[135:0] [38]
   146/199: $0\sd_cmd_resp_r2[135:0] [37]
   147/199: $0\sd_cmd_resp_r2[135:0] [36]
   148/199: $0\sd_cmd_resp_r2[135:0] [35]
   149/199: $0\sd_cmd_resp_r2[135:0] [34]
   150/199: $0\sd_cmd_resp_r2[135:0] [33]
   151/199: $0\sd_cmd_resp_r2[135:0] [32]
   152/199: $0\sd_cmd_resp_r2[135:0] [31]
   153/199: $0\sd_cmd_resp_r2[135:0] [30]
   154/199: $0\sd_cmd_resp_r2[135:0] [29]
   155/199: $0\sd_cmd_resp_r2[135:0] [28]
   156/199: $0\sd_cmd_resp_r2[135:0] [27]
   157/199: $0\sd_cmd_resp_r2[135:0] [26]
   158/199: $0\sd_cmd_resp_r2[135:0] [25]
   159/199: $0\sd_cmd_resp_r2[135:0] [24]
   160/199: $0\sd_cmd_resp_r2[135:0] [23]
   161/199: $0\sd_cmd_resp_r2[135:0] [22]
   162/199: $0\sd_cmd_resp_r2[135:0] [21]
   163/199: $0\sd_cmd_resp_r2[135:0] [20]
   164/199: $0\sd_cmd_resp_r2[135:0] [19]
   165/199: $0\sd_cmd_resp_r2[135:0] [18]
   166/199: $0\sd_cmd_resp_r2[135:0] [17]
   167/199: $0\sd_cmd_resp_r2[135:0] [16]
   168/199: $0\sd_cmd_resp_r2[135:0] [15]
   169/199: $0\sd_cmd_resp_r2[135:0] [14]
   170/199: $0\sd_cmd_resp_r2[135:0] [13]
   171/199: $0\sd_cmd_resp_r2[135:0] [12]
   172/199: $0\sd_cmd_resp_r2[135:0] [11]
   173/199: $0\sd_cmd_resp_r2[135:0] [10]
   174/199: $0\sd_cmd_resp_r2[135:0] [9]
   175/199: $0\sd_cmd_resp_r2[135:0] [8]
   176/199: $0\sd_cmd_resp_r2[135:0] [7]
   177/199: $0\sd_cmd_resp_r2[135:0] [6]
   178/199: $0\sd_cmd_resp_r2[135:0] [5]
   179/199: $0\sd_cmd_resp_r2[135:0] [4]
   180/199: $0\sd_cmd_resp_r2[135:0] [3]
   181/199: $0\sd_cmd_resp_r2[135:0] [2]
   182/199: $0\sd_cmd_resp_r2[135:0] [1]
   183/199: $0\sd_cmd_resp_r2[135:0] [0]
   184/199: $0\sd_cmd[47:0] [7:1]
   185/199: $0\sd_cmd[47:0] [0]
   186/199: $0\crc_buffer[7:0] [0]
   187/199: $0\crc_state[3:0]
   188/199: $0\data_ptr[6:0]
   189/199: $0\sd_mem_state[3:0]
   190/199: $0\sd_cmd_ptr[5:0]
   191/199: $0\crc_buffer[7:0] [7:1]
   192/199: $0\cmd_read[0:0]
   193/199: $0\sd_cmd_resp_ptr[5:0]
   194/199: $0\sd_cmd_resp_r2[135:0] [135]
   195/199: $0\sd_cmd_resp_ptr_r2[7:0]
   196/199: $0\sd_cmd[47:0] [47:8]
   197/199: $0\cmd[0:0]
   198/199: $0\sd_clk[0:0]
   199/199: $0\resp_delay[5:0]
Creating decoders for process `\microsd.$proc$microsd.v:123$6'.
     1/1: $0\init_delay[13:0]
Creating decoders for process `\microsd.$proc$microsd.v:107$1'.
     1/2: $0\one_hundredkhz[0:0]
     2/2: $0\clkdiv[6:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\microsd.\dat' from process `\microsd.$proc$microsd.v:75$57'.
No latch inferred for signal `\microsd.\led' from process `\microsd.$proc$microsd.v:75$57'.
No latch inferred for signal `\microsd.\dat_read' from process `\microsd.$proc$microsd.v:75$57'.
No latch inferred for signal `\microsd.\crc_counter' from process `\microsd.$proc$microsd.v:75$57'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\microsd.\resp_delay' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24656' with positive edge clock.
Creating register for signal `\microsd.\sd_clk' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24657' with positive edge clock.
Creating register for signal `\microsd.\cmd' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24658' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_r2' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24659' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_ptr_r2' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24660' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24661' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_ptr' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24662' with positive edge clock.
Creating register for signal `\microsd.\cmd_read' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24663' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24664' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_ptr' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24665' with positive edge clock.
Creating register for signal `\microsd.\sd_mem_state' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24666' with positive edge clock.
Creating register for signal `\microsd.\data_ptr' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24667' with positive edge clock.
Creating register for signal `\microsd.\crc_state' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24668' with positive edge clock.
Creating register for signal `\microsd.\crc_buffer' using process `\microsd.$proc$microsd.v:135$9'.
  created $dff cell `$procdff$24669' with positive edge clock.
Creating register for signal `\microsd.\init_delay' using process `\microsd.$proc$microsd.v:123$6'.
  created $dff cell `$procdff$24670' with positive edge clock.
Creating register for signal `\microsd.\clkdiv' using process `\microsd.$proc$microsd.v:107$1'.
  created $dff cell `$procdff$24671' with positive edge clock.
Creating register for signal `\microsd.\one_hundredkhz' using process `\microsd.$proc$microsd.v:107$1'.
  created $dff cell `$procdff$24672' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `microsd.$proc$microsd.v:75$57'.
Found and cleaned up 28 empty switches in `\microsd.$proc$microsd.v:135$9'.
Removing empty process `microsd.$proc$microsd.v:135$9'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:123$6'.
Removing empty process `microsd.$proc$microsd.v:123$6'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:107$1'.
Removing empty process `microsd.$proc$microsd.v:107$1'.
Cleaned up 30 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~42 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 1499 unused cells and 2377 unused wires.
<suppressed ~1505 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~642 debug messages>
Removed a total of 214 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$24531: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$24340: { $procmux$24352_CMP $procmux$24348_CMP $auto$opt_reduce.cc:132:opt_mux$24676 }
    New ctrl vector for $pmux cell $procmux$24358: $auto$opt_reduce.cc:132:opt_mux$24678
    New ctrl vector for $pmux cell $procmux$24376: $auto$opt_reduce.cc:132:opt_mux$24680
    New ctrl vector for $pmux cell $procmux$24623: { $procmux$24487_CMP $auto$opt_reduce.cc:132:opt_mux$24682 $procmux$24459_CMP }
    New ctrl vector for $pmux cell $procmux$24630: $auto$opt_reduce.cc:132:opt_mux$24684
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24675: { $eq$microsd.v:387$44_Y $procmux$24344_CMP $procmux$24341_CMP $procmux$24343_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24677: { $procmux$24364_CMP $procmux$24359_CMP $procmux$24362_CMP $procmux$24363_CMP $procmux$24365_CMP $procmux$24366_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24679: { $procmux$24364_CMP $procmux$24359_CMP $procmux$24362_CMP $procmux$24363_CMP $procmux$24365_CMP $procmux$24366_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24681: { $procmux$1023_CMP $procmux$24481_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24683: { $procmux$1023_CMP $procmux$1057_CMP $procmux$24458_CMP $procmux$24459_CMP $procmux$24481_CMP $procmux$24487_CMP $procmux$24497_CMP }
  Optimizing cells in module \microsd.
Performed a total of 10 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~291 debug messages>
Removed a total of 97 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \sd_cmd_resp_r2 = 136'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 to constant driver in module microsd.
Promoted 1 init specs to constant drivers.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 311 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~114 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell microsd.$add$microsd.v:116$3 ($add).
Removed top 25 bits (of 32) from port Y of cell microsd.$add$microsd.v:116$3 ($add).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:128$8 ($sub).
Removed top 3 bits (of 7) from port B of cell microsd.$sub$microsd.v:193$13 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:251$29 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:333$37 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:380$43 ($sub).
Removed top 4 bits (of 6) from port B of cell microsd.$eq$microsd.v:387$44 ($eq).
Removed top 7 bits (of 8) from port B of cell microsd.$sub$microsd.v:390$45 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:395$46 ($sub).
Removed top 1 bits (of 7) from port Y of cell microsd.$sub$microsd.v:395$46 ($sub).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$637_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$690_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$745_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$802_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$922_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1016_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1023_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1050_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1057_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1117_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1186_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1257_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1330_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1405_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1482_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1561_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1642_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1725_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1810_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1897_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1986_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2077_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2170_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2265_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2362_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2461_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2562_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2665_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2770_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$2877_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$2986_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell microsd.$procmux$3097_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$24341_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$24348_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$24354_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24356_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24359_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24362_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24363_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24364_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24365_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$24367_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24398_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24402_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$24406_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24420 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24422 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24426 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24430 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24434 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24436 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24461 ($mux).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$24459_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24465 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24467 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24474 ($mux).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24487_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$24492_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell microsd.$procmux$24495 ($mux).
Removed top 2 bits (of 40) from mux cell microsd.$procmux$24613 ($mux).
Removed top 25 bits (of 32) from wire microsd.$add$microsd.v:116$3_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24420_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24422_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24426_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24430_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24434_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24436_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24461_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24465_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24467_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24474_Y.
Removed top 3 bits (of 4) from wire microsd.$procmux$24495_Y.
Removed top 2 bits (of 40) from wire microsd.$procmux$24613_Y.
Removed top 1 bits (of 7) from wire microsd.$sub$microsd.v:395$46_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$8c0aa91d4db8741c9947d7a0de6c875d8dfddc39\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$ed69233d74549f287b72a59633b9a76ab6bcc119\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$efc71e781fe178e08e0b73b60d007d65bb528021\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~1100 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 36 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module microsd:
  creating $macc model for $add$microsd.v:116$3 ($add).
  creating $macc model for $sub$microsd.v:128$8 ($sub).
  creating $macc model for $sub$microsd.v:193$13 ($sub).
  creating $macc model for $sub$microsd.v:251$29 ($sub).
  creating $macc model for $sub$microsd.v:333$37 ($sub).
  creating $macc model for $sub$microsd.v:380$43 ($sub).
  creating $macc model for $sub$microsd.v:390$45 ($sub).
  creating $macc model for $sub$microsd.v:395$46 ($sub).
  creating $alu model for $macc $sub$microsd.v:395$46.
  creating $alu model for $macc $sub$microsd.v:390$45.
  creating $alu model for $macc $sub$microsd.v:380$43.
  creating $alu model for $macc $sub$microsd.v:333$37.
  creating $alu model for $macc $sub$microsd.v:251$29.
  creating $alu model for $macc $sub$microsd.v:193$13.
  creating $alu model for $macc $sub$microsd.v:128$8.
  creating $alu model for $macc $add$microsd.v:116$3.
  creating $alu cell for $add$microsd.v:116$3: $auto$alumacc.cc:474:replace_alu$24719
  creating $alu cell for $sub$microsd.v:128$8: $auto$alumacc.cc:474:replace_alu$24722
  creating $alu cell for $sub$microsd.v:193$13: $auto$alumacc.cc:474:replace_alu$24725
  creating $alu cell for $sub$microsd.v:251$29: $auto$alumacc.cc:474:replace_alu$24728
  creating $alu cell for $sub$microsd.v:333$37: $auto$alumacc.cc:474:replace_alu$24731
  creating $alu cell for $sub$microsd.v:380$43: $auto$alumacc.cc:474:replace_alu$24734
  creating $alu cell for $sub$microsd.v:390$45: $auto$alumacc.cc:474:replace_alu$24737
  creating $alu cell for $sub$microsd.v:395$46: $auto$alumacc.cc:474:replace_alu$24740
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~114 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking microsd.crc_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking microsd.sd_mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~2 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~113 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$24426:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$24688 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$24688 [2] $auto$wreduce.cc:455:run$24688 [0] }
      New connections: $auto$wreduce.cc:455:run$24688 [1] = $auto$wreduce.cc:455:run$24688 [0]
    Consolidated identical input bits for $mux cell $procmux$24430:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$24689 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$24689 [2:1]
      New connections: $auto$wreduce.cc:455:run$24689 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24434:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$24690 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$24690 [2:1]
      New connections: $auto$wreduce.cc:455:run$24690 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24474:
      Old ports: A=3'100, B=3'001, Y=$auto$wreduce.cc:455:run$24695 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$24695 [2] $auto$wreduce.cc:455:run$24695 [0] }
      New connections: $auto$wreduce.cc:455:run$24695 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24483:
      Old ports: A=4'0011, B=4'1000, Y=$procmux$24483_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$24483_Y [3] $procmux$24483_Y [0] }
      New connections: $procmux$24483_Y [2:1] = { 1'0 $procmux$24483_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$24491:
      Old ports: A=4'0010, B=4'1001, Y=$procmux$24491_Y
      New ports: A=2'10, B=2'01, Y=$procmux$24491_Y [1:0]
      New connections: $procmux$24491_Y [3:2] = { $procmux$24491_Y [0] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$24531:
      Old ports: A={ 1'0 \crc_buffer [6:1] }, B={ $xor$microsd.v:212$23_Y \crc_buffer [6:4] $xor$microsd.v:216$19_Y \crc_buffer [2:1] }, Y=$procmux$24531_Y
      New ports: A={ 1'0 \crc_buffer [3] }, B={ $xor$microsd.v:212$23_Y $xor$microsd.v:216$19_Y }, Y={ $procmux$24531_Y [6] $procmux$24531_Y [2] }
      New connections: { $procmux$24531_Y [5:3] $procmux$24531_Y [1:0] } = { \crc_buffer [6:4] \crc_buffer [2:1] }
    Consolidated identical input bits for $mux cell $procmux$24613:
      Old ports: A=38'11011100000000000000000000000000000000, B=38'00001000000000000000000000000000000000, Y=$auto$wreduce.cc:455:run$24697 [37:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$24697 [32]
      New connections: { $auto$wreduce.cc:455:run$24697 [37:33] $auto$wreduce.cc:455:run$24697 [31:0] } = { $auto$wreduce.cc:455:run$24697 [32] $auto$wreduce.cc:455:run$24697 [32] 1'0 $auto$wreduce.cc:455:run$24697 [32] 33'100000000000000000000000000000000 }
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$24436:
      Old ports: A=$auto$wreduce.cc:455:run$24690 [2:0], B=$auto$wreduce.cc:455:run$24689 [2:0], Y=$auto$wreduce.cc:455:run$24691 [2:0]
      New ports: A=$auto$wreduce.cc:455:run$24690 [2:1], B=$auto$wreduce.cc:455:run$24689 [2:1], Y=$auto$wreduce.cc:455:run$24691 [2:1]
      New connections: $auto$wreduce.cc:455:run$24691 [0] = 1'0
  Optimizing cells in module \microsd.
Performed a total of 9 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~114 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:06bd827f6f487f52c037240a22f4735319b081ed$paramod$c17c2757a86408ad504dd786806ba33acfdaa50b\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:217d1fdd1fbbb1dd0a6b22ff249120c08f7b7b0c$paramod$d4e9353aa25f4197c2d56307ac757f55eeb00dfb\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $tribuf.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=4\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=40\S_WIDTH=6 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1358 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~1612 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~1926 debug messages>
Removed a total of 642 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 947 unused cells and 1873 unused wires.
<suppressed ~948 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24719.slice[0].carry: CO=\clkdiv [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24722.slice[0].carry: CO=\init_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24725.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24728.slice[0].carry: CO=\data_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24731.slice[0].carry: CO=\sd_cmd_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[0].carry: CO=\resp_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24737.slice[0].carry: CO=\sd_cmd_resp_ptr_r2 [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24740.slice[0].carry: CO=\sd_cmd_resp_ptr [0]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24719.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24722.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24725.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24728.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24731.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24734.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24737.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24740.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~145 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24725.slice[1].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24725.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~13 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24725.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24725.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~13 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24725.slice[3].carry: CO=\data_ptr [3]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24725.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~12 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.31.36. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module microsd:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27635 to $_DFFE_PP_ for $0\resp_delay[5:0] [0] -> \resp_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27636 to $_DFFE_PP_ for $0\resp_delay[5:0] [1] -> \resp_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27637 to $_DFFE_PP_ for $0\resp_delay[5:0] [2] -> \resp_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27638 to $_DFFE_PP_ for $0\resp_delay[5:0] [3] -> \resp_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27639 to $_DFFE_PP_ for $0\resp_delay[5:0] [4] -> \resp_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27640 to $_DFFE_PP_ for $0\resp_delay[5:0] [5] -> \resp_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27662 to $_DFFE_PP_ for $0\sd_clk[0:0] -> \sd_clk.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27663 to $_DFFE_PP_ for $0\cmd[0:0] -> \cmd.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27664 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [0] -> \sd_cmd_resp_ptr_r2 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27665 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [1] -> \sd_cmd_resp_ptr_r2 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27666 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [2] -> \sd_cmd_resp_ptr_r2 [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27667 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [3] -> \sd_cmd_resp_ptr_r2 [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27668 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [4] -> \sd_cmd_resp_ptr_r2 [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27669 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [5] -> \sd_cmd_resp_ptr_r2 [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27670 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [6] -> \sd_cmd_resp_ptr_r2 [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27671 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [7] -> \sd_cmd_resp_ptr_r2 [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27710 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [38] -> \sd_cmd_resp [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27720 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [0] -> \sd_cmd_resp_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27721 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [1] -> \sd_cmd_resp_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27722 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [2] -> \sd_cmd_resp_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27723 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [3] -> \sd_cmd_resp_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27724 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [4] -> \sd_cmd_resp_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27725 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [5] -> \sd_cmd_resp_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27726 to $_DFFE_PP_ for $0\cmd_read[0:0] -> \cmd_read.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27727 to $_DFFE_PP_ for $0\sd_cmd[47:0] [0] -> \sd_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27728 to $_DFFE_PP_ for $0\sd_cmd[47:0] [1] -> \sd_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27729 to $_DFFE_PP_ for $0\sd_cmd[47:0] [2] -> \sd_cmd [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27730 to $_DFFE_PP_ for $0\sd_cmd[47:0] [3] -> \sd_cmd [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27731 to $_DFFE_PP_ for $0\sd_cmd[47:0] [4] -> \sd_cmd [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27732 to $_DFFE_PP_ for $0\sd_cmd[47:0] [5] -> \sd_cmd [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27733 to $_DFFE_PP_ for $0\sd_cmd[47:0] [6] -> \sd_cmd [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27734 to $_DFFE_PP_ for $0\sd_cmd[47:0] [7] -> \sd_cmd [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27735 to $_DFFE_PP_ for $0\sd_cmd[47:0] [8] -> \sd_cmd [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27736 to $_DFFE_PP_ for $0\sd_cmd[47:0] [9] -> \sd_cmd [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27737 to $_DFFE_PP_ for $0\sd_cmd[47:0] [10] -> \sd_cmd [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27738 to $_DFFE_PP_ for $0\sd_cmd[47:0] [11] -> \sd_cmd [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27739 to $_DFFE_PP_ for $0\sd_cmd[47:0] [12] -> \sd_cmd [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27740 to $_DFFE_PP_ for $0\sd_cmd[47:0] [13] -> \sd_cmd [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27741 to $_DFFE_PP_ for $0\sd_cmd[47:0] [14] -> \sd_cmd [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27742 to $_DFFE_PP_ for $0\sd_cmd[47:0] [15] -> \sd_cmd [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27743 to $_DFFE_PP_ for $0\sd_cmd[47:0] [16] -> \sd_cmd [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27744 to $_DFFE_PP_ for $0\sd_cmd[47:0] [17] -> \sd_cmd [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27745 to $_DFFE_PP_ for $0\sd_cmd[47:0] [18] -> \sd_cmd [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27746 to $_DFFE_PP_ for $0\sd_cmd[47:0] [19] -> \sd_cmd [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27747 to $_DFFE_PP_ for $0\sd_cmd[47:0] [20] -> \sd_cmd [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27748 to $_DFFE_PP_ for $0\sd_cmd[47:0] [21] -> \sd_cmd [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27749 to $_DFFE_PP_ for $0\sd_cmd[47:0] [22] -> \sd_cmd [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27750 to $_DFFE_PP_ for $0\sd_cmd[47:0] [23] -> \sd_cmd [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27751 to $_DFFE_PP_ for $0\sd_cmd[47:0] [24] -> \sd_cmd [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27752 to $_DFFE_PP_ for $0\sd_cmd[47:0] [25] -> \sd_cmd [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27753 to $_DFFE_PP_ for $0\sd_cmd[47:0] [26] -> \sd_cmd [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27754 to $_DFFE_PP_ for $0\sd_cmd[47:0] [27] -> \sd_cmd [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27755 to $_DFFE_PP_ for $0\sd_cmd[47:0] [28] -> \sd_cmd [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27756 to $_DFFE_PP_ for $0\sd_cmd[47:0] [29] -> \sd_cmd [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27757 to $_DFFE_PP_ for $0\sd_cmd[47:0] [30] -> \sd_cmd [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27758 to $_DFFE_PP_ for $0\sd_cmd[47:0] [31] -> \sd_cmd [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27759 to $_DFFE_PP_ for $0\sd_cmd[47:0] [32] -> \sd_cmd [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27760 to $_DFFE_PP_ for $0\sd_cmd[47:0] [33] -> \sd_cmd [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27761 to $_DFFE_PP_ for $0\sd_cmd[47:0] [34] -> \sd_cmd [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27762 to $_DFFE_PP_ for $0\sd_cmd[47:0] [35] -> \sd_cmd [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27763 to $_DFFE_PP_ for $0\sd_cmd[47:0] [36] -> \sd_cmd [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27764 to $_DFFE_PP_ for $0\sd_cmd[47:0] [37] -> \sd_cmd [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27765 to $_DFFE_PP_ for $0\sd_cmd[47:0] [38] -> \sd_cmd [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27766 to $_DFFE_PP_ for $0\sd_cmd[47:0] [39] -> \sd_cmd [39].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27767 to $_DFFE_PP_ for $0\sd_cmd[47:0] [40] -> \sd_cmd [40].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27768 to $_DFFE_PP_ for $0\sd_cmd[47:0] [41] -> \sd_cmd [41].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27769 to $_DFFE_PP_ for $0\sd_cmd[47:0] [42] -> \sd_cmd [42].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27770 to $_DFFE_PP_ for $0\sd_cmd[47:0] [43] -> \sd_cmd [43].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27771 to $_DFFE_PP_ for $0\sd_cmd[47:0] [44] -> \sd_cmd [44].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27772 to $_DFFE_PP_ for $0\sd_cmd[47:0] [45] -> \sd_cmd [45].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27773 to $_DFFE_PP_ for $0\sd_cmd[47:0] [46] -> \sd_cmd [46].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27774 to $_DFFE_PP_ for $0\sd_cmd[47:0] [47] -> \sd_cmd [47].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27775 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [0] -> \sd_cmd_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27776 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [1] -> \sd_cmd_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27777 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [2] -> \sd_cmd_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27778 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [3] -> \sd_cmd_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27779 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [4] -> \sd_cmd_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27780 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [5] -> \sd_cmd_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27781 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [0] -> \sd_mem_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27782 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [1] -> \sd_mem_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27783 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [2] -> \sd_mem_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27784 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [3] -> \sd_mem_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27785 to $_DFFE_PP_ for $0\data_ptr[6:0] [0] -> \data_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27786 to $_DFFE_PP_ for $0\data_ptr[6:0] [1] -> \data_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27787 to $_DFFE_PP_ for $0\data_ptr[6:0] [2] -> \data_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27788 to $_DFFE_PP_ for $0\data_ptr[6:0] [3] -> \data_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27789 to $_DFFE_PP_ for $0\data_ptr[6:0] [4] -> \data_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27790 to $_DFFE_PP_ for $0\data_ptr[6:0] [5] -> \data_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27791 to $_DFFE_PP_ for $0\data_ptr[6:0] [6] -> \data_ptr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27792 to $_DFFE_PP_ for $0\crc_state[3:0] [0] -> \crc_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27793 to $_DFFE_PP_ for $0\crc_state[3:0] [1] -> \crc_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27794 to $_DFFE_PP_ for $0\crc_state[3:0] [2] -> \crc_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27795 to $_DFFE_PP_ for $0\crc_state[3:0] [3] -> \crc_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27796 to $_DFFE_PP_ for $0\crc_buffer[7:0] [0] -> \crc_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27797 to $_DFFE_PP_ for $0\crc_buffer[7:0] [1] -> \crc_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27798 to $_DFFE_PP_ for $0\crc_buffer[7:0] [2] -> \crc_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27799 to $_DFFE_PP_ for $0\crc_buffer[7:0] [3] -> \crc_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27800 to $_DFFE_PP_ for $0\crc_buffer[7:0] [4] -> \crc_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27801 to $_DFFE_PP_ for $0\crc_buffer[7:0] [5] -> \crc_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27802 to $_DFFE_PP_ for $0\crc_buffer[7:0] [6] -> \crc_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27803 to $_DFFE_PP_ for $0\crc_buffer[7:0] [7] -> \crc_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27804 to $_DFFE_PP_ for $0\init_delay[13:0] [0] -> \init_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27805 to $_DFFE_PP_ for $0\init_delay[13:0] [1] -> \init_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27806 to $_DFFE_PP_ for $0\init_delay[13:0] [2] -> \init_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27807 to $_DFFE_PP_ for $0\init_delay[13:0] [3] -> \init_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27808 to $_DFFE_PP_ for $0\init_delay[13:0] [4] -> \init_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27809 to $_DFFE_PP_ for $0\init_delay[13:0] [5] -> \init_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27810 to $_DFFE_PP_ for $0\init_delay[13:0] [6] -> \init_delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27811 to $_DFFE_PP_ for $0\init_delay[13:0] [7] -> \init_delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27812 to $_DFFE_PP_ for $0\init_delay[13:0] [8] -> \init_delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27813 to $_DFFE_PP_ for $0\init_delay[13:0] [9] -> \init_delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27814 to $_DFFE_PP_ for $0\init_delay[13:0] [10] -> \init_delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27815 to $_DFFE_PP_ for $0\init_delay[13:0] [11] -> \init_delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27816 to $_DFFE_PP_ for $0\init_delay[13:0] [12] -> \init_delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27817 to $_DFFE_PP_ for $0\init_delay[13:0] [13] -> \init_delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27819 to $_DFFE_PP_ for $0\clkdiv[6:0] [1] -> \clkdiv [1].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~123 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~368 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in microsd.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27812 (SB_DFFE): \init_delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27636 (SB_DFFE): \resp_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27637 (SB_DFFE): \resp_delay [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27638 (SB_DFFE): \resp_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27639 (SB_DFFE): \resp_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27640 (SB_DFFE): \resp_delay [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27665 (SB_DFFE): \sd_cmd_resp_ptr_r2 [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27663 (SB_DFFE): \cmd = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27635 (SB_DFFE): \resp_delay [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27671 (SB_DFFE): \sd_cmd_resp_ptr_r2 [7] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27666 (SB_DFFE): \sd_cmd_resp_ptr_r2 [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27667 (SB_DFFE): \sd_cmd_resp_ptr_r2 [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27668 (SB_DFFE): \sd_cmd_resp_ptr_r2 [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27669 (SB_DFFE): \sd_cmd_resp_ptr_r2 [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27670 (SB_DFFE): \sd_cmd_resp_ptr_r2 [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27710 (SB_DFFE): \sd_cmd_resp [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27662 (SB_DFFE): \sd_clk = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27720 (SB_DFFE): \sd_cmd_resp_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27721 (SB_DFFE): \sd_cmd_resp_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27722 (SB_DFFE): \sd_cmd_resp_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27723 (SB_DFFE): \sd_cmd_resp_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27724 (SB_DFFE): \sd_cmd_resp_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27725 (SB_DFFE): \sd_cmd_resp_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27729 (SB_DFFE): \sd_cmd [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27728 (SB_DFFE): \sd_cmd [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27726 (SB_DFFE): \cmd_read = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27664 (SB_DFFE): \sd_cmd_resp_ptr_r2 [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27730 (SB_DFFE): \sd_cmd [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27731 (SB_DFFE): \sd_cmd [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27732 (SB_DFFE): \sd_cmd [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27733 (SB_DFFE): \sd_cmd [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27734 (SB_DFFE): \sd_cmd [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27735 (SB_DFFE): \sd_cmd [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27736 (SB_DFFE): \sd_cmd [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27737 (SB_DFFE): \sd_cmd [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27738 (SB_DFFE): \sd_cmd [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27739 (SB_DFFE): \sd_cmd [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27740 (SB_DFFE): \sd_cmd [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27741 (SB_DFFE): \sd_cmd [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27742 (SB_DFFE): \sd_cmd [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27743 (SB_DFFE): \sd_cmd [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27744 (SB_DFFE): \sd_cmd [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27745 (SB_DFFE): \sd_cmd [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27746 (SB_DFFE): \sd_cmd [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27747 (SB_DFFE): \sd_cmd [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27748 (SB_DFFE): \sd_cmd [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27749 (SB_DFFE): \sd_cmd [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27750 (SB_DFFE): \sd_cmd [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27751 (SB_DFFE): \sd_cmd [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27752 (SB_DFFE): \sd_cmd [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27753 (SB_DFFE): \sd_cmd [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27754 (SB_DFFE): \sd_cmd [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27755 (SB_DFFE): \sd_cmd [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27756 (SB_DFFE): \sd_cmd [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27757 (SB_DFFE): \sd_cmd [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27758 (SB_DFFE): \sd_cmd [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27759 (SB_DFFE): \sd_cmd [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27760 (SB_DFFE): \sd_cmd [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27761 (SB_DFFE): \sd_cmd [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27762 (SB_DFFE): \sd_cmd [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27763 (SB_DFFE): \sd_cmd [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27764 (SB_DFFE): \sd_cmd [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27765 (SB_DFFE): \sd_cmd [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27766 (SB_DFFE): \sd_cmd [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27767 (SB_DFFE): \sd_cmd [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27768 (SB_DFFE): \sd_cmd [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27769 (SB_DFFE): \sd_cmd [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27770 (SB_DFFE): \sd_cmd [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27771 (SB_DFFE): \sd_cmd [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27772 (SB_DFFE): \sd_cmd [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27773 (SB_DFFE): \sd_cmd [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27774 (SB_DFFE): \sd_cmd [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27775 (SB_DFFE): \sd_cmd_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27776 (SB_DFFE): \sd_cmd_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27777 (SB_DFFE): \sd_cmd_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27778 (SB_DFFE): \sd_cmd_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27779 (SB_DFFE): \sd_cmd_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27780 (SB_DFFE): \sd_cmd_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27782 (SB_DFFE): \sd_mem_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27783 (SB_DFFE): \sd_mem_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27784 (SB_DFFE): \sd_mem_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27727 (SB_DFFE): \sd_cmd [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27785 (SB_DFFE): \data_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27786 (SB_DFFE): \data_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27787 (SB_DFFE): \data_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27788 (SB_DFFE): \data_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27789 (SB_DFFE): \data_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27790 (SB_DFFE): \data_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27791 (SB_DFFE): \data_ptr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27794 (SB_DFFE): \crc_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27793 (SB_DFFE): \crc_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27781 (SB_DFFE): \sd_mem_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27795 (SB_DFFE): \crc_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27796 (SB_DFFE): \crc_buffer [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27797 (SB_DFFE): \crc_buffer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27798 (SB_DFFE): \crc_buffer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27799 (SB_DFFE): \crc_buffer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27800 (SB_DFFE): \crc_buffer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27801 (SB_DFFE): \crc_buffer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27802 (SB_DFFE): \crc_buffer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27803 (SB_DFFE): \crc_buffer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27805 (SB_DFFE): \init_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27792 (SB_DFFE): \crc_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27806 (SB_DFFE): \init_delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27807 (SB_DFFE): \init_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27808 (SB_DFFE): \init_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27809 (SB_DFFE): \init_delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27810 (SB_DFFE): \init_delay [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27811 (SB_DFFE): \init_delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27813 (SB_DFFE): \init_delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27804 (SB_DFFE): \init_delay [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27814 (SB_DFFE): \init_delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27815 (SB_DFFE): \init_delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27816 (SB_DFFE): \init_delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27817 (SB_DFFE): \init_delay [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in microsd.
  Merging $auto$simplemap.cc:277:simplemap_mux$27612 (A=$procmux$24643_Y [1], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$25065) into $auto$simplemap.cc:420:simplemap_dff$27636 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27614 (A=$procmux$24643_Y [3], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$25065) into $auto$simplemap.cc:420:simplemap_dff$27638 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27656 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$30158 [1], S=$auto$simplemap.cc:256:simplemap_eqne$24811) into $auto$simplemap.cc:420:simplemap_dff$27819 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27657 (A=1'0, B=$add$microsd.v:116$3_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$24811) into $auto$simplemap.cc:420:simplemap_dff$27820 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27658 (A=1'0, B=$add$microsd.v:116$3_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$24811) into $auto$simplemap.cc:420:simplemap_dff$27821 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27659 (A=1'0, B=$add$microsd.v:116$3_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$24811) into $auto$simplemap.cc:420:simplemap_dff$27822 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27660 (A=1'0, B=$add$microsd.v:116$3_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$24811) into $auto$simplemap.cc:420:simplemap_dff$27823 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27661 (A=1'0, B=$add$microsd.v:116$3_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$24811) into $auto$simplemap.cc:420:simplemap_dff$27824 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27655 (A=1'0, B=$add$microsd.v:116$3_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$24811) into $auto$simplemap.cc:420:simplemap_dff$27818 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~111 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~594 debug messages>
Removed a total of 198 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 9 unused cells and 1086 unused wires.
<suppressed ~10 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\microsd' to `<abc-temp-dir>/input.blif'..
Extracted 933 gates and 1091 wires to a netlist network with 156 inputs and 119 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     208.
ABC: Participating nodes from both networks       =     485.
ABC: Participating nodes from the first network   =     208. (  55.47 % of nodes)
ABC: Participating nodes from the second network  =     277. (  73.87 % of nodes)
ABC: Node pairs (any polarity)                    =     208. (  55.47 % of names can be moved)
ABC: Node pairs (same polarity)                   =     171. (  45.60 % of names can be moved)
ABC: Total runtime =     0.11 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      748
ABC RESULTS:        internal signals:      816
ABC RESULTS:           input signals:      156
ABC RESULTS:          output signals:      119
Removing temp directory.
Removed 0 unused cells and 569 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001101101101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
No more expansions possible.
<suppressed ~1407 debug messages>
Removed 0 unused cells and 746 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \microsd

2.43.2. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.44. Printing statistics.

=== microsd ===

   Number of wires:                409
   Number of wire bits:            913
   Number of public wires:          26
   Number of public wire bits:     328
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                589
     $_TBUF_                         1
     SB_CARRY                       42
     SB_DFF                          1
     SB_DFFE                       113
     SB_DFFESR                       3
     SB_DFFSR                        6
     SB_LUT4                       423

2.45. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 18994f2cfb
CPU: user 4.55s system 0.20s, MEM: 31.79 MB total, 26.20 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 23x opt_expr (1 sec), 16% 18x opt_merge (0 sec), ...
