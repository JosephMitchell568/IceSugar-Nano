
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `microsd.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: microsd.v
Parsing Verilog input from `microsd.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:503)
Generating RTLIL representation for module `\microsd'.
microsd.v:377: Warning: Identifier `\sd_cmd_response_ptr' is implicitly declared.
microsd.v:479: Warning: Identifier `\CALC_CRC' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json microsd.json -blif microsd.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: microsd             
Automatically selected microsd as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \microsd

2.2.3. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 46 dead cases from process $proc$microsd.v:127$9 in module microsd.
Marked 18 switch rules as full_case in process $proc$microsd.v:127$9 in module microsd.
Marked 1 switch rules as full_case in process $proc$microsd.v:99$1 in module microsd.
Removed a total of 46 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\microsd.$proc$microsd.v:71$71'.
  Set init value: \init_delay = 14'00000001010000
  Set init value: \resp_delay = 6'110101
  Set init value: \sd_clk = 1'0
  Set init value: \cmd = 1'1
  Set init value: \led = 1'0
  Set init value: \sd_cmd_resp = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_resp_ptr = 6'101111
  Set init value: \cmd_read = 1'0
  Set init value: \sd_cmd = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_ptr = 6'101111
  Set init value: \sd_mem_state = 4'0000
  Set init value: \data_ptr = 7'0101111
  Set init value: \crc_state = 4'0000
  Set init value: \crc_buffer = 8'00000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\microsd.$proc$microsd.v:71$71'.
     1/17: $0\crc_counter[7:0]
     2/17: $1\crc_buffer[7:0]
     3/17: $1\crc_state[3:0]
     4/17: $1\data_ptr[6:0]
     5/17: $1\init_delay[13:0]
     6/17: $0\dat_read[0:0]
     7/17: $1\cmd_read[0:0]
     8/17: $1\sd_cmd_resp_ptr[5:0]
     9/17: $1\sd_cmd_resp[47:0]
    10/17: $1\resp_delay[5:0]
    11/17: $1\sd_mem_state[3:0]
    12/17: $1\sd_cmd_ptr[5:0]
    13/17: $1\sd_cmd[47:0]
    14/17: $0\dat[3:0]
    15/17: $1\cmd[0:0]
    16/17: $1\sd_clk[0:0]
    17/17: $1\led[0:0]
Creating decoders for process `\microsd.$proc$microsd.v:127$9'.
     1/63: $0\crc_buffer[7:0] [7:1]
     2/63: $0\sd_cmd_resp[47:0] [46]
     3/63: $0\sd_cmd_resp[47:0] [45]
     4/63: $0\sd_cmd_resp[47:0] [44]
     5/63: $0\sd_cmd_resp[47:0] [43]
     6/63: $0\sd_cmd_resp[47:0] [42]
     7/63: $0\sd_cmd_resp[47:0] [41]
     8/63: $0\sd_cmd_resp[47:0] [40]
     9/63: $0\sd_cmd_resp[47:0] [39]
    10/63: $0\sd_cmd_resp[47:0] [38]
    11/63: $0\sd_cmd_resp[47:0] [37]
    12/63: $0\sd_cmd_resp[47:0] [36]
    13/63: $0\sd_cmd_resp[47:0] [35]
    14/63: $0\sd_cmd_resp[47:0] [34]
    15/63: $0\sd_cmd_resp[47:0] [33]
    16/63: $0\sd_cmd_resp[47:0] [32]
    17/63: $0\sd_cmd_resp[47:0] [31]
    18/63: $0\sd_cmd_resp[47:0] [30]
    19/63: $0\sd_cmd_resp[47:0] [29]
    20/63: $0\sd_cmd_resp[47:0] [28]
    21/63: $0\sd_cmd_resp[47:0] [27]
    22/63: $0\sd_cmd_resp[47:0] [26]
    23/63: $0\sd_cmd_resp[47:0] [25]
    24/63: $0\sd_cmd_resp[47:0] [24]
    25/63: $0\sd_cmd_resp[47:0] [23]
    26/63: $0\sd_cmd_resp[47:0] [22]
    27/63: $0\sd_cmd_resp[47:0] [21]
    28/63: $0\sd_cmd_resp[47:0] [20]
    29/63: $0\sd_cmd_resp[47:0] [19]
    30/63: $0\sd_cmd_resp[47:0] [18]
    31/63: $0\sd_cmd_resp[47:0] [17]
    32/63: $0\sd_cmd_resp[47:0] [16]
    33/63: $0\sd_cmd_resp[47:0] [15]
    34/63: $0\sd_cmd_resp[47:0] [14]
    35/63: $0\sd_cmd_resp[47:0] [13]
    36/63: $0\sd_cmd_resp[47:0] [12]
    37/63: $0\sd_cmd_resp[47:0] [11]
    38/63: $0\sd_cmd_resp[47:0] [10]
    39/63: $0\sd_cmd_resp[47:0] [9]
    40/63: $0\sd_cmd_resp[47:0] [8]
    41/63: $0\sd_cmd_resp[47:0] [7]
    42/63: $0\sd_cmd_resp[47:0] [6]
    43/63: $0\sd_cmd_resp[47:0] [5]
    44/63: $0\sd_cmd_resp[47:0] [4]
    45/63: $0\sd_cmd_resp[47:0] [3]
    46/63: $0\sd_cmd_resp[47:0] [2]
    47/63: $0\sd_cmd_resp[47:0] [1]
    48/63: $0\sd_cmd_resp[47:0] [0]
    49/63: $0\sd_cmd[47:0] [7:1]
    50/63: $0\sd_cmd[47:0] [0]
    51/63: $0\sd_cmd_resp[47:0] [47]
    52/63: $0\crc_state[3:0]
    53/63: $0\data_ptr[6:0]
    54/63: $0\sd_mem_state[3:0]
    55/63: $0\sd_cmd_ptr[5:0]
    56/63: $0\crc_buffer[7:0] [0]
    57/63: $0\cmd_read[0:0]
    58/63: $0\sd_cmd_resp_ptr[5:0]
    59/63: $0\sd_cmd[47:0] [47:8]
    60/63: $0\led[0:0]
    61/63: $0\cmd[0:0]
    62/63: $0\sd_clk[0:0]
    63/63: $0\resp_delay[5:0]
Creating decoders for process `\microsd.$proc$microsd.v:115$6'.
     1/1: $0\init_delay[13:0]
Creating decoders for process `\microsd.$proc$microsd.v:99$1'.
     1/2: $0\one_hundredkhz[0:0]
     2/2: $0\clkdiv[6:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\microsd.\dat' from process `\microsd.$proc$microsd.v:71$71'.
No latch inferred for signal `\microsd.\dat_read' from process `\microsd.$proc$microsd.v:71$71'.
No latch inferred for signal `\microsd.\crc_counter' from process `\microsd.$proc$microsd.v:71$71'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\microsd.\resp_delay' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2062' with positive edge clock.
Creating register for signal `\microsd.\sd_clk' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2063' with positive edge clock.
Creating register for signal `\microsd.\cmd' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2064' with positive edge clock.
Creating register for signal `\microsd.\led' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2065' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2066' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_ptr' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2067' with positive edge clock.
Creating register for signal `\microsd.\cmd_read' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2068' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2069' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_ptr' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2070' with positive edge clock.
Creating register for signal `\microsd.\sd_mem_state' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2071' with positive edge clock.
Creating register for signal `\microsd.\data_ptr' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2072' with positive edge clock.
Creating register for signal `\microsd.\crc_state' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2073' with positive edge clock.
Creating register for signal `\microsd.\crc_buffer' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$2074' with positive edge clock.
Creating register for signal `\microsd.\init_delay' using process `\microsd.$proc$microsd.v:115$6'.
  created $dff cell `$procdff$2075' with positive edge clock.
Creating register for signal `\microsd.\clkdiv' using process `\microsd.$proc$microsd.v:99$1'.
  created $dff cell `$procdff$2076' with positive edge clock.
Creating register for signal `\microsd.\one_hundredkhz' using process `\microsd.$proc$microsd.v:99$1'.
  created $dff cell `$procdff$2077' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `microsd.$proc$microsd.v:71$71'.
Found and cleaned up 31 empty switches in `\microsd.$proc$microsd.v:127$9'.
Removing empty process `microsd.$proc$microsd.v:127$9'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:115$6'.
Removing empty process `microsd.$proc$microsd.v:115$6'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:99$1'.
Removing empty process `microsd.$proc$microsd.v:99$1'.
Cleaned up 33 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~59 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 4 unused cells and 204 unused wires.
<suppressed ~16 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module microsd..
Warning: Wire microsd.\sd_cmd_response_ptr is used but has no driver.
found and reported 1 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~420 debug messages>
Removed a total of 140 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$78: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
      Replacing known input bits on port A of cell $procmux$92: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$1758: { $procmux$1768_CMP $procmux$1764_CMP $auto$opt_reduce.cc:132:opt_mux$2081 }
    New ctrl vector for $pmux cell $procmux$1774: $auto$opt_reduce.cc:132:opt_mux$2083
    New ctrl vector for $pmux cell $procmux$1788: $auto$opt_reduce.cc:132:opt_mux$2085
    New ctrl vector for $pmux cell $procmux$2027: { $procmux$1896_CMP $auto$opt_reduce.cc:132:opt_mux$2087 $procmux$1827_CMP }
    New ctrl vector for $pmux cell $procmux$2036: $auto$opt_reduce.cc:132:opt_mux$2089
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$2080: { $procmux$1759_CMP $procmux$1760_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$2082: { $procmux$1775_CMP $procmux$1776_CMP $procmux$1777_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$2084: { $procmux$1775_CMP $procmux$1776_CMP $procmux$1777_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$2086: { $procmux$1020_CMP $procmux$1890_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$2088: { $procmux$1020_CMP $procmux$1635_CMP $procmux$1874_CMP $procmux$1890_CMP $procmux$1896_CMP $procmux$1908_CMP }
  Optimizing cells in module \microsd.
Performed a total of 10 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 144 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$1960: { $procmux$1890_CMP $auto$opt_reduce.cc:132:opt_mux$2091 }
  Optimizing cells in module \microsd.
Performed a total of 1 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell microsd.$add$microsd.v:108$3 ($add).
Removed top 25 bits (of 32) from port Y of cell microsd.$add$microsd.v:108$3 ($add).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:120$8 ($sub).
Removed top 1 bits (of 40) from port B of cell microsd.$ne$microsd.v:164$12 ($ne).
Removed top 3 bits (of 7) from port B of cell microsd.$sub$microsd.v:177$13 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:236$29 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:310$37 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:357$43 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:366$44 ($sub).
Removed top 1 bits (of 7) from port Y of cell microsd.$sub$microsd.v:366$44 ($sub).
Removed top 3 bits (of 7) from port B of cell microsd.$sub$microsd.v:405$50 ($sub).
Removed top 1 bits (of 7) from port Y of cell microsd.$sub$microsd.v:405$50 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$eq$microsd.v:453$67 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$403_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$431_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$460_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$490_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$521_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$553_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$586_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$620_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$655_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$691_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$728_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$766_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$805_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$845_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$886_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$928_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$971_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1020_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1015_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1060_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1106_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1153_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1201_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1250_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1300_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$1351_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$1403_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$1456_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$1510_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$1565_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$1621_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1635_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1764_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1770_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$1772_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$1775_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$1776_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$1778_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$1810 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$1812 ($mux).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$1814_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$1815_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$1817 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$1820 ($mux).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$1824_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1827_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$1832 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$1834 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$1838 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$1842 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$1846 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$1848 ($mux).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1874_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$1876 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$1883 ($mux).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$1896_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$1901_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell microsd.$procmux$1906 ($mux).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2005_CMP0 ($eq).
Removed top 25 bits (of 32) from wire microsd.$add$microsd.v:108$3_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$1810_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$1812_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$1817_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$1820_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$1832_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$1834_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$1838_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$1842_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$1846_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$1848_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$1876_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$1883_Y.
Removed top 3 bits (of 4) from wire microsd.$procmux$1906_Y.
Removed top 1 bits (of 7) from wire microsd.$sub$microsd.v:366$44_Y.
Removed top 1 bits (of 7) from wire microsd.$sub$microsd.v:405$50_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$8c0aa91d4db8741c9947d7a0de6c875d8dfddc39\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$64fdb727b8fb55a4fe9731fe5b6468d06ea5e6e3\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$ed69233d74549f287b72a59633b9a76ab6bcc119\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$efc71e781fe178e08e0b73b60d007d65bb528021\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~1088 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 39 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module microsd:
  creating $macc model for $add$microsd.v:108$3 ($add).
  creating $macc model for $sub$microsd.v:120$8 ($sub).
  creating $macc model for $sub$microsd.v:177$13 ($sub).
  creating $macc model for $sub$microsd.v:236$29 ($sub).
  creating $macc model for $sub$microsd.v:310$37 ($sub).
  creating $macc model for $sub$microsd.v:357$43 ($sub).
  creating $macc model for $sub$microsd.v:366$44 ($sub).
  creating $macc model for $sub$microsd.v:405$50 ($sub).
  creating $alu model for $macc $sub$microsd.v:405$50.
  creating $alu model for $macc $sub$microsd.v:366$44.
  creating $alu model for $macc $sub$microsd.v:357$43.
  creating $alu model for $macc $sub$microsd.v:310$37.
  creating $alu model for $macc $sub$microsd.v:236$29.
  creating $alu model for $macc $sub$microsd.v:177$13.
  creating $alu model for $macc $sub$microsd.v:120$8.
  creating $alu model for $macc $add$microsd.v:108$3.
  creating $alu cell for $add$microsd.v:108$3: $auto$alumacc.cc:474:replace_alu$2130
  creating $alu cell for $sub$microsd.v:120$8: $auto$alumacc.cc:474:replace_alu$2133
  creating $alu cell for $sub$microsd.v:177$13: $auto$alumacc.cc:474:replace_alu$2136
  creating $alu cell for $sub$microsd.v:236$29: $auto$alumacc.cc:474:replace_alu$2139
  creating $alu cell for $sub$microsd.v:310$37: $auto$alumacc.cc:474:replace_alu$2142
  creating $alu cell for $sub$microsd.v:357$43: $auto$alumacc.cc:474:replace_alu$2145
  creating $alu cell for $sub$microsd.v:366$44: $auto$alumacc.cc:474:replace_alu$2148
  creating $alu cell for $sub$microsd.v:405$50: $auto$alumacc.cc:474:replace_alu$2151
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking microsd.crc_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking microsd.sd_mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~6 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~67 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$1634: $procmux$1020_CMP
    Consolidated identical input bits for $mux cell $procmux$1817:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$2095 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$2095 [2:1]
      New connections: $auto$wreduce.cc:455:run$2095 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$1820:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$2096 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$2096 [2:1]
      New connections: $auto$wreduce.cc:455:run$2096 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$1822:
      Old ports: A={ 1'0 $auto$wreduce.cc:455:run$2096 [2:0] }, B={ 1'0 $auto$wreduce.cc:455:run$2095 [2:0] }, Y=$procmux$1822_Y
      New ports: A=$auto$wreduce.cc:455:run$2096 [2:0], B=$auto$wreduce.cc:455:run$2095 [2:0], Y=$procmux$1822_Y [2:0]
      New connections: $procmux$1822_Y [3] = 1'0
    Consolidated identical input bits for $mux cell $procmux$1838:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$2099 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$2099 [2] $auto$wreduce.cc:455:run$2099 [0] }
      New connections: $auto$wreduce.cc:455:run$2099 [1] = $auto$wreduce.cc:455:run$2099 [0]
    Consolidated identical input bits for $mux cell $procmux$1842:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$2100 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$2100 [2:1]
      New connections: $auto$wreduce.cc:455:run$2100 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$1846:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$2101 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$2101 [2:1]
      New connections: $auto$wreduce.cc:455:run$2101 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$1883:
      Old ports: A=3'100, B=3'001, Y=$auto$wreduce.cc:455:run$2104 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$2104 [2] $auto$wreduce.cc:455:run$2104 [0] }
      New connections: $auto$wreduce.cc:455:run$2104 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$1892:
      Old ports: A=4'0011, B=4'1000, Y=$procmux$1892_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$1892_Y [3] $procmux$1892_Y [0] }
      New connections: $procmux$1892_Y [2:1] = { 1'0 $procmux$1892_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$78:
      Old ports: A={ 1'0 \crc_buffer [6:1] }, B={ $xor$microsd.v:196$23_Y \crc_buffer [6:4] $xor$microsd.v:200$19_Y \crc_buffer [2:1] }, Y=$procmux$78_Y
      New ports: A={ 1'0 \crc_buffer [3] }, B={ $xor$microsd.v:196$23_Y $xor$microsd.v:200$19_Y }, Y={ $procmux$78_Y [6] $procmux$78_Y [2] }
      New connections: { $procmux$78_Y [5:3] $procmux$78_Y [1:0] } = { \crc_buffer [6:4] \crc_buffer [2:1] }
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$1822:
      Old ports: A=$auto$wreduce.cc:455:run$2096 [2:0], B=$auto$wreduce.cc:455:run$2095 [2:0], Y=$procmux$1822_Y [2:0]
      New ports: A=$auto$wreduce.cc:455:run$2096 [2:1], B=$auto$wreduce.cc:455:run$2095 [2:1], Y=$procmux$1822_Y [2:1]
      New connections: $procmux$1822_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$1848:
      Old ports: A=$auto$wreduce.cc:455:run$2101 [2:0], B=$auto$wreduce.cc:455:run$2100 [2:0], Y=$auto$wreduce.cc:455:run$2102 [2:0]
      New ports: A=$auto$wreduce.cc:455:run$2101 [2:1], B=$auto$wreduce.cc:455:run$2100 [2:1], Y=$auto$wreduce.cc:455:run$2102 [2:1]
      New connections: $auto$wreduce.cc:455:run$2102 [0] = 1'0
  Optimizing cells in module \microsd.
Performed a total of 12 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~69 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:06bd827f6f487f52c037240a22f4735319b081ed$paramod$c17c2757a86408ad504dd786806ba33acfdaa50b\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:217d1fdd1fbbb1dd0a6b22ff249120c08f7b7b0c$paramod$d4e9353aa25f4197c2d56307ac757f55eeb00dfb\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $tribuf.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=4\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=4\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=10 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=40\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1104 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~1299 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~1632 debug messages>
Removed a total of 544 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 628 unused cells and 1096 unused wires.
<suppressed ~629 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2130.slice[0].carry: CO=\clkdiv [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2133.slice[0].carry: CO=\init_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2136.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2139.slice[0].carry: CO=\data_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2142.slice[0].carry: CO=\sd_cmd_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2145.slice[0].carry: CO=\resp_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2148.slice[0].carry: CO=\sd_cmd_resp_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2151.slice[0].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2130.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2133.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2136.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2139.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2142.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2145.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2148.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2151.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~103 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2136.slice[1].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2151.slice[1].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2136.slice[2].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2151.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~26 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 2 unused cells and 8 unused wires.
<suppressed ~3 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2136.slice[2].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2151.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2136.slice[3].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2151.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~26 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2136.slice[3].carry: CO=\data_ptr [3]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$2151.slice[3].carry: CO=\sd_cmd_resp_ptr [3]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2136.slice[4].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$2151.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~24 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.31.36. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module microsd:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4768 to $_DFFE_PP_ for $0\resp_delay[5:0] [0] -> \resp_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4769 to $_DFFE_PP_ for $0\resp_delay[5:0] [1] -> \resp_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4770 to $_DFFE_PP_ for $0\resp_delay[5:0] [2] -> \resp_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4771 to $_DFFE_PP_ for $0\resp_delay[5:0] [3] -> \resp_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4772 to $_DFFE_PP_ for $0\resp_delay[5:0] [4] -> \resp_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4773 to $_DFFE_PP_ for $0\resp_delay[5:0] [5] -> \resp_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4795 to $_DFFE_PP_ for $0\sd_clk[0:0] -> \sd_clk.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4796 to $_DFFE_PP_ for $0\cmd[0:0] -> \cmd.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4797 to $_DFFE_PP_ for $0\led[0:0] -> \led.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4798 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [0] -> \sd_cmd_resp [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4799 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [1] -> \sd_cmd_resp [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4800 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [2] -> \sd_cmd_resp [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4801 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [3] -> \sd_cmd_resp [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4802 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [4] -> \sd_cmd_resp [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4803 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [5] -> \sd_cmd_resp [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4804 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [6] -> \sd_cmd_resp [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4805 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [7] -> \sd_cmd_resp [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4806 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [8] -> \sd_cmd_resp [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4807 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [9] -> \sd_cmd_resp [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4808 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [10] -> \sd_cmd_resp [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4809 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [11] -> \sd_cmd_resp [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4810 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [12] -> \sd_cmd_resp [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4811 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [13] -> \sd_cmd_resp [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4812 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [14] -> \sd_cmd_resp [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4813 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [15] -> \sd_cmd_resp [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4814 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [16] -> \sd_cmd_resp [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4815 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [17] -> \sd_cmd_resp [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4816 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [18] -> \sd_cmd_resp [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4817 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [19] -> \sd_cmd_resp [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4818 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [20] -> \sd_cmd_resp [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4819 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [21] -> \sd_cmd_resp [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4820 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [22] -> \sd_cmd_resp [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4821 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [23] -> \sd_cmd_resp [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4822 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [24] -> \sd_cmd_resp [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4823 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [25] -> \sd_cmd_resp [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4824 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [26] -> \sd_cmd_resp [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4825 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [27] -> \sd_cmd_resp [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4826 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [28] -> \sd_cmd_resp [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4827 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [29] -> \sd_cmd_resp [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4828 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [30] -> \sd_cmd_resp [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4829 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [31] -> \sd_cmd_resp [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4830 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [32] -> \sd_cmd_resp [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4831 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [33] -> \sd_cmd_resp [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4832 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [34] -> \sd_cmd_resp [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4833 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [35] -> \sd_cmd_resp [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4834 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [36] -> \sd_cmd_resp [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4835 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [37] -> \sd_cmd_resp [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4836 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [38] -> \sd_cmd_resp [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4837 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [39] -> \sd_cmd_resp [39].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4838 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [40] -> \sd_cmd_resp [40].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4839 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [41] -> \sd_cmd_resp [41].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4840 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [42] -> \sd_cmd_resp [42].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4841 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [43] -> \sd_cmd_resp [43].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4842 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [44] -> \sd_cmd_resp [44].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4843 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [45] -> \sd_cmd_resp [45].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4844 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [46] -> \sd_cmd_resp [46].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4845 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [47] -> \sd_cmd_resp [47].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4846 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [0] -> \sd_cmd_resp_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4847 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [1] -> \sd_cmd_resp_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4848 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [2] -> \sd_cmd_resp_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4849 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [3] -> \sd_cmd_resp_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4850 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [4] -> \sd_cmd_resp_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4851 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [5] -> \sd_cmd_resp_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4852 to $_DFFE_PP_ for $0\cmd_read[0:0] -> \cmd_read.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4853 to $_DFFE_PP_ for $0\sd_cmd[47:0] [0] -> \sd_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4854 to $_DFFE_PP_ for $0\sd_cmd[47:0] [1] -> \sd_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4855 to $_DFFE_PP_ for $0\sd_cmd[47:0] [2] -> \sd_cmd [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4856 to $_DFFE_PP_ for $0\sd_cmd[47:0] [3] -> \sd_cmd [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4857 to $_DFFE_PP_ for $0\sd_cmd[47:0] [4] -> \sd_cmd [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4858 to $_DFFE_PP_ for $0\sd_cmd[47:0] [5] -> \sd_cmd [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4859 to $_DFFE_PP_ for $0\sd_cmd[47:0] [6] -> \sd_cmd [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4860 to $_DFFE_PP_ for $0\sd_cmd[47:0] [7] -> \sd_cmd [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4861 to $_DFFE_PP_ for $0\sd_cmd[47:0] [8] -> \sd_cmd [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4862 to $_DFFE_PP_ for $0\sd_cmd[47:0] [9] -> \sd_cmd [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4863 to $_DFFE_PP_ for $0\sd_cmd[47:0] [10] -> \sd_cmd [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4864 to $_DFFE_PP_ for $0\sd_cmd[47:0] [11] -> \sd_cmd [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4865 to $_DFFE_PP_ for $0\sd_cmd[47:0] [12] -> \sd_cmd [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4866 to $_DFFE_PP_ for $0\sd_cmd[47:0] [13] -> \sd_cmd [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4867 to $_DFFE_PP_ for $0\sd_cmd[47:0] [14] -> \sd_cmd [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4868 to $_DFFE_PP_ for $0\sd_cmd[47:0] [15] -> \sd_cmd [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4869 to $_DFFE_PP_ for $0\sd_cmd[47:0] [16] -> \sd_cmd [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4870 to $_DFFE_PP_ for $0\sd_cmd[47:0] [17] -> \sd_cmd [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4871 to $_DFFE_PP_ for $0\sd_cmd[47:0] [18] -> \sd_cmd [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4872 to $_DFFE_PP_ for $0\sd_cmd[47:0] [19] -> \sd_cmd [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4873 to $_DFFE_PP_ for $0\sd_cmd[47:0] [20] -> \sd_cmd [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4874 to $_DFFE_PP_ for $0\sd_cmd[47:0] [21] -> \sd_cmd [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4875 to $_DFFE_PP_ for $0\sd_cmd[47:0] [22] -> \sd_cmd [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4876 to $_DFFE_PP_ for $0\sd_cmd[47:0] [23] -> \sd_cmd [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4877 to $_DFFE_PP_ for $0\sd_cmd[47:0] [24] -> \sd_cmd [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4878 to $_DFFE_PP_ for $0\sd_cmd[47:0] [25] -> \sd_cmd [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4879 to $_DFFE_PP_ for $0\sd_cmd[47:0] [26] -> \sd_cmd [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4880 to $_DFFE_PP_ for $0\sd_cmd[47:0] [27] -> \sd_cmd [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4881 to $_DFFE_PP_ for $0\sd_cmd[47:0] [28] -> \sd_cmd [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4882 to $_DFFE_PP_ for $0\sd_cmd[47:0] [29] -> \sd_cmd [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4883 to $_DFFE_PP_ for $0\sd_cmd[47:0] [30] -> \sd_cmd [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4884 to $_DFFE_PP_ for $0\sd_cmd[47:0] [31] -> \sd_cmd [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4885 to $_DFFE_PP_ for $0\sd_cmd[47:0] [32] -> \sd_cmd [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4886 to $_DFFE_PP_ for $0\sd_cmd[47:0] [33] -> \sd_cmd [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4887 to $_DFFE_PP_ for $0\sd_cmd[47:0] [34] -> \sd_cmd [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4888 to $_DFFE_PP_ for $0\sd_cmd[47:0] [35] -> \sd_cmd [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4889 to $_DFFE_PP_ for $0\sd_cmd[47:0] [36] -> \sd_cmd [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4890 to $_DFFE_PP_ for $0\sd_cmd[47:0] [37] -> \sd_cmd [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4891 to $_DFFE_PP_ for $0\sd_cmd[47:0] [38] -> \sd_cmd [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4892 to $_DFFE_PP_ for $0\sd_cmd[47:0] [39] -> \sd_cmd [39].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4893 to $_DFFE_PP_ for $0\sd_cmd[47:0] [40] -> \sd_cmd [40].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4894 to $_DFFE_PP_ for $0\sd_cmd[47:0] [41] -> \sd_cmd [41].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4895 to $_DFFE_PP_ for $0\sd_cmd[47:0] [42] -> \sd_cmd [42].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4896 to $_DFFE_PP_ for $0\sd_cmd[47:0] [43] -> \sd_cmd [43].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4897 to $_DFFE_PP_ for $0\sd_cmd[47:0] [44] -> \sd_cmd [44].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4898 to $_DFFE_PP_ for $0\sd_cmd[47:0] [45] -> \sd_cmd [45].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4899 to $_DFFE_PP_ for $0\sd_cmd[47:0] [46] -> \sd_cmd [46].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4900 to $_DFFE_PP_ for $0\sd_cmd[47:0] [47] -> \sd_cmd [47].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4901 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [0] -> \sd_cmd_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4902 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [1] -> \sd_cmd_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4903 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [2] -> \sd_cmd_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4904 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [3] -> \sd_cmd_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4905 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [4] -> \sd_cmd_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4906 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [5] -> \sd_cmd_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4907 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [0] -> \sd_mem_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4908 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [1] -> \sd_mem_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4909 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [2] -> \sd_mem_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4910 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [3] -> \sd_mem_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4911 to $_DFFE_PP_ for $0\data_ptr[6:0] [0] -> \data_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4912 to $_DFFE_PP_ for $0\data_ptr[6:0] [1] -> \data_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4913 to $_DFFE_PP_ for $0\data_ptr[6:0] [2] -> \data_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4914 to $_DFFE_PP_ for $0\data_ptr[6:0] [3] -> \data_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4915 to $_DFFE_PP_ for $0\data_ptr[6:0] [4] -> \data_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4916 to $_DFFE_PP_ for $0\data_ptr[6:0] [5] -> \data_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4917 to $_DFFE_PP_ for $0\data_ptr[6:0] [6] -> \data_ptr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4918 to $_DFFE_PP_ for $0\crc_state[3:0] [0] -> \crc_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4919 to $_DFFE_PP_ for $0\crc_state[3:0] [1] -> \crc_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4920 to $_DFFE_PP_ for $0\crc_state[3:0] [2] -> \crc_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4921 to $_DFFE_PP_ for $0\crc_state[3:0] [3] -> \crc_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4922 to $_DFFE_PP_ for $0\crc_buffer[7:0] [0] -> \crc_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4923 to $_DFFE_PP_ for $0\crc_buffer[7:0] [1] -> \crc_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4924 to $_DFFE_PP_ for $0\crc_buffer[7:0] [2] -> \crc_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4925 to $_DFFE_PP_ for $0\crc_buffer[7:0] [3] -> \crc_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4926 to $_DFFE_PP_ for $0\crc_buffer[7:0] [4] -> \crc_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4927 to $_DFFE_PP_ for $0\crc_buffer[7:0] [5] -> \crc_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4928 to $_DFFE_PP_ for $0\crc_buffer[7:0] [6] -> \crc_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4929 to $_DFFE_PP_ for $0\crc_buffer[7:0] [7] -> \crc_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4930 to $_DFFE_PP_ for $0\init_delay[13:0] [0] -> \init_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4931 to $_DFFE_PP_ for $0\init_delay[13:0] [1] -> \init_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4932 to $_DFFE_PP_ for $0\init_delay[13:0] [2] -> \init_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4933 to $_DFFE_PP_ for $0\init_delay[13:0] [3] -> \init_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4934 to $_DFFE_PP_ for $0\init_delay[13:0] [4] -> \init_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4935 to $_DFFE_PP_ for $0\init_delay[13:0] [5] -> \init_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4936 to $_DFFE_PP_ for $0\init_delay[13:0] [6] -> \init_delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4937 to $_DFFE_PP_ for $0\init_delay[13:0] [7] -> \init_delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4938 to $_DFFE_PP_ for $0\init_delay[13:0] [8] -> \init_delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4939 to $_DFFE_PP_ for $0\init_delay[13:0] [9] -> \init_delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4940 to $_DFFE_PP_ for $0\init_delay[13:0] [10] -> \init_delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4941 to $_DFFE_PP_ for $0\init_delay[13:0] [11] -> \init_delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4942 to $_DFFE_PP_ for $0\init_delay[13:0] [12] -> \init_delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4943 to $_DFFE_PP_ for $0\init_delay[13:0] [13] -> \init_delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4945 to $_DFFE_PP_ for $0\clkdiv[6:0] [1] -> \clkdiv [1].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~163 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~565 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in microsd.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4938 (SB_DFFE): \init_delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4768 (SB_DFFE): \resp_delay [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4769 (SB_DFFE): \resp_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4770 (SB_DFFE): \resp_delay [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4771 (SB_DFFE): \resp_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4772 (SB_DFFE): \resp_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4796 (SB_DFFE): \cmd = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4804 (SB_DFFE): \sd_cmd_resp [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4797 (SB_DFFE): \led = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4773 (SB_DFFE): \resp_delay [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4799 (SB_DFFE): \sd_cmd_resp [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4800 (SB_DFFE): \sd_cmd_resp [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4801 (SB_DFFE): \sd_cmd_resp [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4802 (SB_DFFE): \sd_cmd_resp [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4795 (SB_DFFE): \sd_clk = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4803 (SB_DFFE): \sd_cmd_resp [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4805 (SB_DFFE): \sd_cmd_resp [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4806 (SB_DFFE): \sd_cmd_resp [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4807 (SB_DFFE): \sd_cmd_resp [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4808 (SB_DFFE): \sd_cmd_resp [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4809 (SB_DFFE): \sd_cmd_resp [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4810 (SB_DFFE): \sd_cmd_resp [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4811 (SB_DFFE): \sd_cmd_resp [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4812 (SB_DFFE): \sd_cmd_resp [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4813 (SB_DFFE): \sd_cmd_resp [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4814 (SB_DFFE): \sd_cmd_resp [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4815 (SB_DFFE): \sd_cmd_resp [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4816 (SB_DFFE): \sd_cmd_resp [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4817 (SB_DFFE): \sd_cmd_resp [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4818 (SB_DFFE): \sd_cmd_resp [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4819 (SB_DFFE): \sd_cmd_resp [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4820 (SB_DFFE): \sd_cmd_resp [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4821 (SB_DFFE): \sd_cmd_resp [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4822 (SB_DFFE): \sd_cmd_resp [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4823 (SB_DFFE): \sd_cmd_resp [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4824 (SB_DFFE): \sd_cmd_resp [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4825 (SB_DFFE): \sd_cmd_resp [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4826 (SB_DFFE): \sd_cmd_resp [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4827 (SB_DFFE): \sd_cmd_resp [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4828 (SB_DFFE): \sd_cmd_resp [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4829 (SB_DFFE): \sd_cmd_resp [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4830 (SB_DFFE): \sd_cmd_resp [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4831 (SB_DFFE): \sd_cmd_resp [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4832 (SB_DFFE): \sd_cmd_resp [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4833 (SB_DFFE): \sd_cmd_resp [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4834 (SB_DFFE): \sd_cmd_resp [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4835 (SB_DFFE): \sd_cmd_resp [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4836 (SB_DFFE): \sd_cmd_resp [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4837 (SB_DFFE): \sd_cmd_resp [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4838 (SB_DFFE): \sd_cmd_resp [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4839 (SB_DFFE): \sd_cmd_resp [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4840 (SB_DFFE): \sd_cmd_resp [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4841 (SB_DFFE): \sd_cmd_resp [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4842 (SB_DFFE): \sd_cmd_resp [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4843 (SB_DFFE): \sd_cmd_resp [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4844 (SB_DFFE): \sd_cmd_resp [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4845 (SB_DFFE): \sd_cmd_resp [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4846 (SB_DFFE): \sd_cmd_resp_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4847 (SB_DFFE): \sd_cmd_resp_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4848 (SB_DFFE): \sd_cmd_resp_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4849 (SB_DFFE): \sd_cmd_resp_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4850 (SB_DFFE): \sd_cmd_resp_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4854 (SB_DFFE): \sd_cmd [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4852 (SB_DFFE): \cmd_read = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4798 (SB_DFFE): \sd_cmd_resp [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4851 (SB_DFFE): \sd_cmd_resp_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4855 (SB_DFFE): \sd_cmd [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4856 (SB_DFFE): \sd_cmd [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4857 (SB_DFFE): \sd_cmd [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4858 (SB_DFFE): \sd_cmd [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4859 (SB_DFFE): \sd_cmd [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4860 (SB_DFFE): \sd_cmd [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4861 (SB_DFFE): \sd_cmd [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4862 (SB_DFFE): \sd_cmd [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4863 (SB_DFFE): \sd_cmd [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4864 (SB_DFFE): \sd_cmd [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4865 (SB_DFFE): \sd_cmd [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4866 (SB_DFFE): \sd_cmd [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4867 (SB_DFFE): \sd_cmd [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4868 (SB_DFFE): \sd_cmd [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4869 (SB_DFFE): \sd_cmd [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4870 (SB_DFFE): \sd_cmd [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4871 (SB_DFFE): \sd_cmd [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4872 (SB_DFFE): \sd_cmd [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4873 (SB_DFFE): \sd_cmd [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4874 (SB_DFFE): \sd_cmd [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4875 (SB_DFFE): \sd_cmd [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4876 (SB_DFFE): \sd_cmd [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4877 (SB_DFFE): \sd_cmd [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4878 (SB_DFFE): \sd_cmd [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4879 (SB_DFFE): \sd_cmd [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4880 (SB_DFFE): \sd_cmd [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4881 (SB_DFFE): \sd_cmd [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4882 (SB_DFFE): \sd_cmd [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4883 (SB_DFFE): \sd_cmd [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4884 (SB_DFFE): \sd_cmd [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4885 (SB_DFFE): \sd_cmd [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4886 (SB_DFFE): \sd_cmd [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4887 (SB_DFFE): \sd_cmd [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4888 (SB_DFFE): \sd_cmd [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4889 (SB_DFFE): \sd_cmd [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4890 (SB_DFFE): \sd_cmd [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4891 (SB_DFFE): \sd_cmd [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4892 (SB_DFFE): \sd_cmd [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4893 (SB_DFFE): \sd_cmd [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4894 (SB_DFFE): \sd_cmd [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4895 (SB_DFFE): \sd_cmd [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4896 (SB_DFFE): \sd_cmd [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4897 (SB_DFFE): \sd_cmd [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4898 (SB_DFFE): \sd_cmd [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4899 (SB_DFFE): \sd_cmd [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4900 (SB_DFFE): \sd_cmd [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4901 (SB_DFFE): \sd_cmd_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4902 (SB_DFFE): \sd_cmd_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4903 (SB_DFFE): \sd_cmd_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4904 (SB_DFFE): \sd_cmd_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4905 (SB_DFFE): \sd_cmd_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4909 (SB_DFFE): \sd_mem_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4906 (SB_DFFE): \sd_cmd_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4853 (SB_DFFE): \sd_cmd [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4908 (SB_DFFE): \sd_mem_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4910 (SB_DFFE): \sd_mem_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4911 (SB_DFFE): \data_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4912 (SB_DFFE): \data_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4913 (SB_DFFE): \data_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4914 (SB_DFFE): \data_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4915 (SB_DFFE): \data_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4916 (SB_DFFE): \data_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4919 (SB_DFFE): \crc_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4907 (SB_DFFE): \sd_mem_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4917 (SB_DFFE): \data_ptr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4920 (SB_DFFE): \crc_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4921 (SB_DFFE): \crc_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4922 (SB_DFFE): \crc_buffer [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4923 (SB_DFFE): \crc_buffer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4924 (SB_DFFE): \crc_buffer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4925 (SB_DFFE): \crc_buffer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4926 (SB_DFFE): \crc_buffer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4927 (SB_DFFE): \crc_buffer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4928 (SB_DFFE): \crc_buffer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4929 (SB_DFFE): \crc_buffer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4931 (SB_DFFE): \init_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4932 (SB_DFFE): \init_delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4933 (SB_DFFE): \init_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4934 (SB_DFFE): \init_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4935 (SB_DFFE): \init_delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4936 (SB_DFFE): \init_delay [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4930 (SB_DFFE): \init_delay [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4937 (SB_DFFE): \init_delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4939 (SB_DFFE): \init_delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4940 (SB_DFFE): \init_delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4941 (SB_DFFE): \init_delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4942 (SB_DFFE): \init_delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4943 (SB_DFFE): \init_delay [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$4918 (SB_DFFE): \crc_state [0] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in microsd.
  Merging $auto$simplemap.cc:277:simplemap_mux$4794 (A=1'0, B=$add$microsd.v:108$3_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$2221) into $auto$simplemap.cc:420:simplemap_dff$4950 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$4745 (A=$procmux$2049_Y [1], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$2563) into $auto$simplemap.cc:420:simplemap_dff$4769 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4747 (A=$procmux$2049_Y [3], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$2563) into $auto$simplemap.cc:420:simplemap_dff$4771 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4788 (A=1'0, B=$add$microsd.v:108$3_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$2221) into $auto$simplemap.cc:420:simplemap_dff$4944 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$4789 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$7155 [1], S=$auto$simplemap.cc:256:simplemap_eqne$2221) into $auto$simplemap.cc:420:simplemap_dff$4945 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4790 (A=1'0, B=$add$microsd.v:108$3_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$2221) into $auto$simplemap.cc:420:simplemap_dff$4946 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$4791 (A=1'0, B=$add$microsd.v:108$3_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$2221) into $auto$simplemap.cc:420:simplemap_dff$4947 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$4792 (A=1'0, B=$add$microsd.v:108$3_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$2221) into $auto$simplemap.cc:420:simplemap_dff$4948 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$4793 (A=1'0, B=$add$microsd.v:108$3_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$2221) into $auto$simplemap.cc:420:simplemap_dff$4949 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~147 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~1062 debug messages>
Removed a total of 354 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 9 unused cells and 1589 unused wires.
<suppressed ~10 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\microsd' to `<abc-temp-dir>/input.blif'..
Extracted 1336 gates and 1529 wires to a netlist network with 191 inputs and 149 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     236.
ABC: Participating nodes from both networks       =     536.
ABC: Participating nodes from the first network   =     236. (  50.32 % of nodes)
ABC: Participating nodes from the second network  =     300. (  63.97 % of nodes)
ABC: Node pairs (any polarity)                    =     236. (  50.32 % of names can be moved)
ABC: Node pairs (same polarity)                   =     194. (  41.36 % of names can be moved)
ABC: Total runtime =     0.10 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      936
ABC RESULTS:        internal signals:     1189
ABC RESULTS:           input signals:      191
ABC RESULTS:          output signals:      149
Removing temp directory.
Removed 0 unused cells and 910 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111010110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000111000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111010011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010101000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000000110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000011001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
No more expansions possible.
<suppressed ~1710 debug messages>
Removed 0 unused cells and 934 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \microsd

2.43.2. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.44. Printing statistics.

=== microsd ===

   Number of wires:                504
   Number of wire bits:            857
   Number of public wires:          25
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                713
     $_TBUF_                         1
     SB_CARRY                       37
     SB_DFF                          1
     SB_DFFE                       153
     SB_DFFESR                       3
     SB_DFFSR                        6
     SB_LUT4                       512

2.45. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: af3644d883
CPU: user 4.63s system 0.19s, MEM: 49.53 MB total, 43.97 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 24x opt_expr (1 sec), 19% 19x opt_merge (0 sec), ...
