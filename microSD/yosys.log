
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `microsd.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: microsd.v
Parsing Verilog input from `microsd.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:497)
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:498)
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:499)
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:500)
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:501)
Generating RTLIL representation for module `\cmd_bram'.
Generating RTLIL representation for module `\microsd'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json microsd.json -blif microsd.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   1 design levels: microsd             
root of   0 design levels: cmd_bram            
Automatically selected microsd as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \microsd
Used module:     \cmd_bram

2.2.3. Analyzing design hierarchy..
Top module:  \microsd
Used module:     \cmd_bram
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:165$56'.
Cleaned up 1 empty switch.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 18 switch rules as full_case in process $proc$microsd.v:165$56 in module microsd.
Marked 1 switch rules as full_case in process $proc$microsd.v:137$48 in module microsd.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\microsd.$proc$microsd.v:102$110'.
  Set init value: \sd_clk = 1'0
  Set init value: \cmd = 1'1
  Set init value: \init_delay = 14'00000001010000
  Set init value: \resp_delay = 6'110101
  Set init value: \sd_cmd_resp_r2 = 136'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_resp_ptr_r2 = 8'10000111
  Set init value: \sd_cmd_resp = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_resp_ptr = 6'101111
  Set init value: \cmd_read = 1'0
  Set init value: \dat_read = 1'0
  Set init value: \sd_cmd = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_ptr = 6'101111
  Set init value: \sd_mem_state = 4'0000
  Set init value: \data_ptr = 7'0101111
  Set init value: \crc_state = 4'0000
  Set init value: \crc_buffer = 8'00000000
  Set init value: \cb_rd_en = 1'0
  Set init value: \cb_rd_addr = 5'00000
Found init rule in `\cmd_bram.$proc$cmd_bram.v:17$25'.
  Set init value: \valid_out = 1'0

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\microsd.$proc$microsd.v:102$110'.
     1/21: $0\crc_counter[7:0]
     2/21: $1\crc_buffer[7:0]
     3/21: $1\crc_state[3:0]
     4/21: $1\data_ptr[6:0]
     5/21: $1\init_delay[13:0]
     6/21: $1\cb_rd_addr[4:0]
     7/21: $1\cb_rd_en[0:0]
     8/21: $1\dat_read[0:0]
     9/21: $1\cmd_read[0:0]
    10/21: $1\sd_cmd_resp_ptr_r2[7:0]
    11/21: $1\sd_cmd_resp_r2[135:0]
    12/21: $1\sd_cmd_resp_ptr[5:0]
    13/21: $1\sd_cmd_resp[47:0]
    14/21: $1\resp_delay[5:0]
    15/21: $1\sd_mem_state[3:0]
    16/21: $1\sd_cmd_ptr[5:0]
    17/21: $1\sd_cmd[47:0]
    18/21: $0\dat[3:0]
    19/21: $1\cmd[0:0]
    20/21: $1\sd_clk[0:0]
    21/21: $0\led[0:0]
Creating decoders for process `\microsd.$proc$microsd.v:165$56'.
     1/203: $0\sd_cmd_resp[47:0] [47]
     2/203: $0\sd_cmd_resp[47:0] [46]
     3/203: $0\sd_cmd_resp[47:0] [45]
     4/203: $0\sd_cmd_resp[47:0] [44]
     5/203: $0\sd_cmd_resp[47:0] [43]
     6/203: $0\sd_cmd_resp[47:0] [42]
     7/203: $0\sd_cmd_resp[47:0] [41]
     8/203: $0\sd_cmd_resp[47:0] [40]
     9/203: $0\sd_cmd_resp[47:0] [39]
    10/203: $0\sd_cmd_resp[47:0] [38]
    11/203: $0\sd_cmd_resp[47:0] [37]
    12/203: $0\sd_cmd_resp[47:0] [36]
    13/203: $0\sd_cmd_resp[47:0] [35]
    14/203: $0\sd_cmd_resp[47:0] [34]
    15/203: $0\sd_cmd_resp[47:0] [33]
    16/203: $0\sd_cmd_resp[47:0] [32]
    17/203: $0\sd_cmd_resp[47:0] [31]
    18/203: $0\sd_cmd_resp[47:0] [30]
    19/203: $0\sd_cmd_resp[47:0] [29]
    20/203: $0\sd_cmd_resp[47:0] [28]
    21/203: $0\sd_cmd_resp[47:0] [27]
    22/203: $0\sd_cmd_resp[47:0] [26]
    23/203: $0\sd_cmd_resp[47:0] [25]
    24/203: $0\sd_cmd_resp[47:0] [24]
    25/203: $0\sd_cmd_resp[47:0] [23]
    26/203: $0\sd_cmd_resp[47:0] [22]
    27/203: $0\sd_cmd_resp[47:0] [21]
    28/203: $0\sd_cmd_resp[47:0] [20]
    29/203: $0\sd_cmd_resp[47:0] [19]
    30/203: $0\sd_cmd_resp[47:0] [18]
    31/203: $0\sd_cmd_resp[47:0] [17]
    32/203: $0\sd_cmd_resp[47:0] [16]
    33/203: $0\sd_cmd_resp[47:0] [15]
    34/203: $0\sd_cmd_resp[47:0] [14]
    35/203: $0\sd_cmd_resp[47:0] [13]
    36/203: $0\sd_cmd_resp[47:0] [12]
    37/203: $0\sd_cmd_resp[47:0] [11]
    38/203: $0\sd_cmd_resp[47:0] [10]
    39/203: $0\sd_cmd_resp[47:0] [9]
    40/203: $0\sd_cmd_resp[47:0] [8]
    41/203: $0\sd_cmd_resp[47:0] [7]
    42/203: $0\sd_cmd_resp[47:0] [6]
    43/203: $0\sd_cmd_resp[47:0] [5]
    44/203: $0\sd_cmd_resp[47:0] [4]
    45/203: $0\sd_cmd_resp[47:0] [3]
    46/203: $0\sd_cmd_resp[47:0] [2]
    47/203: $0\sd_cmd_resp[47:0] [1]
    48/203: $0\sd_cmd_resp[47:0] [0]
    49/203: $0\sd_cmd_resp_r2[135:0] [134]
    50/203: $0\sd_cmd_resp_r2[135:0] [133]
    51/203: $0\sd_cmd_resp_r2[135:0] [132]
    52/203: $0\sd_cmd_resp_r2[135:0] [131]
    53/203: $0\sd_cmd_resp_r2[135:0] [130]
    54/203: $0\sd_cmd_resp_r2[135:0] [129]
    55/203: $0\sd_cmd_resp_r2[135:0] [128]
    56/203: $0\sd_cmd_resp_r2[135:0] [127]
    57/203: $0\sd_cmd_resp_r2[135:0] [126]
    58/203: $0\sd_cmd_resp_r2[135:0] [125]
    59/203: $0\sd_cmd_resp_r2[135:0] [124]
    60/203: $0\sd_cmd_resp_r2[135:0] [123]
    61/203: $0\sd_cmd_resp_r2[135:0] [122]
    62/203: $0\sd_cmd_resp_r2[135:0] [121]
    63/203: $0\sd_cmd_resp_r2[135:0] [120]
    64/203: $0\sd_cmd_resp_r2[135:0] [119]
    65/203: $0\sd_cmd_resp_r2[135:0] [118]
    66/203: $0\sd_cmd_resp_r2[135:0] [117]
    67/203: $0\sd_cmd_resp_r2[135:0] [116]
    68/203: $0\sd_cmd_resp_r2[135:0] [115]
    69/203: $0\sd_cmd_resp_r2[135:0] [114]
    70/203: $0\sd_cmd_resp_r2[135:0] [113]
    71/203: $0\sd_cmd_resp_r2[135:0] [112]
    72/203: $0\sd_cmd_resp_r2[135:0] [111]
    73/203: $0\sd_cmd_resp_r2[135:0] [110]
    74/203: $0\sd_cmd_resp_r2[135:0] [109]
    75/203: $0\sd_cmd_resp_r2[135:0] [108]
    76/203: $0\sd_cmd_resp_r2[135:0] [107]
    77/203: $0\sd_cmd_resp_r2[135:0] [106]
    78/203: $0\sd_cmd_resp_r2[135:0] [105]
    79/203: $0\sd_cmd_resp_r2[135:0] [104]
    80/203: $0\sd_cmd_resp_r2[135:0] [103]
    81/203: $0\sd_cmd_resp_r2[135:0] [102]
    82/203: $0\sd_cmd_resp_r2[135:0] [101]
    83/203: $0\sd_cmd_resp_r2[135:0] [100]
    84/203: $0\sd_cmd_resp_r2[135:0] [99]
    85/203: $0\sd_cmd_resp_r2[135:0] [98]
    86/203: $0\sd_cmd_resp_r2[135:0] [97]
    87/203: $0\sd_cmd_resp_r2[135:0] [96]
    88/203: $0\sd_cmd_resp_r2[135:0] [95]
    89/203: $0\sd_cmd_resp_r2[135:0] [94]
    90/203: $0\sd_cmd_resp_r2[135:0] [93]
    91/203: $0\sd_cmd_resp_r2[135:0] [92]
    92/203: $0\sd_cmd_resp_r2[135:0] [91]
    93/203: $0\sd_cmd_resp_r2[135:0] [90]
    94/203: $0\sd_cmd_resp_r2[135:0] [89]
    95/203: $0\sd_cmd_resp_r2[135:0] [88]
    96/203: $0\sd_cmd_resp_r2[135:0] [87]
    97/203: $0\sd_cmd_resp_r2[135:0] [86]
    98/203: $0\sd_cmd_resp_r2[135:0] [85]
    99/203: $0\sd_cmd_resp_r2[135:0] [84]
   100/203: $0\sd_cmd_resp_r2[135:0] [83]
   101/203: $0\sd_cmd_resp_r2[135:0] [82]
   102/203: $0\sd_cmd_resp_r2[135:0] [81]
   103/203: $0\sd_cmd_resp_r2[135:0] [80]
   104/203: $0\sd_cmd_resp_r2[135:0] [79]
   105/203: $0\sd_cmd_resp_r2[135:0] [78]
   106/203: $0\sd_cmd_resp_r2[135:0] [77]
   107/203: $0\sd_cmd_resp_r2[135:0] [76]
   108/203: $0\sd_cmd_resp_r2[135:0] [75]
   109/203: $0\sd_cmd_resp_r2[135:0] [74]
   110/203: $0\sd_cmd_resp_r2[135:0] [73]
   111/203: $0\sd_cmd_resp_r2[135:0] [72]
   112/203: $0\sd_cmd_resp_r2[135:0] [71]
   113/203: $0\sd_cmd_resp_r2[135:0] [70]
   114/203: $0\sd_cmd_resp_r2[135:0] [69]
   115/203: $0\sd_cmd_resp_r2[135:0] [68]
   116/203: $0\sd_cmd_resp_r2[135:0] [67]
   117/203: $0\sd_cmd_resp_r2[135:0] [66]
   118/203: $0\sd_cmd_resp_r2[135:0] [65]
   119/203: $0\sd_cmd_resp_r2[135:0] [64]
   120/203: $0\sd_cmd_resp_r2[135:0] [63]
   121/203: $0\sd_cmd_resp_r2[135:0] [62]
   122/203: $0\sd_cmd_resp_r2[135:0] [61]
   123/203: $0\sd_cmd_resp_r2[135:0] [60]
   124/203: $0\sd_cmd_resp_r2[135:0] [59]
   125/203: $0\sd_cmd_resp_r2[135:0] [58]
   126/203: $0\sd_cmd_resp_r2[135:0] [57]
   127/203: $0\sd_cmd_resp_r2[135:0] [56]
   128/203: $0\sd_cmd_resp_r2[135:0] [55]
   129/203: $0\sd_cmd_resp_r2[135:0] [54]
   130/203: $0\sd_cmd_resp_r2[135:0] [53]
   131/203: $0\sd_cmd_resp_r2[135:0] [52]
   132/203: $0\sd_cmd_resp_r2[135:0] [51]
   133/203: $0\sd_cmd_resp_r2[135:0] [50]
   134/203: $0\sd_cmd_resp_r2[135:0] [49]
   135/203: $0\sd_cmd_resp_r2[135:0] [48]
   136/203: $0\sd_cmd_resp_r2[135:0] [47]
   137/203: $0\sd_cmd_resp_r2[135:0] [46]
   138/203: $0\sd_cmd_resp_r2[135:0] [45]
   139/203: $0\sd_cmd_resp_r2[135:0] [44]
   140/203: $0\sd_cmd_resp_r2[135:0] [43]
   141/203: $0\sd_cmd_resp_r2[135:0] [42]
   142/203: $0\sd_cmd_resp_r2[135:0] [41]
   143/203: $0\sd_cmd_resp_r2[135:0] [40]
   144/203: $0\sd_cmd_resp_r2[135:0] [39]
   145/203: $0\sd_cmd_resp_r2[135:0] [38]
   146/203: $0\sd_cmd_resp_r2[135:0] [37]
   147/203: $0\sd_cmd_resp_r2[135:0] [36]
   148/203: $0\sd_cmd_resp_r2[135:0] [35]
   149/203: $0\sd_cmd_resp_r2[135:0] [34]
   150/203: $0\sd_cmd_resp_r2[135:0] [33]
   151/203: $0\sd_cmd_resp_r2[135:0] [32]
   152/203: $0\sd_cmd_resp_r2[135:0] [31]
   153/203: $0\sd_cmd_resp_r2[135:0] [30]
   154/203: $0\sd_cmd_resp_r2[135:0] [29]
   155/203: $0\sd_cmd_resp_r2[135:0] [28]
   156/203: $0\sd_cmd_resp_r2[135:0] [27]
   157/203: $0\sd_cmd_resp_r2[135:0] [26]
   158/203: $0\sd_cmd_resp_r2[135:0] [25]
   159/203: $0\sd_cmd_resp_r2[135:0] [24]
   160/203: $0\sd_cmd_resp_r2[135:0] [23]
   161/203: $0\sd_cmd_resp_r2[135:0] [22]
   162/203: $0\sd_cmd_resp_r2[135:0] [21]
   163/203: $0\sd_cmd_resp_r2[135:0] [20]
   164/203: $0\sd_cmd_resp_r2[135:0] [19]
   165/203: $0\sd_cmd_resp_r2[135:0] [18]
   166/203: $0\sd_cmd_resp_r2[135:0] [17]
   167/203: $0\sd_cmd_resp_r2[135:0] [16]
   168/203: $0\sd_cmd_resp_r2[135:0] [15]
   169/203: $0\sd_cmd_resp_r2[135:0] [14]
   170/203: $0\sd_cmd_resp_r2[135:0] [13]
   171/203: $0\sd_cmd_resp_r2[135:0] [12]
   172/203: $0\sd_cmd_resp_r2[135:0] [11]
   173/203: $0\sd_cmd_resp_r2[135:0] [10]
   174/203: $0\sd_cmd_resp_r2[135:0] [9]
   175/203: $0\sd_cmd_resp_r2[135:0] [8]
   176/203: $0\sd_cmd_resp_r2[135:0] [7]
   177/203: $0\sd_cmd_resp_r2[135:0] [6]
   178/203: $0\sd_cmd_resp_r2[135:0] [5]
   179/203: $0\sd_cmd_resp_r2[135:0] [4]
   180/203: $0\sd_cmd_resp_r2[135:0] [3]
   181/203: $0\sd_cmd_resp_r2[135:0] [2]
   182/203: $0\sd_cmd_resp_r2[135:0] [1]
   183/203: $0\sd_cmd_resp_r2[135:0] [0]
   184/203: $0\sd_cmd[47:0] [7:1]
   185/203: $0\sd_cmd[47:0] [0]
   186/203: $0\crc_buffer[7:0] [0]
   187/203: $0\cb_rd_en[0:0]
   188/203: $0\cb_rd_addr[4:0]
   189/203: $0\crc_state[3:0]
   190/203: $0\data_ptr[6:0]
   191/203: $0\sd_mem_state[3:0]
   192/203: $0\sd_rca[15:0]
   193/203: $0\sd_cmd_ptr[5:0]
   194/203: $0\crc_buffer[7:0] [7:1]
   195/203: $0\dat_read[0:0]
   196/203: $0\cmd_read[0:0]
   197/203: $0\sd_cmd_resp_ptr[5:0]
   198/203: $0\sd_cmd_resp_r2[135:0] [135]
   199/203: $0\sd_cmd_resp_ptr_r2[7:0]
   200/203: $0\sd_cmd[47:0] [47:8]
   201/203: $0\resp_delay[5:0]
   202/203: $0\cmd[0:0]
   203/203: $0\sd_clk[0:0]
Creating decoders for process `\microsd.$proc$microsd.v:153$53'.
     1/1: $0\init_delay[13:0]
Creating decoders for process `\microsd.$proc$microsd.v:137$48'.
     1/2: $0\one_hundredkhz[0:0]
     2/2: $0\clkdiv[6:0]
Creating decoders for process `\cmd_bram.$proc$cmd_bram.v:17$25'.
     1/23: $1\valid_out[0:0]
     2/23: $0$memwr$\cmd_memory$cmd_bram.v:28$11_DATA[7:0]$47
     3/23: $0$memwr$\cmd_memory$cmd_bram.v:28$11_ADDR[31:0]$46
     4/23: $0$memwr$\cmd_memory$cmd_bram.v:27$10_DATA[7:0]$45
     5/23: $0$memwr$\cmd_memory$cmd_bram.v:27$10_ADDR[31:0]$44
     6/23: $0$memwr$\cmd_memory$cmd_bram.v:26$9_DATA[7:0]$43
     7/23: $0$memwr$\cmd_memory$cmd_bram.v:26$9_ADDR[31:0]$42
     8/23: $0$memwr$\cmd_memory$cmd_bram.v:25$8_DATA[7:0]$41
     9/23: $0$memwr$\cmd_memory$cmd_bram.v:25$8_ADDR[31:0]$40
    10/23: $0$memwr$\cmd_memory$cmd_bram.v:24$7_DATA[7:0]$39
    11/23: $0$memwr$\cmd_memory$cmd_bram.v:24$7_ADDR[31:0]$38
    12/23: $0$memwr$\cmd_memory$cmd_bram.v:23$6_DATA[7:0]$37
    13/23: $0$memwr$\cmd_memory$cmd_bram.v:23$6_ADDR[31:0]$36
    14/23: $0$memwr$\cmd_memory$cmd_bram.v:22$5_DATA[7:0]$35
    15/23: $0$memwr$\cmd_memory$cmd_bram.v:22$5_ADDR[31:0]$34
    16/23: $0$memwr$\cmd_memory$cmd_bram.v:21$4_DATA[7:0]$33
    17/23: $0$memwr$\cmd_memory$cmd_bram.v:21$4_ADDR[31:0]$32
    18/23: $0$memwr$\cmd_memory$cmd_bram.v:20$3_DATA[7:0]$31
    19/23: $0$memwr$\cmd_memory$cmd_bram.v:20$3_ADDR[31:0]$30
    20/23: $0$memwr$\cmd_memory$cmd_bram.v:19$2_DATA[7:0]$29
    21/23: $0$memwr$\cmd_memory$cmd_bram.v:19$2_ADDR[31:0]$28
    22/23: $0$memwr$\cmd_memory$cmd_bram.v:18$1_DATA[7:0]$27
    23/23: $0$memwr$\cmd_memory$cmd_bram.v:18$1_ADDR[31:0]$26
Creating decoders for process `\cmd_bram.$proc$cmd_bram.v:45$12'.
     1/2: $0\valid_out[0:0]
     2/2: $0\data_out[7:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\microsd.\dat' from process `\microsd.$proc$microsd.v:102$110'.
No latch inferred for signal `\microsd.\led' from process `\microsd.$proc$microsd.v:102$110'.
No latch inferred for signal `\microsd.\crc_counter' from process `\microsd.$proc$microsd.v:102$110'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:18$1_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:18$1_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:19$2_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:19$2_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:20$3_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:20$3_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:21$4_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:21$4_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:22$5_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:22$5_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:23$6_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:23$6_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:24$7_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:24$7_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:25$8_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:25$8_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:26$9_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:26$9_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:27$10_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:27$10_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:28$11_ADDR' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.
No latch inferred for signal `\cmd_bram.$memwr$\cmd_memory$cmd_bram.v:28$11_DATA' from process `\cmd_bram.$proc$cmd_bram.v:17$25'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\microsd.\sd_clk' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24765' with positive edge clock.
Creating register for signal `\microsd.\cmd' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24766' with positive edge clock.
Creating register for signal `\microsd.\resp_delay' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24767' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_r2' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24768' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_ptr_r2' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24769' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24770' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_ptr' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24771' with positive edge clock.
Creating register for signal `\microsd.\cmd_read' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24772' with positive edge clock.
Creating register for signal `\microsd.\dat_read' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24773' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24774' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_ptr' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24775' with positive edge clock.
Creating register for signal `\microsd.\sd_rca' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24776' with positive edge clock.
Creating register for signal `\microsd.\sd_mem_state' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24777' with positive edge clock.
Creating register for signal `\microsd.\data_ptr' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24778' with positive edge clock.
Creating register for signal `\microsd.\crc_state' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24779' with positive edge clock.
Creating register for signal `\microsd.\crc_buffer' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24780' with positive edge clock.
Creating register for signal `\microsd.\cb_rd_en' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24781' with positive edge clock.
Creating register for signal `\microsd.\cb_rd_addr' using process `\microsd.$proc$microsd.v:165$56'.
  created $dff cell `$procdff$24782' with positive edge clock.
Creating register for signal `\microsd.\init_delay' using process `\microsd.$proc$microsd.v:153$53'.
  created $dff cell `$procdff$24783' with positive edge clock.
Creating register for signal `\microsd.\clkdiv' using process `\microsd.$proc$microsd.v:137$48'.
  created $dff cell `$procdff$24784' with positive edge clock.
Creating register for signal `\microsd.\one_hundredkhz' using process `\microsd.$proc$microsd.v:137$48'.
  created $dff cell `$procdff$24785' with positive edge clock.
Creating register for signal `\cmd_bram.\data_out' using process `\cmd_bram.$proc$cmd_bram.v:45$12'.
  created $dff cell `$procdff$24786' with positive edge clock.
Creating register for signal `\cmd_bram.\valid_out' using process `\cmd_bram.$proc$cmd_bram.v:45$12'.
  created $dff cell `$procdff$24787' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `microsd.$proc$microsd.v:102$110'.
Found and cleaned up 27 empty switches in `\microsd.$proc$microsd.v:165$56'.
Removing empty process `microsd.$proc$microsd.v:165$56'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:153$53'.
Removing empty process `microsd.$proc$microsd.v:153$53'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:137$48'.
Removing empty process `microsd.$proc$microsd.v:137$48'.
Removing empty process `cmd_bram.$proc$cmd_bram.v:17$25'.
Found and cleaned up 1 empty switch in `\cmd_bram.$proc$cmd_bram.v:45$12'.
Removing empty process `cmd_bram.$proc$cmd_bram.v:45$12'.
Cleaned up 30 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Using template cmd_bram for cells of type cmd_bram.
<suppressed ~1 debug messages>
No more expansions possible.
Deleting now unused module cmd_bram.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).
Demoting inout port microsd.DAT to output.

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~48 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 1502 unused cells and 2446 unused wires.
<suppressed ~1508 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~642 debug messages>
Removed a total of 214 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$24622: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~72 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$24710: { $procmux$24721_CMP $procmux$24720_CMP $procmux$24470_CMP $procmux$24583_CMP $procmux$24713_CMP $auto$opt_reduce.cc:132:opt_mux$24799 $procmux$24399_CMP }
    New ctrl vector for $pmux cell $procmux$24741: { $procmux$24553_CMP $auto$opt_reduce.cc:132:opt_mux$24801 $procmux$24448_CMP }
    New ctrl vector for $pmux cell $procmux$24748: $auto$opt_reduce.cc:132:opt_mux$24803
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24800: { $procmux$1012_CMP $procmux$24547_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$24802: { $procmux$1012_CMP $procmux$1045_CMP $procmux$24448_CMP $procmux$24452_CMP $procmux$24524_CMP $procmux$24547_CMP $procmux$24553_CMP }
  Optimizing cells in module \microsd.
Performed a total of 5 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~288 debug messages>
Removed a total of 96 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \sd_cmd_resp_r2 = 136'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 to constant driver in module microsd.
Promoted 1 init specs to constant drivers.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 310 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~120 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:18$14 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:19$15 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:20$16 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:21$17 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:22$18 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:23$19 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:24$20 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:25$21 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:26$22 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:27$23 (cmd_bram_inst.cmd_memory).
Removed top 27 address bits (of 32) from memory init port microsd.$techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:28$24 (cmd_bram_inst.cmd_memory).
Removed top 31 bits (of 32) from port B of cell microsd.$add$microsd.v:146$50 ($add).
Removed top 25 bits (of 32) from port Y of cell microsd.$add$microsd.v:146$50 ($add).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:158$55 ($sub).
Removed top 4 bits (of 5) from port B of cell microsd.$add$microsd.v:199$60 ($add).
Removed top 3 bits (of 7) from port B of cell microsd.$sub$microsd.v:254$62 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:312$78 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:355$84 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:406$91 ($sub).
Removed top 4 bits (of 6) from port B of cell microsd.$eq$microsd.v:413$92 ($eq).
Removed top 7 bits (of 8) from port B of cell microsd.$sub$microsd.v:416$93 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:421$94 ($sub).
Removed top 1 bits (of 7) from port Y of cell microsd.$sub$microsd.v:421$94 ($sub).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$690_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$743_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$798_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$855_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$914_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1005_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1012_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1038_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1045_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1103_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1170_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1239_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1310_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1383_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1458_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1535_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1614_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1695_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1778_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1863_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1950_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2039_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2130_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2223_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2318_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2415_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2514_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2615_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2718_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2823_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$2930_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$3039_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell microsd.$procmux$3150_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$24405_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$24394_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24396_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell microsd.$procmux$24399_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24434_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24438_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$24442_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$24448_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell microsd.$procmux$24470_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24486 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24488 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24492 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24496 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24500 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24502 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24527 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24531 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$24533 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$24540 ($mux).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$24553_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell microsd.$procmux$24567 ($mux).
Removed top 2 bits (of 5) from port B of cell microsd.$procmux$24583_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell microsd.$procmux$24712_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell microsd.$procmux$24713_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell microsd.$procmux$24714_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell microsd.$procmux$24721_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell microsd.$procmux$24720_CMP0 ($eq).
Removed top 25 bits (of 32) from wire microsd.$add$microsd.v:146$50_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24486_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24488_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24492_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24496_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24500_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24502_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24527_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24531_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$24533_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$24540_Y.
Removed top 3 bits (of 4) from wire microsd.$procmux$24567_Y.
Removed top 1 bits (of 7) from wire microsd.$sub$microsd.v:421$94_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$8c0aa91d4db8741c9947d7a0de6c875d8dfddc39\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$efc71e781fe178e08e0b73b60d007d65bb528021\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$ed69233d74549f287b72a59633b9a76ab6bcc119\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~1096 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 36 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module microsd:
  creating $macc model for $add$microsd.v:146$50 ($add).
  creating $macc model for $add$microsd.v:199$60 ($add).
  creating $macc model for $sub$microsd.v:158$55 ($sub).
  creating $macc model for $sub$microsd.v:254$62 ($sub).
  creating $macc model for $sub$microsd.v:312$78 ($sub).
  creating $macc model for $sub$microsd.v:355$84 ($sub).
  creating $macc model for $sub$microsd.v:406$91 ($sub).
  creating $macc model for $sub$microsd.v:416$93 ($sub).
  creating $macc model for $sub$microsd.v:421$94 ($sub).
  creating $alu model for $macc $sub$microsd.v:421$94.
  creating $alu model for $macc $sub$microsd.v:416$93.
  creating $alu model for $macc $sub$microsd.v:406$91.
  creating $alu model for $macc $sub$microsd.v:355$84.
  creating $alu model for $macc $sub$microsd.v:312$78.
  creating $alu model for $macc $sub$microsd.v:254$62.
  creating $alu model for $macc $sub$microsd.v:158$55.
  creating $alu model for $macc $add$microsd.v:199$60.
  creating $alu model for $macc $add$microsd.v:146$50.
  creating $alu cell for $add$microsd.v:146$50: $auto$alumacc.cc:474:replace_alu$24837
  creating $alu cell for $add$microsd.v:199$60: $auto$alumacc.cc:474:replace_alu$24840
  creating $alu cell for $sub$microsd.v:158$55: $auto$alumacc.cc:474:replace_alu$24843
  creating $alu cell for $sub$microsd.v:254$62: $auto$alumacc.cc:474:replace_alu$24846
  creating $alu cell for $sub$microsd.v:312$78: $auto$alumacc.cc:474:replace_alu$24849
  creating $alu cell for $sub$microsd.v:355$84: $auto$alumacc.cc:474:replace_alu$24852
  creating $alu cell for $sub$microsd.v:406$91: $auto$alumacc.cc:474:replace_alu$24855
  creating $alu cell for $sub$microsd.v:416$93: $auto$alumacc.cc:474:replace_alu$24858
  creating $alu cell for $sub$microsd.v:421$94: $auto$alumacc.cc:474:replace_alu$24861
  created 9 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~120 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking microsd.crc_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking microsd.sd_mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$techmap\cmd_bram_inst.$memrd$\cmd_memory$cmd_bram.v:50$13' in module `\microsd': merged data $dff with rd enable to cell.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 2 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd_bram_inst.cmd_memory' in module `\microsd':
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:18$14 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:19$15 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:20$16 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:21$17 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:22$18 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:23$19 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:24$20 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:25$21 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:26$22 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:27$23 ($meminit)
  $techmap\cmd_bram_inst.$meminit$\cmd_memory$cmd_bram.v:28$24 ($meminit)
  $techmap\cmd_bram_inst.$memrd$\cmd_memory$cmd_bram.v:50$13 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing microsd.cmd_bram_inst.cmd_memory:
  Properties: ports=1 bits=176 rports=1 wports=0 dbits=8 abits=5 words=22
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=234 dwaste=8 bwaste=3920 waste=3920 efficiency=4
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \CLK.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3920 efficiency=4
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=490 dwaste=0 bwaste=3920 waste=3920 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain \CLK.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3920 efficiency=4
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1002 dwaste=0 bwaste=4008 waste=4008 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \CLK.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=4008 efficiency=2
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2026 dwaste=0 bwaste=4052 waste=4052 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Selecting best of 3 rules:
    Efficiency for rule 2.2: efficiency=2, cells=2, acells=1
    Efficiency for rule 2.1: efficiency=4, cells=1, acells=1
    Efficiency for rule 1.1: efficiency=4, cells=1, acells=1
    Selected rule 2.1 with efficiency 4.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain \CLK.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: cmd_bram_inst.cmd_memory.0.0.0

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
Using template $paramod$7d30d9420e069f87064237dcc01fb48637e7f525\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$7db195e0a7d7f7bebaf9fca88d0dd765d3669fe9\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~44 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~14 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 28 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~117 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$24492:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$24807 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$24807 [2] $auto$wreduce.cc:455:run$24807 [0] }
      New connections: $auto$wreduce.cc:455:run$24807 [1] = $auto$wreduce.cc:455:run$24807 [0]
    Consolidated identical input bits for $mux cell $procmux$24496:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$24808 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$24808 [2:1]
      New connections: $auto$wreduce.cc:455:run$24808 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24500:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$24809 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$24809 [2:1]
      New connections: $auto$wreduce.cc:455:run$24809 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24540:
      Old ports: A=3'100, B=3'001, Y=$auto$wreduce.cc:455:run$24814 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$24814 [2] $auto$wreduce.cc:455:run$24814 [0] }
      New connections: $auto$wreduce.cc:455:run$24814 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24549:
      Old ports: A=4'0011, B=4'1000, Y=$procmux$24549_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$24549_Y [3] $procmux$24549_Y [0] }
      New connections: $procmux$24549_Y [2:1] = { 1'0 $procmux$24549_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$24558:
      Old ports: A=4'0010, B=4'1001, Y=$procmux$24558_Y
      New ports: A=2'10, B=2'01, Y=$procmux$24558_Y [1:0]
      New connections: $procmux$24558_Y [3:2] = { $procmux$24558_Y [0] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$24622:
      Old ports: A={ 1'0 \crc_buffer [6:1] }, B={ $xor$microsd.v:273$72_Y \crc_buffer [6:4] $xor$microsd.v:277$68_Y \crc_buffer [2:1] }, Y=$procmux$24622_Y
      New ports: A={ 1'0 \crc_buffer [3] }, B={ $xor$microsd.v:273$72_Y $xor$microsd.v:277$68_Y }, Y={ $procmux$24622_Y [6] $procmux$24622_Y [2] }
      New connections: { $procmux$24622_Y [5:3] $procmux$24622_Y [1:0] } = { \crc_buffer [6:4] \crc_buffer [2:1] }
    Consolidated identical input bits for $mux cell $procmux$24717:
      Old ports: A=40'0111011100000000000000000000000000000000, B={ \cmd_bram_inst.data_out 32'00000000000000000000000000000000 }, Y=$procmux$24717_Y
      New ports: A=8'01110111, B=\cmd_bram_inst.data_out, Y=$procmux$24717_Y [39:32]
      New connections: $procmux$24717_Y [31:0] = 0
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$24502:
      Old ports: A=$auto$wreduce.cc:455:run$24809 [2:0], B=$auto$wreduce.cc:455:run$24808 [2:0], Y=$auto$wreduce.cc:455:run$24810 [2:0]
      New ports: A=$auto$wreduce.cc:455:run$24809 [2:1], B=$auto$wreduce.cc:455:run$24808 [2:1], Y=$auto$wreduce.cc:455:run$24810 [2:1]
      New connections: $auto$wreduce.cc:455:run$24810 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$24563:
      Old ports: A=4'0001, B=$procmux$24558_Y, Y=$procmux$24563_Y
      New ports: A=3'001, B={ $procmux$24558_Y [0] $procmux$24558_Y [1:0] }, Y={ $procmux$24563_Y [3] $procmux$24563_Y [1:0] }
      New connections: $procmux$24563_Y [2] = 1'0
  Optimizing cells in module \microsd.
Performed a total of 10 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~118 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:06bd827f6f487f52c037240a22f4735319b081ed$paramod$c17c2757a86408ad504dd786806ba33acfdaa50b\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:217d1fdd1fbbb1dd0a6b22ff249120c08f7b7b0c$paramod$d4e9353aa25f4197c2d56307ac757f55eeb00dfb\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $tribuf.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=4\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=40\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1388 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~1333 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~1242 debug messages>
Removed a total of 414 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 782 unused cells and 1676 unused wires.
<suppressed ~783 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24837.slice[0].carry: CO=\clkdiv [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24840.slice[0].carry: CO=\cb_rd_addr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24843.slice[0].carry: CO=\init_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24846.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24849.slice[0].carry: CO=\data_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24852.slice[0].carry: CO=\sd_cmd_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24855.slice[0].carry: CO=\resp_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24858.slice[0].carry: CO=\sd_cmd_resp_ptr_r2 [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24861.slice[0].carry: CO=\sd_cmd_resp_ptr [0]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24837.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24840.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24843.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24846.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24849.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24852.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24855.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24858.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24861.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~141 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24846.slice[1].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24846.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~13 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24846.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24846.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~13 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$24846.slice[3].carry: CO=\data_ptr [3]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$24846.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~12 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.31.36. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module microsd:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27340 to $_DFFE_PP_ for $0\sd_clk[0:0] -> \sd_clk.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27341 to $_DFFE_PP_ for $0\cmd[0:0] -> \cmd.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27342 to $_DFFE_PP_ for $0\resp_delay[5:0] [0] -> \resp_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27343 to $_DFFE_PP_ for $0\resp_delay[5:0] [1] -> \resp_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27344 to $_DFFE_PP_ for $0\resp_delay[5:0] [2] -> \resp_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27345 to $_DFFE_PP_ for $0\resp_delay[5:0] [3] -> \resp_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27346 to $_DFFE_PP_ for $0\resp_delay[5:0] [4] -> \resp_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27347 to $_DFFE_PP_ for $0\resp_delay[5:0] [5] -> \resp_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27348 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [0] -> \sd_cmd_resp_ptr_r2 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27349 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [1] -> \sd_cmd_resp_ptr_r2 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27350 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [2] -> \sd_cmd_resp_ptr_r2 [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27351 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [3] -> \sd_cmd_resp_ptr_r2 [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27352 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [4] -> \sd_cmd_resp_ptr_r2 [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27353 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [5] -> \sd_cmd_resp_ptr_r2 [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27354 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [6] -> \sd_cmd_resp_ptr_r2 [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27355 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr_r2[7:0] [7] -> \sd_cmd_resp_ptr_r2 [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27379 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [23] -> \sd_cmd_resp [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27380 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [24] -> \sd_cmd_resp [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27381 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [25] -> \sd_cmd_resp [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27382 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [26] -> \sd_cmd_resp [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27383 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [27] -> \sd_cmd_resp [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27384 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [28] -> \sd_cmd_resp [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27385 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [29] -> \sd_cmd_resp [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27386 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [30] -> \sd_cmd_resp [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27387 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [31] -> \sd_cmd_resp [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27388 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [32] -> \sd_cmd_resp [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27389 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [33] -> \sd_cmd_resp [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27390 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [34] -> \sd_cmd_resp [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27391 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [35] -> \sd_cmd_resp [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27392 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [36] -> \sd_cmd_resp [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27393 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [37] -> \sd_cmd_resp [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27394 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [38] -> \sd_cmd_resp [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27404 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [0] -> \sd_cmd_resp_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27405 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [1] -> \sd_cmd_resp_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27406 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [2] -> \sd_cmd_resp_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27407 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [3] -> \sd_cmd_resp_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27408 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [4] -> \sd_cmd_resp_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27409 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [5] -> \sd_cmd_resp_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27410 to $_DFFE_PP_ for $0\cmd_read[0:0] -> \cmd_read.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27411 to $_DFFE_PP_ for $0\dat_read[0:0] -> \dat_read.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27412 to $_DFFE_PP_ for $0\sd_cmd[47:0] [0] -> \sd_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27413 to $_DFFE_PP_ for $0\sd_cmd[47:0] [1] -> \sd_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27414 to $_DFFE_PP_ for $0\sd_cmd[47:0] [2] -> \sd_cmd [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27415 to $_DFFE_PP_ for $0\sd_cmd[47:0] [3] -> \sd_cmd [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27416 to $_DFFE_PP_ for $0\sd_cmd[47:0] [4] -> \sd_cmd [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27417 to $_DFFE_PP_ for $0\sd_cmd[47:0] [5] -> \sd_cmd [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27418 to $_DFFE_PP_ for $0\sd_cmd[47:0] [6] -> \sd_cmd [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27419 to $_DFFE_PP_ for $0\sd_cmd[47:0] [7] -> \sd_cmd [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27420 to $_DFFE_PP_ for $0\sd_cmd[47:0] [8] -> \sd_cmd [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27421 to $_DFFE_PP_ for $0\sd_cmd[47:0] [9] -> \sd_cmd [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27422 to $_DFFE_PP_ for $0\sd_cmd[47:0] [10] -> \sd_cmd [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27423 to $_DFFE_PP_ for $0\sd_cmd[47:0] [11] -> \sd_cmd [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27424 to $_DFFE_PP_ for $0\sd_cmd[47:0] [12] -> \sd_cmd [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27425 to $_DFFE_PP_ for $0\sd_cmd[47:0] [13] -> \sd_cmd [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27426 to $_DFFE_PP_ for $0\sd_cmd[47:0] [14] -> \sd_cmd [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27427 to $_DFFE_PP_ for $0\sd_cmd[47:0] [15] -> \sd_cmd [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27428 to $_DFFE_PP_ for $0\sd_cmd[47:0] [16] -> \sd_cmd [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27429 to $_DFFE_PP_ for $0\sd_cmd[47:0] [17] -> \sd_cmd [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27430 to $_DFFE_PP_ for $0\sd_cmd[47:0] [18] -> \sd_cmd [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27431 to $_DFFE_PP_ for $0\sd_cmd[47:0] [19] -> \sd_cmd [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27432 to $_DFFE_PP_ for $0\sd_cmd[47:0] [20] -> \sd_cmd [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27433 to $_DFFE_PP_ for $0\sd_cmd[47:0] [21] -> \sd_cmd [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27434 to $_DFFE_PP_ for $0\sd_cmd[47:0] [22] -> \sd_cmd [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27435 to $_DFFE_PP_ for $0\sd_cmd[47:0] [23] -> \sd_cmd [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27436 to $_DFFE_PP_ for $0\sd_cmd[47:0] [24] -> \sd_cmd [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27437 to $_DFFE_PP_ for $0\sd_cmd[47:0] [25] -> \sd_cmd [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27438 to $_DFFE_PP_ for $0\sd_cmd[47:0] [26] -> \sd_cmd [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27439 to $_DFFE_PP_ for $0\sd_cmd[47:0] [27] -> \sd_cmd [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27440 to $_DFFE_PP_ for $0\sd_cmd[47:0] [28] -> \sd_cmd [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27441 to $_DFFE_PP_ for $0\sd_cmd[47:0] [29] -> \sd_cmd [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27442 to $_DFFE_PP_ for $0\sd_cmd[47:0] [30] -> \sd_cmd [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27443 to $_DFFE_PP_ for $0\sd_cmd[47:0] [31] -> \sd_cmd [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27444 to $_DFFE_PP_ for $0\sd_cmd[47:0] [32] -> \sd_cmd [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27445 to $_DFFE_PP_ for $0\sd_cmd[47:0] [33] -> \sd_cmd [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27446 to $_DFFE_PP_ for $0\sd_cmd[47:0] [34] -> \sd_cmd [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27447 to $_DFFE_PP_ for $0\sd_cmd[47:0] [35] -> \sd_cmd [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27448 to $_DFFE_PP_ for $0\sd_cmd[47:0] [36] -> \sd_cmd [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27449 to $_DFFE_PP_ for $0\sd_cmd[47:0] [37] -> \sd_cmd [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27450 to $_DFFE_PP_ for $0\sd_cmd[47:0] [38] -> \sd_cmd [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27451 to $_DFFE_PP_ for $0\sd_cmd[47:0] [39] -> \sd_cmd [39].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27452 to $_DFFE_PP_ for $0\sd_cmd[47:0] [40] -> \sd_cmd [40].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27453 to $_DFFE_PP_ for $0\sd_cmd[47:0] [41] -> \sd_cmd [41].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27454 to $_DFFE_PP_ for $0\sd_cmd[47:0] [42] -> \sd_cmd [42].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27455 to $_DFFE_PP_ for $0\sd_cmd[47:0] [43] -> \sd_cmd [43].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27456 to $_DFFE_PP_ for $0\sd_cmd[47:0] [44] -> \sd_cmd [44].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27457 to $_DFFE_PP_ for $0\sd_cmd[47:0] [45] -> \sd_cmd [45].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27458 to $_DFFE_PP_ for $0\sd_cmd[47:0] [46] -> \sd_cmd [46].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27459 to $_DFFE_PP_ for $0\sd_cmd[47:0] [47] -> \sd_cmd [47].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27460 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [0] -> \sd_cmd_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27461 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [1] -> \sd_cmd_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27462 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [2] -> \sd_cmd_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27463 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [3] -> \sd_cmd_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27464 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [4] -> \sd_cmd_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27465 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [5] -> \sd_cmd_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27466 to $_DFFE_PP_ for $0\sd_rca[15:0] [0] -> \sd_rca [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27467 to $_DFFE_PP_ for $0\sd_rca[15:0] [1] -> \sd_rca [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27468 to $_DFFE_PP_ for $0\sd_rca[15:0] [2] -> \sd_rca [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27469 to $_DFFE_PP_ for $0\sd_rca[15:0] [3] -> \sd_rca [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27470 to $_DFFE_PP_ for $0\sd_rca[15:0] [4] -> \sd_rca [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27471 to $_DFFE_PP_ for $0\sd_rca[15:0] [5] -> \sd_rca [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27472 to $_DFFE_PP_ for $0\sd_rca[15:0] [6] -> \sd_rca [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27473 to $_DFFE_PP_ for $0\sd_rca[15:0] [7] -> \sd_rca [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27474 to $_DFFE_PP_ for $0\sd_rca[15:0] [8] -> \sd_rca [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27475 to $_DFFE_PP_ for $0\sd_rca[15:0] [9] -> \sd_rca [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27476 to $_DFFE_PP_ for $0\sd_rca[15:0] [10] -> \sd_rca [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27477 to $_DFFE_PP_ for $0\sd_rca[15:0] [11] -> \sd_rca [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27478 to $_DFFE_PP_ for $0\sd_rca[15:0] [12] -> \sd_rca [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27479 to $_DFFE_PP_ for $0\sd_rca[15:0] [13] -> \sd_rca [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27480 to $_DFFE_PP_ for $0\sd_rca[15:0] [14] -> \sd_rca [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27481 to $_DFFE_PP_ for $0\sd_rca[15:0] [15] -> \sd_rca [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27482 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [0] -> \sd_mem_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27483 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [1] -> \sd_mem_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27484 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [2] -> \sd_mem_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27485 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [3] -> \sd_mem_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27486 to $_DFFE_PP_ for $0\data_ptr[6:0] [0] -> \data_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27487 to $_DFFE_PP_ for $0\data_ptr[6:0] [1] -> \data_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27488 to $_DFFE_PP_ for $0\data_ptr[6:0] [2] -> \data_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27489 to $_DFFE_PP_ for $0\data_ptr[6:0] [3] -> \data_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27490 to $_DFFE_PP_ for $0\data_ptr[6:0] [4] -> \data_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27491 to $_DFFE_PP_ for $0\data_ptr[6:0] [5] -> \data_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27492 to $_DFFE_PP_ for $0\data_ptr[6:0] [6] -> \data_ptr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27493 to $_DFFE_PP_ for $0\crc_state[3:0] [0] -> \crc_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27494 to $_DFFE_PP_ for $0\crc_state[3:0] [1] -> \crc_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27495 to $_DFFE_PP_ for $0\crc_state[3:0] [2] -> \crc_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27496 to $_DFFE_PP_ for $0\crc_state[3:0] [3] -> \crc_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27497 to $_DFFE_PP_ for $0\crc_buffer[7:0] [0] -> \crc_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27498 to $_DFFE_PP_ for $0\crc_buffer[7:0] [1] -> \crc_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27499 to $_DFFE_PP_ for $0\crc_buffer[7:0] [2] -> \crc_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27500 to $_DFFE_PP_ for $0\crc_buffer[7:0] [3] -> \crc_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27501 to $_DFFE_PP_ for $0\crc_buffer[7:0] [4] -> \crc_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27502 to $_DFFE_PP_ for $0\crc_buffer[7:0] [5] -> \crc_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27503 to $_DFFE_PP_ for $0\crc_buffer[7:0] [6] -> \crc_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27504 to $_DFFE_PP_ for $0\crc_buffer[7:0] [7] -> \crc_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27505 to $_DFFE_PP_ for $0\cb_rd_en[0:0] -> \cb_rd_en.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27506 to $_DFFE_PP_ for $0\cb_rd_addr[4:0] [0] -> \cb_rd_addr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27507 to $_DFFE_PP_ for $0\cb_rd_addr[4:0] [1] -> \cb_rd_addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27508 to $_DFFE_PP_ for $0\cb_rd_addr[4:0] [2] -> \cb_rd_addr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27509 to $_DFFE_PP_ for $0\cb_rd_addr[4:0] [3] -> \cb_rd_addr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27510 to $_DFFE_PP_ for $0\cb_rd_addr[4:0] [4] -> \cb_rd_addr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27511 to $_DFFE_PP_ for $0\init_delay[13:0] [0] -> \init_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27512 to $_DFFE_PP_ for $0\init_delay[13:0] [1] -> \init_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27513 to $_DFFE_PP_ for $0\init_delay[13:0] [2] -> \init_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27514 to $_DFFE_PP_ for $0\init_delay[13:0] [3] -> \init_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27515 to $_DFFE_PP_ for $0\init_delay[13:0] [4] -> \init_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27516 to $_DFFE_PP_ for $0\init_delay[13:0] [5] -> \init_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27517 to $_DFFE_PP_ for $0\init_delay[13:0] [6] -> \init_delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27518 to $_DFFE_PP_ for $0\init_delay[13:0] [7] -> \init_delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27519 to $_DFFE_PP_ for $0\init_delay[13:0] [8] -> \init_delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27520 to $_DFFE_PP_ for $0\init_delay[13:0] [9] -> \init_delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27521 to $_DFFE_PP_ for $0\init_delay[13:0] [10] -> \init_delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27522 to $_DFFE_PP_ for $0\init_delay[13:0] [11] -> \init_delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27523 to $_DFFE_PP_ for $0\init_delay[13:0] [12] -> \init_delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27524 to $_DFFE_PP_ for $0\init_delay[13:0] [13] -> \init_delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$27526 to $_DFFE_PP_ for $0\clkdiv[6:0] [1] -> \clkdiv [1].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~162 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~505 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in microsd.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27534 (SB_DFF): \cmd_bram_inst.valid_out = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27341 (SB_DFFE): \cmd = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27343 (SB_DFFE): \resp_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27349 (SB_DFFE): \sd_cmd_resp_ptr_r2 [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27344 (SB_DFFE): \resp_delay [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27345 (SB_DFFE): \resp_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27346 (SB_DFFE): \resp_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27347 (SB_DFFE): \resp_delay [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27350 (SB_DFFE): \sd_cmd_resp_ptr_r2 [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27342 (SB_DFFE): \resp_delay [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27340 (SB_DFFE): \sd_clk = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27351 (SB_DFFE): \sd_cmd_resp_ptr_r2 [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27352 (SB_DFFE): \sd_cmd_resp_ptr_r2 [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27353 (SB_DFFE): \sd_cmd_resp_ptr_r2 [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27354 (SB_DFFE): \sd_cmd_resp_ptr_r2 [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27355 (SB_DFFE): \sd_cmd_resp_ptr_r2 [7] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27379 (SB_DFFE): \sd_cmd_resp [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27380 (SB_DFFE): \sd_cmd_resp [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27381 (SB_DFFE): \sd_cmd_resp [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27382 (SB_DFFE): \sd_cmd_resp [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27383 (SB_DFFE): \sd_cmd_resp [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27384 (SB_DFFE): \sd_cmd_resp [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27385 (SB_DFFE): \sd_cmd_resp [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27386 (SB_DFFE): \sd_cmd_resp [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27387 (SB_DFFE): \sd_cmd_resp [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27388 (SB_DFFE): \sd_cmd_resp [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27389 (SB_DFFE): \sd_cmd_resp [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27390 (SB_DFFE): \sd_cmd_resp [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27391 (SB_DFFE): \sd_cmd_resp [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27392 (SB_DFFE): \sd_cmd_resp [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27393 (SB_DFFE): \sd_cmd_resp [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27394 (SB_DFFE): \sd_cmd_resp [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27404 (SB_DFFE): \sd_cmd_resp_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27405 (SB_DFFE): \sd_cmd_resp_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27406 (SB_DFFE): \sd_cmd_resp_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27407 (SB_DFFE): \sd_cmd_resp_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27408 (SB_DFFE): \sd_cmd_resp_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27409 (SB_DFFE): \sd_cmd_resp_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27413 (SB_DFFE): \sd_cmd [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27412 (SB_DFFE): \sd_cmd [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27410 (SB_DFFE): \cmd_read = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27348 (SB_DFFE): \sd_cmd_resp_ptr_r2 [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27414 (SB_DFFE): \sd_cmd [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27415 (SB_DFFE): \sd_cmd [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27416 (SB_DFFE): \sd_cmd [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27417 (SB_DFFE): \sd_cmd [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27418 (SB_DFFE): \sd_cmd [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27419 (SB_DFFE): \sd_cmd [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27421 (SB_DFFE): \sd_cmd [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27411 (SB_DFFE): \dat_read = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27422 (SB_DFFE): \sd_cmd [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27423 (SB_DFFE): \sd_cmd [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27424 (SB_DFFE): \sd_cmd [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27425 (SB_DFFE): \sd_cmd [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27426 (SB_DFFE): \sd_cmd [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27427 (SB_DFFE): \sd_cmd [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27428 (SB_DFFE): \sd_cmd [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27429 (SB_DFFE): \sd_cmd [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27430 (SB_DFFE): \sd_cmd [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27431 (SB_DFFE): \sd_cmd [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27432 (SB_DFFE): \sd_cmd [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27433 (SB_DFFE): \sd_cmd [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27434 (SB_DFFE): \sd_cmd [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27435 (SB_DFFE): \sd_cmd [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27436 (SB_DFFE): \sd_cmd [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27437 (SB_DFFE): \sd_cmd [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27438 (SB_DFFE): \sd_cmd [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27439 (SB_DFFE): \sd_cmd [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27440 (SB_DFFE): \sd_cmd [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27441 (SB_DFFE): \sd_cmd [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27442 (SB_DFFE): \sd_cmd [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27443 (SB_DFFE): \sd_cmd [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27444 (SB_DFFE): \sd_cmd [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27445 (SB_DFFE): \sd_cmd [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27446 (SB_DFFE): \sd_cmd [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27447 (SB_DFFE): \sd_cmd [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27448 (SB_DFFE): \sd_cmd [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27449 (SB_DFFE): \sd_cmd [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27450 (SB_DFFE): \sd_cmd [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27451 (SB_DFFE): \sd_cmd [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27452 (SB_DFFE): \sd_cmd [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27453 (SB_DFFE): \sd_cmd [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27454 (SB_DFFE): \sd_cmd [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27455 (SB_DFFE): \sd_cmd [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27456 (SB_DFFE): \sd_cmd [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27457 (SB_DFFE): \sd_cmd [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27458 (SB_DFFE): \sd_cmd [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27459 (SB_DFFE): \sd_cmd [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27460 (SB_DFFE): \sd_cmd_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27461 (SB_DFFE): \sd_cmd_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27462 (SB_DFFE): \sd_cmd_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27463 (SB_DFFE): \sd_cmd_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27464 (SB_DFFE): \sd_cmd_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27465 (SB_DFFE): \sd_cmd_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27420 (SB_DFFE): \sd_cmd [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27482 (SB_DFFE): \sd_mem_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27483 (SB_DFFE): \sd_mem_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27484 (SB_DFFE): \sd_mem_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27485 (SB_DFFE): \sd_mem_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27487 (SB_DFFE): \data_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27490 (SB_DFFE): \data_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27488 (SB_DFFE): \data_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27489 (SB_DFFE): \data_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27491 (SB_DFFE): \data_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27492 (SB_DFFE): \data_ptr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27493 (SB_DFFE): \crc_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27494 (SB_DFFE): \crc_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27495 (SB_DFFE): \crc_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27496 (SB_DFFE): \crc_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27498 (SB_DFFE): \crc_buffer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27501 (SB_DFFE): \crc_buffer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27499 (SB_DFFE): \crc_buffer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27500 (SB_DFFE): \crc_buffer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27502 (SB_DFFE): \crc_buffer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27486 (SB_DFFE): \data_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27503 (SB_DFFE): \crc_buffer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27504 (SB_DFFE): \crc_buffer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27505 (SB_DFFE): \cb_rd_en = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27507 (SB_DFFE): \cb_rd_addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27513 (SB_DFFE): \init_delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27508 (SB_DFFE): \cb_rd_addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27509 (SB_DFFE): \cb_rd_addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27510 (SB_DFFE): \cb_rd_addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27512 (SB_DFFE): \init_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27506 (SB_DFFE): \cb_rd_addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27514 (SB_DFFE): \init_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27497 (SB_DFFE): \crc_buffer [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27515 (SB_DFFE): \init_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27516 (SB_DFFE): \init_delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27517 (SB_DFFE): \init_delay [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27518 (SB_DFFE): \init_delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27519 (SB_DFFE): \init_delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27520 (SB_DFFE): \init_delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27521 (SB_DFFE): \init_delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27522 (SB_DFFE): \init_delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27523 (SB_DFFE): \init_delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27524 (SB_DFFE): \init_delay [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$27511 (SB_DFFE): \init_delay [0] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in microsd.
  Merging $auto$simplemap.cc:277:simplemap_mux$27294 (A=$procmux$24732_Y [1], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$25145) into $auto$simplemap.cc:420:simplemap_dff$27343 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27296 (A=$procmux$24732_Y [3], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$25145) into $auto$simplemap.cc:420:simplemap_dff$27345 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28779 (A=1'0, B=$procmux$24710.Y_B [1], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27421 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28780 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29116 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27422 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28781 (A=1'0, B=$procmux$24710.Y_B [3], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27423 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28782 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29134 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27424 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28783 (A=1'0, B=$procmux$24710.Y_B [5], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27425 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28784 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29152 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27426 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28785 (A=1'0, B=$procmux$24710.Y_B [7], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27427 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28786 (A=1'0, B=$procmux$24710.Y_B [8], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27428 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28787 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29179 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27429 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28788 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29188 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27430 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28789 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29197 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27431 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28790 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29206 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27432 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28791 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29215 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27433 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28792 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29224 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27434 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28793 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29233 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27435 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28794 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29246 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27436 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28795 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29255 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27437 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28796 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29265 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27438 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28797 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29274 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27439 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28798 (A=1'0, B=$procmux$24710.Y_B [20], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27440 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28799 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29294 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27441 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28800 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29304 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27442 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28801 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29314 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27443 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28802 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29325 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27444 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28803 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29334 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27445 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28804 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29343 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27446 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28805 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29352 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27447 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28806 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29361 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27448 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28807 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29370 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27449 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28808 (A=1'0, B=$procmux$24710.Y_B [30], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27450 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28809 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29388 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27451 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$28778 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$29098 [0], S=$techmap$procmux$24710.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$27066_Y) into $auto$simplemap.cc:420:simplemap_dff$27420 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27334 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$29910 [1], S=$auto$simplemap.cc:256:simplemap_eqne$24930) into $auto$simplemap.cc:420:simplemap_dff$27526 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$27335 (A=1'0, B=$add$microsd.v:146$50_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$24930) into $auto$simplemap.cc:420:simplemap_dff$27527 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27336 (A=1'0, B=$add$microsd.v:146$50_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$24930) into $auto$simplemap.cc:420:simplemap_dff$27528 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27337 (A=1'0, B=$add$microsd.v:146$50_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$24930) into $auto$simplemap.cc:420:simplemap_dff$27529 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27338 (A=1'0, B=$add$microsd.v:146$50_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$24930) into $auto$simplemap.cc:420:simplemap_dff$27530 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27339 (A=1'0, B=$add$microsd.v:146$50_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$24930) into $auto$simplemap.cc:420:simplemap_dff$27531 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$27333 (A=1'0, B=$add$microsd.v:146$50_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$24930) into $auto$simplemap.cc:420:simplemap_dff$27525 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~150 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~1155 debug messages>
Removed a total of 385 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 41 unused cells and 1551 unused wires.
<suppressed ~42 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\microsd' to `<abc-temp-dir>/input.blif'..
Extracted 1186 gates and 1395 wires to a netlist network with 207 inputs and 177 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     266.
ABC: Participating nodes from both networks       =     599.
ABC: Participating nodes from the first network   =     265. (  60.09 % of nodes)
ABC: Participating nodes from the second network  =     334. (  75.74 % of nodes)
ABC: Node pairs (any polarity)                    =     265. (  60.09 % of names can be moved)
ABC: Node pairs (same polarity)                   =     230. (  52.15 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      880
ABC RESULTS:        internal signals:     1011
ABC RESULTS:           input signals:      207
ABC RESULTS:          output signals:      177
Removing temp directory.
Removed 0 unused cells and 781 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001101101101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110011001010 for cells of type $lut.
No more expansions possible.
<suppressed ~1506 debug messages>
Removed 0 unused cells and 878 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \microsd

2.43.2. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.44. Printing statistics.

=== microsd ===

   Number of wires:                472
   Number of wire bits:           1036
   Number of public wires:          36
   Number of public wire bits:     375
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                706
     $_TBUF_                         5
     SB_CARRY                       45
     SB_DFF                          2
     SB_DFFE                       119
     SB_DFFESR                      35
     SB_DFFSR                        6
     SB_LUT4                       493
     SB_RAM40_4K                     1

2.45. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: ceb5a4fc51
CPU: user 5.44s system 0.16s, MEM: 33.93 MB total, 28.32 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 23x opt_expr (1 sec), 17% 22x opt_clean (0 sec), ...
