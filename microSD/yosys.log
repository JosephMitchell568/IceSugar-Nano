
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `microsd.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: microsd.v
Parsing Verilog input from `microsd.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (microsd.v:500)
Generating RTLIL representation for module `\microsd'.
microsd.v:477: Warning: Identifier `\CALC_CRC' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json microsd.json -blif microsd.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: microsd             
Automatically selected microsd as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \microsd

2.2.3. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\microsd.$proc$microsd.v:127$9'.
Cleaned up 2 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 18 switch rules as full_case in process $proc$microsd.v:127$9 in module microsd.
Marked 1 switch rules as full_case in process $proc$microsd.v:99$1 in module microsd.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\microsd.$proc$microsd.v:71$72'.
  Set init value: \init_delay = 14'00000001010000
  Set init value: \resp_delay = 6'110101
  Set init value: \sd_clk = 1'0
  Set init value: \cmd = 1'1
  Set init value: \sd_cmd_resp = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_resp_ptr = 6'101111
  Set init value: \cmd_read = 1'0
  Set init value: \sd_cmd = 48'000000000000000000000000000000000000000000000000
  Set init value: \sd_cmd_ptr = 6'101111
  Set init value: \sd_mem_state = 4'0000
  Set init value: \data_ptr = 7'0101111
  Set init value: \crc_state = 4'0000
  Set init value: \crc_buffer = 8'00000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\microsd.$proc$microsd.v:71$72'.
     1/17: $0\crc_counter[7:0]
     2/17: $1\crc_buffer[7:0]
     3/17: $1\crc_state[3:0]
     4/17: $1\data_ptr[6:0]
     5/17: $1\init_delay[13:0]
     6/17: $0\dat_read[0:0]
     7/17: $1\cmd_read[0:0]
     8/17: $1\sd_cmd_resp_ptr[5:0]
     9/17: $1\sd_cmd_resp[47:0]
    10/17: $1\resp_delay[5:0]
    11/17: $1\sd_mem_state[3:0]
    12/17: $1\sd_cmd_ptr[5:0]
    13/17: $1\sd_cmd[47:0]
    14/17: $0\dat[3:0]
    15/17: $1\cmd[0:0]
    16/17: $1\sd_clk[0:0]
    17/17: $0\led[0:0]
Creating decoders for process `\microsd.$proc$microsd.v:127$9'.
     1/62: $0\crc_buffer[7:0] [7:1]
     2/62: $0\sd_cmd_resp[47:0] [46]
     3/62: $0\sd_cmd_resp[47:0] [45]
     4/62: $0\sd_cmd_resp[47:0] [44]
     5/62: $0\sd_cmd_resp[47:0] [43]
     6/62: $0\sd_cmd_resp[47:0] [42]
     7/62: $0\sd_cmd_resp[47:0] [41]
     8/62: $0\sd_cmd_resp[47:0] [40]
     9/62: $0\sd_cmd_resp[47:0] [39]
    10/62: $0\sd_cmd_resp[47:0] [38]
    11/62: $0\sd_cmd_resp[47:0] [37]
    12/62: $0\sd_cmd_resp[47:0] [36]
    13/62: $0\sd_cmd_resp[47:0] [35]
    14/62: $0\sd_cmd_resp[47:0] [34]
    15/62: $0\sd_cmd_resp[47:0] [33]
    16/62: $0\sd_cmd_resp[47:0] [32]
    17/62: $0\sd_cmd_resp[47:0] [31]
    18/62: $0\sd_cmd_resp[47:0] [30]
    19/62: $0\sd_cmd_resp[47:0] [29]
    20/62: $0\sd_cmd_resp[47:0] [28]
    21/62: $0\sd_cmd_resp[47:0] [27]
    22/62: $0\sd_cmd_resp[47:0] [26]
    23/62: $0\sd_cmd_resp[47:0] [25]
    24/62: $0\sd_cmd_resp[47:0] [24]
    25/62: $0\sd_cmd_resp[47:0] [23]
    26/62: $0\sd_cmd_resp[47:0] [22]
    27/62: $0\sd_cmd_resp[47:0] [21]
    28/62: $0\sd_cmd_resp[47:0] [20]
    29/62: $0\sd_cmd_resp[47:0] [19]
    30/62: $0\sd_cmd_resp[47:0] [18]
    31/62: $0\sd_cmd_resp[47:0] [17]
    32/62: $0\sd_cmd_resp[47:0] [16]
    33/62: $0\sd_cmd_resp[47:0] [15]
    34/62: $0\sd_cmd_resp[47:0] [14]
    35/62: $0\sd_cmd_resp[47:0] [13]
    36/62: $0\sd_cmd_resp[47:0] [12]
    37/62: $0\sd_cmd_resp[47:0] [11]
    38/62: $0\sd_cmd_resp[47:0] [10]
    39/62: $0\sd_cmd_resp[47:0] [9]
    40/62: $0\sd_cmd_resp[47:0] [8]
    41/62: $0\sd_cmd_resp[47:0] [7]
    42/62: $0\sd_cmd_resp[47:0] [6]
    43/62: $0\sd_cmd_resp[47:0] [5]
    44/62: $0\sd_cmd_resp[47:0] [4]
    45/62: $0\sd_cmd_resp[47:0] [3]
    46/62: $0\sd_cmd_resp[47:0] [2]
    47/62: $0\sd_cmd_resp[47:0] [1]
    48/62: $0\sd_cmd_resp[47:0] [0]
    49/62: $0\sd_cmd[47:0] [7:1]
    50/62: $0\sd_cmd[47:0] [0]
    51/62: $0\sd_cmd_resp[47:0] [47]
    52/62: $0\crc_state[3:0]
    53/62: $0\data_ptr[6:0]
    54/62: $0\sd_mem_state[3:0]
    55/62: $0\sd_cmd_ptr[5:0]
    56/62: $0\crc_buffer[7:0] [0]
    57/62: $0\cmd_read[0:0]
    58/62: $0\sd_cmd_resp_ptr[5:0]
    59/62: $0\sd_cmd[47:0] [47:8]
    60/62: $0\cmd[0:0]
    61/62: $0\sd_clk[0:0]
    62/62: $0\resp_delay[5:0]
Creating decoders for process `\microsd.$proc$microsd.v:115$6'.
     1/1: $0\init_delay[13:0]
Creating decoders for process `\microsd.$proc$microsd.v:99$1'.
     1/2: $0\one_hundredkhz[0:0]
     2/2: $0\clkdiv[6:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\microsd.\dat' from process `\microsd.$proc$microsd.v:71$72'.
No latch inferred for signal `\microsd.\led' from process `\microsd.$proc$microsd.v:71$72'.
No latch inferred for signal `\microsd.\dat_read' from process `\microsd.$proc$microsd.v:71$72'.
No latch inferred for signal `\microsd.\crc_counter' from process `\microsd.$proc$microsd.v:71$72'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\microsd.\resp_delay' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3352' with positive edge clock.
Creating register for signal `\microsd.\sd_clk' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3353' with positive edge clock.
Creating register for signal `\microsd.\cmd' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3354' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3355' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_resp_ptr' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3356' with positive edge clock.
Creating register for signal `\microsd.\cmd_read' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3357' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3358' with positive edge clock.
Creating register for signal `\microsd.\sd_cmd_ptr' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3359' with positive edge clock.
Creating register for signal `\microsd.\sd_mem_state' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3360' with positive edge clock.
Creating register for signal `\microsd.\data_ptr' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3361' with positive edge clock.
Creating register for signal `\microsd.\crc_state' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3362' with positive edge clock.
Creating register for signal `\microsd.\crc_buffer' using process `\microsd.$proc$microsd.v:127$9'.
  created $dff cell `$procdff$3363' with positive edge clock.
Creating register for signal `\microsd.\init_delay' using process `\microsd.$proc$microsd.v:115$6'.
  created $dff cell `$procdff$3364' with positive edge clock.
Creating register for signal `\microsd.\clkdiv' using process `\microsd.$proc$microsd.v:99$1'.
  created $dff cell `$procdff$3365' with positive edge clock.
Creating register for signal `\microsd.\one_hundredkhz' using process `\microsd.$proc$microsd.v:99$1'.
  created $dff cell `$procdff$3366' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `microsd.$proc$microsd.v:71$72'.
Found and cleaned up 29 empty switches in `\microsd.$proc$microsd.v:127$9'.
Removing empty process `microsd.$proc$microsd.v:127$9'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:115$6'.
Removing empty process `microsd.$proc$microsd.v:115$6'.
Found and cleaned up 1 empty switch in `\microsd.$proc$microsd.v:99$1'.
Removing empty process `microsd.$proc$microsd.v:99$1'.
Cleaned up 31 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~58 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 4 unused cells and 246 unused wires.
<suppressed ~16 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~702 debug messages>
Removed a total of 234 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$79: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
      Replacing known input bits on port A of cell $procmux$93: \crc_buffer [7:1] -> { 1'0 \crc_buffer [6:1] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$3066: { $procmux$3076_CMP $procmux$3072_CMP $auto$opt_reduce.cc:132:opt_mux$3370 }
    New ctrl vector for $pmux cell $procmux$3081: $auto$opt_reduce.cc:132:opt_mux$3372
    New ctrl vector for $pmux cell $procmux$3096: $auto$opt_reduce.cc:132:opt_mux$3374
    New ctrl vector for $pmux cell $procmux$3307: { $procmux$3086_CMP $procmux$3085_CMP $procmux$3083_CMP $auto$opt_reduce.cc:132:opt_mux$3376 }
    New ctrl vector for $pmux cell $procmux$3318: { $procmux$3210_CMP $auto$opt_reduce.cc:132:opt_mux$3378 $procmux$3141_CMP }
    New ctrl vector for $pmux cell $procmux$3325: $auto$opt_reduce.cc:132:opt_mux$3380
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3369: { $procmux$3067_CMP $procmux$3068_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3371: { $procmux$3085_CMP $procmux$3082_CMP $procmux$3083_CMP $procmux$3084_CMP $procmux$3086_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3373: { $procmux$3085_CMP $procmux$3082_CMP $procmux$3083_CMP $procmux$3084_CMP $procmux$3086_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3375: { $procmux$3082_CMP $procmux$3084_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3377: { $procmux$1057_CMP $procmux$3204_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3379: { $procmux$1027_CMP $procmux$1057_CMP $procmux$3184_CMP $procmux$3188_CMP $procmux$3204_CMP $procmux$3210_CMP $procmux$3221_CMP }
  Optimizing cells in module \microsd.
Performed a total of 12 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~156 debug messages>
Removed a total of 52 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 286 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~115 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    New ctrl vector for $pmux cell $procmux$3273: { $procmux$3204_CMP $auto$opt_reduce.cc:132:opt_mux$3382 }
  Optimizing cells in module \microsd.
Performed a total of 1 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~115 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell microsd.$add$microsd.v:108$3 ($add).
Removed top 25 bits (of 32) from port Y of cell microsd.$add$microsd.v:108$3 ($add).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:120$8 ($sub).
Removed top 3 bits (of 7) from port B of cell microsd.$sub$microsd.v:177$13 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:235$29 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:309$37 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$sub$microsd.v:356$43 ($sub).
Removed top 6 bits (of 7) from port B of cell microsd.$sub$microsd.v:365$44 ($sub).
Removed top 1 bits (of 7) from port Y of cell microsd.$sub$microsd.v:365$44 ($sub).
Removed top 3 bits (of 7) from port B of cell microsd.$sub$microsd.v:404$50 ($sub).
Removed top 1 bits (of 7) from port Y of cell microsd.$sub$microsd.v:404$50 ($sub).
Removed top 5 bits (of 6) from port B of cell microsd.$eq$microsd.v:452$67 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$583_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$631_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$681_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$733_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$787_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$843_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$901_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$961_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1027_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1023_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$1057_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1087_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1153_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1221_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1291_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1363_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1437_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell microsd.$procmux$1513_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1591_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1671_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1753_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1837_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$1923_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2011_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2101_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$2193_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2287_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2383_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2481_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell microsd.$procmux$2581_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$2683_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell microsd.$procmux$2787_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell microsd.$procmux$3072_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$3078_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$3080_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$3082_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$3083_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$3084_CMP0 ($eq).
Removed top 1 bits (of 40) from port B of cell microsd.$procmux$3085_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$3087_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$3124 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$3126 ($mux).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$3128_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$3129_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$3131 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$3134 ($mux).
Removed top 3 bits (of 4) from port B of cell microsd.$procmux$3138_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$3141_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$3146 ($mux).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$3148 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$3152 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$3156 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$3160 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$3162 ($mux).
Removed top 1 bits (of 4) from port B of cell microsd.$procmux$3188_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell microsd.$procmux$3190 ($mux).
Removed top 1 bits (of 4) from mux cell microsd.$procmux$3197 ($mux).
Removed top 2 bits (of 4) from port B of cell microsd.$procmux$3210_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell microsd.$procmux$3219 ($mux).
Removed top 25 bits (of 32) from wire microsd.$add$microsd.v:108$3_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$3124_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$3126_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$3131_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$3134_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$3146_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$3148_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$3152_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$3156_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$3160_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$3162_Y.
Removed top 2 bits (of 4) from wire microsd.$procmux$3190_Y.
Removed top 1 bits (of 4) from wire microsd.$procmux$3197_Y.
Removed top 3 bits (of 4) from wire microsd.$procmux$3219_Y.
Removed top 1 bits (of 7) from wire microsd.$sub$microsd.v:365$44_Y.
Removed top 1 bits (of 7) from wire microsd.$sub$microsd.v:404$50_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$8c0aa91d4db8741c9947d7a0de6c875d8dfddc39\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$64fdb727b8fb55a4fe9731fe5b6468d06ea5e6e3\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$ed69233d74549f287b72a59633b9a76ab6bcc119\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$efc71e781fe178e08e0b73b60d007d65bb528021\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~1084 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 39 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module microsd:
  creating $macc model for $add$microsd.v:108$3 ($add).
  creating $macc model for $sub$microsd.v:120$8 ($sub).
  creating $macc model for $sub$microsd.v:177$13 ($sub).
  creating $macc model for $sub$microsd.v:235$29 ($sub).
  creating $macc model for $sub$microsd.v:309$37 ($sub).
  creating $macc model for $sub$microsd.v:356$43 ($sub).
  creating $macc model for $sub$microsd.v:365$44 ($sub).
  creating $macc model for $sub$microsd.v:404$50 ($sub).
  creating $alu model for $macc $sub$microsd.v:404$50.
  creating $alu model for $macc $sub$microsd.v:365$44.
  creating $alu model for $macc $sub$microsd.v:356$43.
  creating $alu model for $macc $sub$microsd.v:309$37.
  creating $alu model for $macc $sub$microsd.v:235$29.
  creating $alu model for $macc $sub$microsd.v:177$13.
  creating $alu model for $macc $sub$microsd.v:120$8.
  creating $alu model for $macc $add$microsd.v:108$3.
  creating $alu cell for $add$microsd.v:108$3: $auto$alumacc.cc:474:replace_alu$3421
  creating $alu cell for $sub$microsd.v:120$8: $auto$alumacc.cc:474:replace_alu$3424
  creating $alu cell for $sub$microsd.v:177$13: $auto$alumacc.cc:474:replace_alu$3427
  creating $alu cell for $sub$microsd.v:235$29: $auto$alumacc.cc:474:replace_alu$3430
  creating $alu cell for $sub$microsd.v:309$37: $auto$alumacc.cc:474:replace_alu$3433
  creating $alu cell for $sub$microsd.v:356$43: $auto$alumacc.cc:474:replace_alu$3436
  creating $alu cell for $sub$microsd.v:365$44: $auto$alumacc.cc:474:replace_alu$3439
  creating $alu cell for $sub$microsd.v:404$50: $auto$alumacc.cc:474:replace_alu$3442
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~115 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking microsd.crc_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking microsd.sd_mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~2 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~114 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$3131:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$3386 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$3386 [2:1]
      New connections: $auto$wreduce.cc:455:run$3386 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$3134:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$3387 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$3387 [2:1]
      New connections: $auto$wreduce.cc:455:run$3387 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$3136:
      Old ports: A={ 1'0 $auto$wreduce.cc:455:run$3387 [2:0] }, B={ 1'0 $auto$wreduce.cc:455:run$3386 [2:0] }, Y=$procmux$3136_Y
      New ports: A=$auto$wreduce.cc:455:run$3387 [2:0], B=$auto$wreduce.cc:455:run$3386 [2:0], Y=$procmux$3136_Y [2:0]
      New connections: $procmux$3136_Y [3] = 1'0
    Consolidated identical input bits for $mux cell $procmux$3152:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$3390 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$3390 [2] $auto$wreduce.cc:455:run$3390 [0] }
      New connections: $auto$wreduce.cc:455:run$3390 [1] = $auto$wreduce.cc:455:run$3390 [0]
    Consolidated identical input bits for $mux cell $procmux$3156:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:455:run$3391 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$3391 [2:1]
      New connections: $auto$wreduce.cc:455:run$3391 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$3160:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$3392 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$3392 [2:1]
      New connections: $auto$wreduce.cc:455:run$3392 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$3197:
      Old ports: A=3'100, B=3'001, Y=$auto$wreduce.cc:455:run$3395 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$3395 [2] $auto$wreduce.cc:455:run$3395 [0] }
      New connections: $auto$wreduce.cc:455:run$3395 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$3206:
      Old ports: A=4'0011, B=4'1000, Y=$procmux$3206_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$3206_Y [3] $procmux$3206_Y [0] }
      New connections: $procmux$3206_Y [2:1] = { 1'0 $procmux$3206_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$3215:
      Old ports: A=4'0010, B=4'1001, Y=$procmux$3215_Y
      New ports: A=2'10, B=2'01, Y=$procmux$3215_Y [1:0]
      New connections: $procmux$3215_Y [3:2] = { $procmux$3215_Y [0] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$79:
      Old ports: A={ 1'0 \crc_buffer [6:1] }, B={ $xor$microsd.v:196$23_Y \crc_buffer [6:4] $xor$microsd.v:200$19_Y \crc_buffer [2:1] }, Y=$procmux$79_Y
      New ports: A={ 1'0 \crc_buffer [3] }, B={ $xor$microsd.v:196$23_Y $xor$microsd.v:200$19_Y }, Y={ $procmux$79_Y [6] $procmux$79_Y [2] }
      New connections: { $procmux$79_Y [5:3] $procmux$79_Y [1:0] } = { \crc_buffer [6:4] \crc_buffer [2:1] }
  Optimizing cells in module \microsd.
    Consolidated identical input bits for $mux cell $procmux$3136:
      Old ports: A=$auto$wreduce.cc:455:run$3387 [2:0], B=$auto$wreduce.cc:455:run$3386 [2:0], Y=$procmux$3136_Y [2:0]
      New ports: A=$auto$wreduce.cc:455:run$3387 [2:1], B=$auto$wreduce.cc:455:run$3386 [2:1], Y=$procmux$3136_Y [2:1]
      New connections: $procmux$3136_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$3162:
      Old ports: A=$auto$wreduce.cc:455:run$3392 [2:0], B=$auto$wreduce.cc:455:run$3391 [2:0], Y=$auto$wreduce.cc:455:run$3393 [2:0]
      New ports: A=$auto$wreduce.cc:455:run$3392 [2:1], B=$auto$wreduce.cc:455:run$3391 [2:1], Y=$auto$wreduce.cc:455:run$3393 [2:1]
      New connections: $auto$wreduce.cc:455:run$3393 [0] = 1'0
  Optimizing cells in module \microsd.
Performed a total of 12 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \microsd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~116 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \microsd.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:06bd827f6f487f52c037240a22f4735319b081ed$paramod$c17c2757a86408ad504dd786806ba33acfdaa50b\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:217d1fdd1fbbb1dd0a6b22ff249120c08f7b7b0c$paramod$d4e9353aa25f4197c2d56307ac757f55eeb00dfb\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $tribuf.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=4\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=4\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=10 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=40\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1366 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~1368 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~1734 debug messages>
Removed a total of 578 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 626 unused cells and 1626 unused wires.
<suppressed ~627 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3421.slice[0].carry: CO=\clkdiv [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3424.slice[0].carry: CO=\init_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3427.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3430.slice[0].carry: CO=\data_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3433.slice[0].carry: CO=\sd_cmd_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3436.slice[0].carry: CO=\resp_delay [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3439.slice[0].carry: CO=\sd_cmd_resp_ptr [0]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3442.slice[0].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3421.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3424.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3427.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3430.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3433.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3436.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3439.slice[1].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3442.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~103 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3427.slice[1].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3442.slice[1].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3427.slice[2].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3442.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~26 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 2 unused cells and 8 unused wires.
<suppressed ~3 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3427.slice[2].carry: CO=1'1
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3442.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3427.slice[3].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3442.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~26 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3427.slice[3].carry: CO=\data_ptr [3]
Optimized away SB_CARRY cell microsd.$auto$alumacc.cc:474:replace_alu$3442.slice[3].carry: CO=\sd_cmd_resp_ptr [3]
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3427.slice[4].adder back to logic.
Mapping SB_LUT4 cell microsd.$auto$alumacc.cc:474:replace_alu$3442.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~24 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.31.36. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module microsd:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6028 to $_DFFE_PP_ for $0\resp_delay[5:0] [0] -> \resp_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6029 to $_DFFE_PP_ for $0\resp_delay[5:0] [1] -> \resp_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6030 to $_DFFE_PP_ for $0\resp_delay[5:0] [2] -> \resp_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6031 to $_DFFE_PP_ for $0\resp_delay[5:0] [3] -> \resp_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6032 to $_DFFE_PP_ for $0\resp_delay[5:0] [4] -> \resp_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6033 to $_DFFE_PP_ for $0\resp_delay[5:0] [5] -> \resp_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6055 to $_DFFE_PP_ for $0\sd_clk[0:0] -> \sd_clk.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6056 to $_DFFE_PP_ for $0\cmd[0:0] -> \cmd.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6057 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [0] -> \sd_cmd_resp [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6058 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [1] -> \sd_cmd_resp [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6059 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [2] -> \sd_cmd_resp [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6060 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [3] -> \sd_cmd_resp [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6061 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [4] -> \sd_cmd_resp [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6062 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [5] -> \sd_cmd_resp [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6063 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [6] -> \sd_cmd_resp [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6064 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [7] -> \sd_cmd_resp [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6065 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [8] -> \sd_cmd_resp [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6066 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [9] -> \sd_cmd_resp [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6067 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [10] -> \sd_cmd_resp [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6068 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [11] -> \sd_cmd_resp [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6069 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [12] -> \sd_cmd_resp [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6070 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [13] -> \sd_cmd_resp [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6071 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [14] -> \sd_cmd_resp [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6072 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [15] -> \sd_cmd_resp [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6073 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [16] -> \sd_cmd_resp [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6074 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [17] -> \sd_cmd_resp [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6075 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [18] -> \sd_cmd_resp [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6076 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [19] -> \sd_cmd_resp [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6077 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [20] -> \sd_cmd_resp [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6078 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [21] -> \sd_cmd_resp [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6079 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [22] -> \sd_cmd_resp [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6080 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [23] -> \sd_cmd_resp [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6081 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [24] -> \sd_cmd_resp [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6082 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [25] -> \sd_cmd_resp [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6083 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [26] -> \sd_cmd_resp [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6084 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [27] -> \sd_cmd_resp [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6085 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [28] -> \sd_cmd_resp [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6086 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [29] -> \sd_cmd_resp [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6087 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [30] -> \sd_cmd_resp [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6088 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [31] -> \sd_cmd_resp [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6089 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [32] -> \sd_cmd_resp [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6090 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [33] -> \sd_cmd_resp [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6091 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [34] -> \sd_cmd_resp [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6092 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [35] -> \sd_cmd_resp [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6093 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [36] -> \sd_cmd_resp [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6094 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [37] -> \sd_cmd_resp [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6095 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [38] -> \sd_cmd_resp [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6096 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [39] -> \sd_cmd_resp [39].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6097 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [40] -> \sd_cmd_resp [40].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6098 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [41] -> \sd_cmd_resp [41].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6099 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [42] -> \sd_cmd_resp [42].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6100 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [43] -> \sd_cmd_resp [43].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6101 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [44] -> \sd_cmd_resp [44].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6102 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [45] -> \sd_cmd_resp [45].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6103 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [46] -> \sd_cmd_resp [46].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6104 to $_DFFE_PP_ for $0\sd_cmd_resp[47:0] [47] -> \sd_cmd_resp [47].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6105 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [0] -> \sd_cmd_resp_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6106 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [1] -> \sd_cmd_resp_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6107 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [2] -> \sd_cmd_resp_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6108 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [3] -> \sd_cmd_resp_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6109 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [4] -> \sd_cmd_resp_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6110 to $_DFFE_PP_ for $0\sd_cmd_resp_ptr[5:0] [5] -> \sd_cmd_resp_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6111 to $_DFFE_PP_ for $0\cmd_read[0:0] -> \cmd_read.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6112 to $_DFFE_PP_ for $0\sd_cmd[47:0] [0] -> \sd_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6113 to $_DFFE_PP_ for $0\sd_cmd[47:0] [1] -> \sd_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6114 to $_DFFE_PP_ for $0\sd_cmd[47:0] [2] -> \sd_cmd [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6115 to $_DFFE_PP_ for $0\sd_cmd[47:0] [3] -> \sd_cmd [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6116 to $_DFFE_PP_ for $0\sd_cmd[47:0] [4] -> \sd_cmd [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6117 to $_DFFE_PP_ for $0\sd_cmd[47:0] [5] -> \sd_cmd [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6118 to $_DFFE_PP_ for $0\sd_cmd[47:0] [6] -> \sd_cmd [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6119 to $_DFFE_PP_ for $0\sd_cmd[47:0] [7] -> \sd_cmd [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6120 to $_DFFE_PP_ for $0\sd_cmd[47:0] [8] -> \sd_cmd [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6121 to $_DFFE_PP_ for $0\sd_cmd[47:0] [9] -> \sd_cmd [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6122 to $_DFFE_PP_ for $0\sd_cmd[47:0] [10] -> \sd_cmd [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6123 to $_DFFE_PP_ for $0\sd_cmd[47:0] [11] -> \sd_cmd [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6124 to $_DFFE_PP_ for $0\sd_cmd[47:0] [12] -> \sd_cmd [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6125 to $_DFFE_PP_ for $0\sd_cmd[47:0] [13] -> \sd_cmd [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6126 to $_DFFE_PP_ for $0\sd_cmd[47:0] [14] -> \sd_cmd [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6127 to $_DFFE_PP_ for $0\sd_cmd[47:0] [15] -> \sd_cmd [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6128 to $_DFFE_PP_ for $0\sd_cmd[47:0] [16] -> \sd_cmd [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6129 to $_DFFE_PP_ for $0\sd_cmd[47:0] [17] -> \sd_cmd [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6130 to $_DFFE_PP_ for $0\sd_cmd[47:0] [18] -> \sd_cmd [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6131 to $_DFFE_PP_ for $0\sd_cmd[47:0] [19] -> \sd_cmd [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6132 to $_DFFE_PP_ for $0\sd_cmd[47:0] [20] -> \sd_cmd [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6133 to $_DFFE_PP_ for $0\sd_cmd[47:0] [21] -> \sd_cmd [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6134 to $_DFFE_PP_ for $0\sd_cmd[47:0] [22] -> \sd_cmd [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6135 to $_DFFE_PP_ for $0\sd_cmd[47:0] [23] -> \sd_cmd [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6136 to $_DFFE_PP_ for $0\sd_cmd[47:0] [24] -> \sd_cmd [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6137 to $_DFFE_PP_ for $0\sd_cmd[47:0] [25] -> \sd_cmd [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6138 to $_DFFE_PP_ for $0\sd_cmd[47:0] [26] -> \sd_cmd [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6139 to $_DFFE_PP_ for $0\sd_cmd[47:0] [27] -> \sd_cmd [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6140 to $_DFFE_PP_ for $0\sd_cmd[47:0] [28] -> \sd_cmd [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6141 to $_DFFE_PP_ for $0\sd_cmd[47:0] [29] -> \sd_cmd [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6142 to $_DFFE_PP_ for $0\sd_cmd[47:0] [30] -> \sd_cmd [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6143 to $_DFFE_PP_ for $0\sd_cmd[47:0] [31] -> \sd_cmd [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6144 to $_DFFE_PP_ for $0\sd_cmd[47:0] [32] -> \sd_cmd [32].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6145 to $_DFFE_PP_ for $0\sd_cmd[47:0] [33] -> \sd_cmd [33].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6146 to $_DFFE_PP_ for $0\sd_cmd[47:0] [34] -> \sd_cmd [34].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6147 to $_DFFE_PP_ for $0\sd_cmd[47:0] [35] -> \sd_cmd [35].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6148 to $_DFFE_PP_ for $0\sd_cmd[47:0] [36] -> \sd_cmd [36].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6149 to $_DFFE_PP_ for $0\sd_cmd[47:0] [37] -> \sd_cmd [37].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6150 to $_DFFE_PP_ for $0\sd_cmd[47:0] [38] -> \sd_cmd [38].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6151 to $_DFFE_PP_ for $0\sd_cmd[47:0] [39] -> \sd_cmd [39].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6152 to $_DFFE_PP_ for $0\sd_cmd[47:0] [40] -> \sd_cmd [40].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6153 to $_DFFE_PP_ for $0\sd_cmd[47:0] [41] -> \sd_cmd [41].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6154 to $_DFFE_PP_ for $0\sd_cmd[47:0] [42] -> \sd_cmd [42].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6155 to $_DFFE_PP_ for $0\sd_cmd[47:0] [43] -> \sd_cmd [43].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6156 to $_DFFE_PP_ for $0\sd_cmd[47:0] [44] -> \sd_cmd [44].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6157 to $_DFFE_PP_ for $0\sd_cmd[47:0] [45] -> \sd_cmd [45].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6158 to $_DFFE_PP_ for $0\sd_cmd[47:0] [46] -> \sd_cmd [46].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6159 to $_DFFE_PP_ for $0\sd_cmd[47:0] [47] -> \sd_cmd [47].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6160 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [0] -> \sd_cmd_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6161 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [1] -> \sd_cmd_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6162 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [2] -> \sd_cmd_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6163 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [3] -> \sd_cmd_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6164 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [4] -> \sd_cmd_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6165 to $_DFFE_PP_ for $0\sd_cmd_ptr[5:0] [5] -> \sd_cmd_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6166 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [0] -> \sd_mem_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6167 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [1] -> \sd_mem_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6168 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [2] -> \sd_mem_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6169 to $_DFFE_PP_ for $0\sd_mem_state[3:0] [3] -> \sd_mem_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6170 to $_DFFE_PP_ for $0\data_ptr[6:0] [0] -> \data_ptr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6171 to $_DFFE_PP_ for $0\data_ptr[6:0] [1] -> \data_ptr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6172 to $_DFFE_PP_ for $0\data_ptr[6:0] [2] -> \data_ptr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6173 to $_DFFE_PP_ for $0\data_ptr[6:0] [3] -> \data_ptr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6174 to $_DFFE_PP_ for $0\data_ptr[6:0] [4] -> \data_ptr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6175 to $_DFFE_PP_ for $0\data_ptr[6:0] [5] -> \data_ptr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6176 to $_DFFE_PP_ for $0\data_ptr[6:0] [6] -> \data_ptr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6177 to $_DFFE_PP_ for $0\crc_state[3:0] [0] -> \crc_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6178 to $_DFFE_PP_ for $0\crc_state[3:0] [1] -> \crc_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6179 to $_DFFE_PP_ for $0\crc_state[3:0] [2] -> \crc_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6180 to $_DFFE_PP_ for $0\crc_state[3:0] [3] -> \crc_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6181 to $_DFFE_PP_ for $0\crc_buffer[7:0] [0] -> \crc_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6182 to $_DFFE_PP_ for $0\crc_buffer[7:0] [1] -> \crc_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6183 to $_DFFE_PP_ for $0\crc_buffer[7:0] [2] -> \crc_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6184 to $_DFFE_PP_ for $0\crc_buffer[7:0] [3] -> \crc_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6185 to $_DFFE_PP_ for $0\crc_buffer[7:0] [4] -> \crc_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6186 to $_DFFE_PP_ for $0\crc_buffer[7:0] [5] -> \crc_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6187 to $_DFFE_PP_ for $0\crc_buffer[7:0] [6] -> \crc_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6188 to $_DFFE_PP_ for $0\crc_buffer[7:0] [7] -> \crc_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6189 to $_DFFE_PP_ for $0\init_delay[13:0] [0] -> \init_delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6190 to $_DFFE_PP_ for $0\init_delay[13:0] [1] -> \init_delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6191 to $_DFFE_PP_ for $0\init_delay[13:0] [2] -> \init_delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6192 to $_DFFE_PP_ for $0\init_delay[13:0] [3] -> \init_delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6193 to $_DFFE_PP_ for $0\init_delay[13:0] [4] -> \init_delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6194 to $_DFFE_PP_ for $0\init_delay[13:0] [5] -> \init_delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6195 to $_DFFE_PP_ for $0\init_delay[13:0] [6] -> \init_delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6196 to $_DFFE_PP_ for $0\init_delay[13:0] [7] -> \init_delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6197 to $_DFFE_PP_ for $0\init_delay[13:0] [8] -> \init_delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6198 to $_DFFE_PP_ for $0\init_delay[13:0] [9] -> \init_delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6199 to $_DFFE_PP_ for $0\init_delay[13:0] [10] -> \init_delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6200 to $_DFFE_PP_ for $0\init_delay[13:0] [11] -> \init_delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6201 to $_DFFE_PP_ for $0\init_delay[13:0] [12] -> \init_delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6202 to $_DFFE_PP_ for $0\init_delay[13:0] [13] -> \init_delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6204 to $_DFFE_PP_ for $0\clkdiv[6:0] [1] -> \clkdiv [1].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~162 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~422 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in microsd.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6030 (SB_DFFE): \resp_delay [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6197 (SB_DFFE): \init_delay [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6029 (SB_DFFE): \resp_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6031 (SB_DFFE): \resp_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6032 (SB_DFFE): \resp_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6056 (SB_DFFE): \cmd = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6028 (SB_DFFE): \resp_delay [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6064 (SB_DFFE): \sd_cmd_resp [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6033 (SB_DFFE): \resp_delay [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6058 (SB_DFFE): \sd_cmd_resp [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6059 (SB_DFFE): \sd_cmd_resp [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6060 (SB_DFFE): \sd_cmd_resp [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6061 (SB_DFFE): \sd_cmd_resp [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6062 (SB_DFFE): \sd_cmd_resp [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6055 (SB_DFFE): \sd_clk = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6063 (SB_DFFE): \sd_cmd_resp [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6065 (SB_DFFE): \sd_cmd_resp [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6066 (SB_DFFE): \sd_cmd_resp [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6067 (SB_DFFE): \sd_cmd_resp [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6068 (SB_DFFE): \sd_cmd_resp [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6069 (SB_DFFE): \sd_cmd_resp [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6070 (SB_DFFE): \sd_cmd_resp [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6071 (SB_DFFE): \sd_cmd_resp [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6072 (SB_DFFE): \sd_cmd_resp [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6073 (SB_DFFE): \sd_cmd_resp [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6074 (SB_DFFE): \sd_cmd_resp [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6075 (SB_DFFE): \sd_cmd_resp [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6076 (SB_DFFE): \sd_cmd_resp [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6077 (SB_DFFE): \sd_cmd_resp [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6078 (SB_DFFE): \sd_cmd_resp [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6079 (SB_DFFE): \sd_cmd_resp [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6080 (SB_DFFE): \sd_cmd_resp [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6081 (SB_DFFE): \sd_cmd_resp [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6082 (SB_DFFE): \sd_cmd_resp [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6083 (SB_DFFE): \sd_cmd_resp [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6084 (SB_DFFE): \sd_cmd_resp [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6085 (SB_DFFE): \sd_cmd_resp [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6086 (SB_DFFE): \sd_cmd_resp [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6087 (SB_DFFE): \sd_cmd_resp [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6088 (SB_DFFE): \sd_cmd_resp [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6089 (SB_DFFE): \sd_cmd_resp [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6090 (SB_DFFE): \sd_cmd_resp [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6091 (SB_DFFE): \sd_cmd_resp [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6092 (SB_DFFE): \sd_cmd_resp [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6093 (SB_DFFE): \sd_cmd_resp [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6094 (SB_DFFE): \sd_cmd_resp [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6095 (SB_DFFE): \sd_cmd_resp [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6096 (SB_DFFE): \sd_cmd_resp [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6097 (SB_DFFE): \sd_cmd_resp [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6098 (SB_DFFE): \sd_cmd_resp [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6099 (SB_DFFE): \sd_cmd_resp [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6100 (SB_DFFE): \sd_cmd_resp [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6101 (SB_DFFE): \sd_cmd_resp [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6102 (SB_DFFE): \sd_cmd_resp [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6103 (SB_DFFE): \sd_cmd_resp [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6104 (SB_DFFE): \sd_cmd_resp [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6105 (SB_DFFE): \sd_cmd_resp_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6106 (SB_DFFE): \sd_cmd_resp_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6107 (SB_DFFE): \sd_cmd_resp_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6108 (SB_DFFE): \sd_cmd_resp_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6109 (SB_DFFE): \sd_cmd_resp_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6113 (SB_DFFE): \sd_cmd [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6111 (SB_DFFE): \cmd_read = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6057 (SB_DFFE): \sd_cmd_resp [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6110 (SB_DFFE): \sd_cmd_resp_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6114 (SB_DFFE): \sd_cmd [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6115 (SB_DFFE): \sd_cmd [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6116 (SB_DFFE): \sd_cmd [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6117 (SB_DFFE): \sd_cmd [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6118 (SB_DFFE): \sd_cmd [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6119 (SB_DFFE): \sd_cmd [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6120 (SB_DFFE): \sd_cmd [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6121 (SB_DFFE): \sd_cmd [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6122 (SB_DFFE): \sd_cmd [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6123 (SB_DFFE): \sd_cmd [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6124 (SB_DFFE): \sd_cmd [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6125 (SB_DFFE): \sd_cmd [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6126 (SB_DFFE): \sd_cmd [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6127 (SB_DFFE): \sd_cmd [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6128 (SB_DFFE): \sd_cmd [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6129 (SB_DFFE): \sd_cmd [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6130 (SB_DFFE): \sd_cmd [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6131 (SB_DFFE): \sd_cmd [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6132 (SB_DFFE): \sd_cmd [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6133 (SB_DFFE): \sd_cmd [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6134 (SB_DFFE): \sd_cmd [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6135 (SB_DFFE): \sd_cmd [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6136 (SB_DFFE): \sd_cmd [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6137 (SB_DFFE): \sd_cmd [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6138 (SB_DFFE): \sd_cmd [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6139 (SB_DFFE): \sd_cmd [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6140 (SB_DFFE): \sd_cmd [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6141 (SB_DFFE): \sd_cmd [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6142 (SB_DFFE): \sd_cmd [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6143 (SB_DFFE): \sd_cmd [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6144 (SB_DFFE): \sd_cmd [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6145 (SB_DFFE): \sd_cmd [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6146 (SB_DFFE): \sd_cmd [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6147 (SB_DFFE): \sd_cmd [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6148 (SB_DFFE): \sd_cmd [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6149 (SB_DFFE): \sd_cmd [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6150 (SB_DFFE): \sd_cmd [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6151 (SB_DFFE): \sd_cmd [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6152 (SB_DFFE): \sd_cmd [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6153 (SB_DFFE): \sd_cmd [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6154 (SB_DFFE): \sd_cmd [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6155 (SB_DFFE): \sd_cmd [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6156 (SB_DFFE): \sd_cmd [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6157 (SB_DFFE): \sd_cmd [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6158 (SB_DFFE): \sd_cmd [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6159 (SB_DFFE): \sd_cmd [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6160 (SB_DFFE): \sd_cmd_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6161 (SB_DFFE): \sd_cmd_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6162 (SB_DFFE): \sd_cmd_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6163 (SB_DFFE): \sd_cmd_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6164 (SB_DFFE): \sd_cmd_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6168 (SB_DFFE): \sd_mem_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6165 (SB_DFFE): \sd_cmd_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6112 (SB_DFFE): \sd_cmd [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6167 (SB_DFFE): \sd_mem_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6169 (SB_DFFE): \sd_mem_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6170 (SB_DFFE): \data_ptr [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6171 (SB_DFFE): \data_ptr [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6172 (SB_DFFE): \data_ptr [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6173 (SB_DFFE): \data_ptr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6174 (SB_DFFE): \data_ptr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6175 (SB_DFFE): \data_ptr [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6178 (SB_DFFE): \crc_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6166 (SB_DFFE): \sd_mem_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6176 (SB_DFFE): \data_ptr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6179 (SB_DFFE): \crc_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6180 (SB_DFFE): \crc_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6181 (SB_DFFE): \crc_buffer [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6182 (SB_DFFE): \crc_buffer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6183 (SB_DFFE): \crc_buffer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6184 (SB_DFFE): \crc_buffer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6185 (SB_DFFE): \crc_buffer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6186 (SB_DFFE): \crc_buffer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6187 (SB_DFFE): \crc_buffer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6188 (SB_DFFE): \crc_buffer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6190 (SB_DFFE): \init_delay [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6191 (SB_DFFE): \init_delay [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6192 (SB_DFFE): \init_delay [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6193 (SB_DFFE): \init_delay [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6194 (SB_DFFE): \init_delay [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6195 (SB_DFFE): \init_delay [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6189 (SB_DFFE): \init_delay [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6196 (SB_DFFE): \init_delay [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6198 (SB_DFFE): \init_delay [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6199 (SB_DFFE): \init_delay [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6200 (SB_DFFE): \init_delay [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6201 (SB_DFFE): \init_delay [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6202 (SB_DFFE): \init_delay [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6177 (SB_DFFE): \crc_state [0] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in microsd.
  Merging $auto$simplemap.cc:277:simplemap_mux$6054 (A=1'0, B=$add$microsd.v:108$3_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$3506) into $auto$simplemap.cc:420:simplemap_dff$6209 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6005 (A=$procmux$3339_Y [1], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$3760) into $auto$simplemap.cc:420:simplemap_dff$6029 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$6007 (A=$procmux$3339_Y [3], B=1'0, S=$auto$simplemap.cc:250:simplemap_eqne$3760) into $auto$simplemap.cc:420:simplemap_dff$6031 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$6048 (A=1'0, B=$add$microsd.v:108$3_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$3506) into $auto$simplemap.cc:420:simplemap_dff$6203 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6049 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$8810 [1], S=$auto$simplemap.cc:256:simplemap_eqne$3506) into $auto$simplemap.cc:420:simplemap_dff$6204 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$6050 (A=1'0, B=$add$microsd.v:108$3_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$3506) into $auto$simplemap.cc:420:simplemap_dff$6205 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6051 (A=1'0, B=$add$microsd.v:108$3_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$3506) into $auto$simplemap.cc:420:simplemap_dff$6206 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6052 (A=1'0, B=$add$microsd.v:108$3_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$3506) into $auto$simplemap.cc:420:simplemap_dff$6207 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6053 (A=1'0, B=$add$microsd.v:108$3_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$3506) into $auto$simplemap.cc:420:simplemap_dff$6208 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.
<suppressed ~141 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
<suppressed ~504 debug messages>
Removed a total of 168 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..
Removed 9 unused cells and 1303 unused wires.
<suppressed ~10 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module microsd.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\microsd'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \microsd..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\microsd' to `<abc-temp-dir>/input.blif'..
Extracted 1369 gates and 1561 wires to a netlist network with 190 inputs and 151 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     296.
ABC: Participating nodes from both networks       =     652.
ABC: Participating nodes from the first network   =     296. (  52.30 % of nodes)
ABC: Participating nodes from the second network  =     356. (  62.90 % of nodes)
ABC: Node pairs (any polarity)                    =     296. (  52.30 % of names can be moved)
ABC: Node pairs (same polarity)                   =     190. (  33.57 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     1130
ABC RESULTS:        internal signals:     1220
ABC RESULTS:           input signals:      190
ABC RESULTS:          output signals:      151
Removing temp directory.
Removed 0 unused cells and 902 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110010101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111010110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001101101101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010111100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000111000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111010011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000000110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
No more expansions possible.
<suppressed ~1752 debug messages>
Removed 0 unused cells and 1128 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \microsd

2.43.2. Analyzing design hierarchy..
Top module:  \microsd
Removed 0 unused modules.

2.44. Printing statistics.

=== microsd ===

   Number of wires:                550
   Number of wire bits:            903
   Number of public wires:          24
   Number of public wire bits:     184
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                809
     $_TBUF_                         1
     SB_CARRY                       37
     SB_DFF                          1
     SB_DFFE                       152
     SB_DFFESR                       3
     SB_DFFSR                        6
     SB_LUT4                       609

2.45. Executing CHECK pass (checking for obvious problems).
checking module microsd..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 2cad5ab1b7
CPU: user 5.21s system 0.22s, MEM: 33.20 MB total, 27.63 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 19x opt_merge (1 sec), 21% 24x opt_expr (1 sec), ...
